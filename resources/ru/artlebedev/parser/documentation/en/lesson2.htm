<html>
<head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html;charset=iso-8859-1">
    <meta name="keywords" content="auto.p,MAIN,main">
    <title>Lesson 2. Navigation menu and page structure</title>

    <script language="JavaScript"><!--
    if(top.frames.length==0) {
        top.location.href='./?lesson2.htm'
    } else {
        if(document.referrer!='' && 0>document.referrer.indexOf(top.frames[0].location.pathname)) {
            top.frames[0].location.hash='lesson2.htm'
        }
    }
    //--></script>

</head>

<body bgcolor="#FFFFFF" text="black">


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000"><b>Lesson 2. Navigation menu and page structure
<br>
</b></span>
    </td>
  </tr>
  <tr><td bgcolor="#99D228" height="3"></td></tr>
</table>
<br>



<span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">We finished the previous lesson with pointing out imperfections in the way our menu worked. Let's now fix them. So far, our menu has a spare link to the current page, which makes our site look rather clumsy. To avoid it, we should check if a section in the menu is the current page. If so, we shouldn't place a link. To indicate current section, we should change background color in current section cell.
<br>

<br>
Open file <span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> and replace its content with:
<br>

<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@navigation[]
<br>
$sections[^</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=tableload.htm>table::load</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>[/sections.cfg]]
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&lt;table&nbsp;width="100%"&nbsp;border="0"&nbsp;bgcolor="#000000"&nbsp;cellspacing="1"&gt;
<br>
&nbsp;&nbsp;&nbsp;&lt;tr&nbsp;&nbsp;bgcolor="#FFFFFF"&gt;</b><b>
<br>
</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>&nbsp;&nbsp;&nbsp;^sections.</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=tablemenu.htm>menu</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>{
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^navigation_cell[]
<br>
&nbsp;&nbsp;&nbsp;}
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
<br>
&lt;/table&gt;
<br>
&lt;br&nbsp;/&gt;
<br>

<br>
</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@navigation_cell[]
<br>
$cell_width[^</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=opeval.htm>eval</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>(100\$sections)%]
<br>
^if($sections.</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=tablefields.htm>uri</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>&nbsp;eq&nbsp;$</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=requesturi.htm>request:uri</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>){
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&nbsp;&nbsp;&nbsp;&lt;td&nbsp;width="</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>$cell_width</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>"&nbsp;align="center"&nbsp;bgcolor="#A2D0F2"&gt;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&lt;nobr&gt;</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>$sections.</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=tablefields.htm>name</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&lt;/nobr&gt;
<br>
&nbsp;&nbsp;&nbsp;&lt;/td&gt;</b><b>
<br>
</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>}{
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&nbsp;&nbsp;&nbsp;&lt;td&nbsp;width="</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>$cell_width</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>"&nbsp;align="center"&gt;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&lt;a&nbsp;href="</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>$sections.</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=tablefields.htm>uri</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>"&gt;&lt;nobr&gt;</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>$sections.</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=tablefields.htm>name</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&lt;/nobr&gt;&lt;/a&gt;
<br>
&nbsp;&nbsp;&nbsp;&lt;/td&gt;</b><b>
<br>
</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>}</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>
<br>
</b></span></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
What have we changed? Not much, seemingly. But our module has been significantly improved. We have added a new method-</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>navigation_cell</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">-which is called from </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>navigation</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> method. As you have probably noticed, we introduce here a new structure:
<br>

<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>^</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=opif.htm>if</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>(</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>condition</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>)</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>{code&nbsp;to&nbsp;execute&nbsp;if&nbsp;true}{code&nbsp;to&nbsp;execute&nbsp;if&nbsp;false}</b></span></span><span style="font-family:Monospace; font-size:12pt; color:#000000"><b>
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
What this piece does is not really hard to understand. The round brackets contain some condition and-depending on the value returned (TRUE or FALSE)-the code will follow different branches. If condition contains an expression which equals zero, the resulting value will be 'FALSE,' otherwise-'TRUE'. We use operator </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>if</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> to check whether we need to place a link on the section or not. Let's now see how the whole piece of code with condition works. We will compare two strings, where the first is the URI-string contained in column </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>uri</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> in table </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>sections</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> and the other is the current URI </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>($request:uri</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> returns string equal to the current URI). Here you may ask-and what strings can be equal? Of course those which are fully equal in length and characters contained in them.
<br>

<br>
To compare two strings, in Parser, we use the following  <a href=exprops.htm>operators</a>:
<br>

<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>eq</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> - strings are equal (<b><i>equal</i></b>): </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>parser&nbsp;eq&nbsp;parser</b>
<br>
<b>ne</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> - strings are not equal (<b><i>not equal</i></b>): </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>parser&nbsp;ne&nbsp;parser3
<br>
lt</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> - number of characters in the first string is less than that in the second  (<b><i>less than</i></b>): </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>parser&nbsp;lt&nbsp;parser3</b></span><span style="font-family:Times New Roman; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>gt</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> - number of characters in the first string is greater than that in the second  (<b><i>greater than</i></b>): </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>parser3&nbsp;gt&nbsp;parser&nbsp;
<br>
le</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> - number of characters in the first string is greater than or equal to that in the second (<b><i>less or equal</i></b>)
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>ge</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> - number of characters in the first string is less than or equal to that in the second. (<b><i>greater or equal</i></b>)
<br>

<br>
Here is how it works: if </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>$sections.uri</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> equals</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&nbsp;$request:uri</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> a link shouldn't be placed (and the table cell will have different background color-we should always try to make surfing through our site as comfortable as possible), if not-place the link, then!
<br>

<br>
Another imperfection is that we have columns of varied width. That will do if you don't really care about the way your page looks, but is, frankly speaking, rather clumsy. The problem is quite easy to solve, though: we'll just take the width of the whole menu as 100% and divide it by the number of available sections (the amount of rows in table sections). In this case, we use operator </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>^eval()</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> and the number of rows in our table (we can use object of class </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>table</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> in mathematical expressions-the numerical value of the table will then be the number of its rows). You should also remember that by using backslash instead of forward slash we use integer division.
<br>

<br>
Now, we should stop for a while to pay operator </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>^eval()</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> more attention. This operator allows us to evaluate a mathematical expression without additional variables. We simply write:
<br>

<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>^eval(expression)[format]
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
<i>By using [format] we can specify in what format we expect the result of evaluation. By specifying format as [%d] we get our number without fractional part; [%.2f] returns number with two-figure long fractional part, while [%04d] returns number without fractional part, four-figure long, and-as we put zero in front of "4" while specifying format-the absent figures in the front will be padded with zeros on the left. Sometimes we do need formatted number (For example, 12.44 $ looks more sensible than 12.44373434501 $...).
<br>
</i>
<br>
We are through with our menu-it's now ready.
<br>

<br>
The first building block of our future site is now ready. Let's now proceed to page structure. Each page may be divided into three parts, which are </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>header</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> (upper part of a page), </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>body</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> (main information including our navigation menu) and </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>footer</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> (the lower part of a page). This is a kind of general pattern for most sites.
<br>

<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>Footer</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> will be the same for all pages, </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>header</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> will remain the same in style but with varying content (at least, page titles will vary) and </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>body</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> will always be different but of the same style, common for all pages (for example, it may consist of two information blocks-30% and 70% wide respectively). The menu will be included in </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>body</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> block.
<br>

<br>
Every page will have the following structure:</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000">
<br>
</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
<table border="1" cellpadding="1"><tr><td align="left" valign="top" width="502" colspan="2">
<span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> header
<br>
</span></td></tr><tr><td align="left" valign="top" width="140">
<span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
 navigation
<br>

<br>
 body_additional
<br>
 (30%)
<br>

<br>
</span></td><td align="left" valign="top" width="361">
<span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>

<br>

<br>
 body_main
<br>
 (70%)
<br>
</span></td></tr><tr><td align="left" valign="top" width="502" colspan="2">
<span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> footer
<br>
</span></td></tr></table>
<br>

<br>
Each section will be stored in a separate method (function). Let's see how we do it:
<br>

<br>
To create our </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>footer</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> we add the following piece of code to file </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">:
<br>

<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@footer[]
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&lt;table&nbsp;width="100%"&nbsp;border="0"&nbsp;bgcolor="#000000"&nbsp;cellspacing="0"&gt;
<br>
&nbsp;&nbsp;&nbsp;&lt;tr&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;/td&gt;
<br>
&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
<br>
&lt;/table&gt;
<br>
</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>$now[^</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=datenow.htm>date::now</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>[]]
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&lt;font&nbsp;size="-3"&gt;
<br>
&lt;center&gt;Powered&nbsp;by&nbsp;Parser3&lt;br&nbsp;/&gt;</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>1997-$now.</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=datefields.htm>year</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&lt;/center&gt;
<br>
&lt;/font&gt;
<br>
&lt;/body&gt;
<br>
&lt;/html&gt;</b><b>
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
There is nothing new here, except the piece where we use class </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>date</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">. We create it with constructor </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>now</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> to get the current date and then take the value of field </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>year</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">. If you find it unclear, please get back to our first lesson where we described working with objects by the Example of objects of class </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>table</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">. In the present case, the process is just the same, except that we use another class, which is </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>date</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">.
<br>

<br>
Module </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>header</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> is a little harder to make. On one hand, we must supply each page with unique title. On the other hand, we must stick to the same layout while generating unique content. What should we do? We are going to create, in </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> file, a new function-</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>header</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">, from within which we will call another function-</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>greeting</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">. Function </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>greeting</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">, in its turn, will be defined in every page to provide unique greeting for it.
<br>

<br>
Let's add the following code to file </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">:
<br>

<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@header[]
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&lt;html&gt;
<br>
&lt;head&gt;
<br>
&lt;title&gt;Test&nbsp;</b><b>site&nbsp;in&nbsp;</b><b>Parser3&lt;/title&gt;
<br>
&lt;/head&gt;
<br>
&lt;body&nbsp;bgcolor="#FAEBD7"&gt;
<br>
&lt;table&nbsp;width="100%"&nbsp;border="0"&nbsp;bgcolor="#000000"&nbsp;cellspacing="1"&gt;
<br>
&nbsp;&nbsp;&nbsp;&lt;tr&nbsp;&nbsp;bgcolor="#FFFFFF"&nbsp;height="60"&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;align="center"&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;font&nbsp;size="+2"&gt;&nbsp;&lt;b&gt;</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>^greeting[]</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&lt;/b&gt;&lt;/font&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/td&gt;
<br>
&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
<br>
&lt;/table&gt;
<br>
&lt;br&nbsp;/&gt;</b><b>
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
And now, the sweetest part: Parser allows us to play an amazing trick-we can once and for ever define uniform structure for all pages in </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> and then-by using functions like </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>greeting</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> contained in pages themselves-get unique content for all pages (still sticking to the same layout). How does it work?
<br>

<br>
To the very beginning of file </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p,</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> we will place function </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>@main[]</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">, which will always be automatically executed by Parser in the first place. From within it, we will call functions generating pages' parts.
<br>

<br>
In the beginning of </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> we thus write:</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000">
<br>
</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@main[]
<br>
^header[]
<br>
^body[]
<br>
^footer[]
<br>
</b></span></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
&#133;and provide unique title for a page by defining function </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>greeting</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">, which will be called from function </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>header</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">:
<br>

<br>
&#133;for the main page:</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@greeting[]
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>Welcome!</b></span><span style="font-family:Monospace; font-size:12pt; color:#000000"><b>
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
&#133;and for the guestbook:</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@greeting[]
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>Leave&nbsp;your&nbsp;mark&nbsp;on&nbsp;history...&nbsp;
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
and so on:
<br>

<br>
Now, as a page is loading, Parser will do the following:
<br>

<br>
1. Function </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>main</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> defined in </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> will automatically run first;
<br>
2. It will call function </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>header</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">, which, in its turn, will call function </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>greeting</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">;
<br>
3. As function </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>greeting</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> is defined in the page itself, function </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>header</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> will call this very </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>greeting</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> and not </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>greeting</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> defined in any other page or even in </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> itself (function overriding takes place);
<br>
4. After finishing with </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>greeting</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> and </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>header</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">, the Parser will trigger functions </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>body</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> and </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>footer</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">.
<br>

<br>
As a result, we will get a page having all necessary elements and unique greeting in its upper part. Overridable functions are also referred to as <b>virtual</b>. From within </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">, we call function which may be overridden and may thus vary from page to page. At the same time, we stick to the same structure and our pages remain intact in both logic and style.
<br>

<br>
It remains only to define <b>body</b>. As we have decided, it will consist of two parts to be generated by two separate functions, for instance, </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>body_main</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> and </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>body_additional</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">. Since our navigation menu is logically related to the main part of the page, we call </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>navigation</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> from within </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>body</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> function. In this case, we should also use the mechanism of virtual functions. Thus, we should add to file </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">:</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000">
<br>
</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@body[]
<br>
^navigation[]
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&lt;table&nbsp;width="100%"&nbsp;height="65%"&nbsp;border="0"&nbsp;bgcolor="#000000"&nbsp;cellspacing="1"&gt;
<br>
&nbsp;&nbsp;&nbsp;&lt;tr&nbsp;&nbsp;bgcolor="#ffffff"&nbsp;height="100%"&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;width="30%"&nbsp;valign="top"&nbsp;bgcolor="#EFEFEF"&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;b&gt;</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>^body_additional[]</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&lt;/b&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/td&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;width="70%"&nbsp;valign="top"&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>^body_main[]
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/td&gt;
<br>
&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
<br>
&lt;/table&gt;
<br>
&lt;br&nbsp;/&gt;
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
Functions </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>body_main</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> and </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>body_additional</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> should be defined in our page the same way we did with </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>greeting</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">:
<br>

<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@body_additional[]
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>This&nbsp;is&nbsp;main&nbsp;page</b><b>
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@body_main[]
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>This&nbsp;is&nbsp;main&nbsp;content
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000">
<br>
</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">This text can be placed in </span><span style="font-family:Monospace; font-size:10pt; color:#000000">index.html</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">. Well done! Structure is now ready. We have defined all necessary modules in file </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">, made up uniform structure, and prepared everything to generate pages. We no longer need to write the same HTML code for every page. A common page will now look like the following (the example is given for </span><span style="font-family:Monospace; font-size:10pt; color:#000000">index.html,</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> the main page):</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>
<br>
</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@greeting[]
<br>
</b></span></span><span style="font-family:Monospace; font-size:12pt; color:#000000"><b>Welcome</b></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>!
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@body_additional[]
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>This&nbsp;is&nbsp;main&nbsp;page</b><b>
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@body_main[]
<br>
</b></span></span><span style="font-family:Monospace; font-size:12pt; color:#000000"><b>This&nbsp;is&nbsp;main&nbsp;content
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000">
<br>
</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">Simple and clear, isn't it? Everything is in its place and ready to use. After processing a code like this, Parser will create HTML code with unique title, menu, main information block (sticking to the uniform layout and style), and footer, which will be the same for all pages. In fact, we have made up a site ready to be filled with information. This is how you can make up mini business site in a couple of minutes. This is by no means the only solution, but it perfectly puts everything in its place. Some mental workload put in structuring our site will give back easy support and enhancement. All common features are stored in </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> and the rest-which must be unique for every page-will be stored in pages themselves.
<br>

<br>
You are free to improvise now. If you have to change the layout of your header you will just need to open </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> and change function </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>header</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> once. As you have done it, your every page will have new header design. If we dealt with pure HTML, we would have to rewrite every HTML page manually. This is just the same for all other modules. If you want to change the general layout (for example, to add some block) just add it as a new function and call it from within </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>main</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> in auto.p.
<br>

<br>
Such structure has yet another great advantage: imagine, one of your pages needs footer different from what you usually use (remember-in the beginning, we assumed that footer should be the same for all pages). All you should do is override existing </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>footer</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> by placing new function </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>footer</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> in the page. For example, put this code into </span><span style="font-family:Monospace; font-size:10pt; color:#000000">/contacts/index.html</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">:</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000">
<br>
</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@greeting[]
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>Contact&nbsp;us
<br>
</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>
<br>
@body_additional[]
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>Here&nbsp;are&nbsp;our&nbsp;addresses
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@body_main[]
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>:Page's&nbsp;content:
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@footer[]
<br>
</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>Here&nbsp;are&nbsp;our&nbsp;contacts
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
&#133;and you will change </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>footer</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> on this page for the one we have just given. That means, if Parser finds some function in the page, it will use it as a substitute for the function with the same name given in </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">. If we don't specify footer in the page itself, Parser will use </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>footer</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> declared in </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">.
<br>

<br>
<i>To end with, let us give you some food for thought. We hope it will let you understand Parser better.
<br>

<br>
In our code, we used </i></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>$request:uri</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><i>. It looks different from all we have dealt with so far. What is it, then? It resembles </i></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>$object.property</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><i> (value of an object's field, which we dealt with in</i><i> (</i><i><a href=lesson1.htm>Lesson 1</a></i><i>) </i><i>, but instead of a dot, we use a colon. Actually, this is also a field's value, but this is not an object's field. This is a field of a class </i><i> </i></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b><a href=requestclass.htm>request</a></b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><i>. </i><i>Parser doesn't provide any constructors to create objects of this class. Fields of the class are generated by Parser itself and we can directly access them. In technical terms, it is called </i><b><i>static variable</i></b><i>. There are also static methods, which we will get to know as soon as in the next lesson. Such methods can also be called directly, without first creating an object of the class with the help of a constructor. Remember: static fields and methods always need a colon to be used with them. Thus, when writing </i></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>$class:field</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><i>, we access a field of the class itself, and as we write </i></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>^class:method</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><i>, we call a static method of the class. For example, we can look at class </i></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>math</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><i> which is designed for working with mathematical functions. It has only static methods and variables:
<br>
</i></span><span style="font-family:Times New Roman; font-size:12pt; color:#000000"><i>
<br>
</i></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>$</b><b><a href=mathstats.htm>math:PI</a></b><b>-</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><i>returns </i></span><span style="font-family:Symbol; font-size:10pt; color:#000000"><i>p</i></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><i>. This is a static variable of class </i></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>math</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><i>.
<br>
</i>
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>^</b><b><a href=mathrandom.htm>math:random</a></b><b>(100)-</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><i>returns a pseudorandom number from the range of 0-100. This is a static method of class </i></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>math</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><i>.
<br>
</i><i>
<br>
</i><i>Ways of accessing methods and fields differ only in using dot/colon.
<br>

<br>
</i>Let's sum it up:
<br>

<br>
</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000"><b>What have we done?
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">We have fixed some problems in our navigation menu, which we started building in the previous lesson, and added new blocks: </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>header</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">, </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>footer</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> and </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>body</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> to determine the way our pages will look. Now we have an elegant technique, which can help us make a site to start with in a wink.
<br>

<br>
</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000"><b>What have we learnt?
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">We have learnt code branching, putting results of mathematical calculations into our pages, comparing strings, and getting present URI. We have also learnt new methods of classes </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>table</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> and </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>date</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> and a powerful tool of Parser's virtual functions.
<br>

<br>
</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000"><b>What should we remember?
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">We can place function </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>main</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> in </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">, and it will be run automatically. We can call any function from within another function. All functions to be called from within function </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>main</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> must be declared either in </span><span style="font-family:Monospace; font-size:10pt; color:#000000">auto.p</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> or inside the page. If there are two functions with the same name, the latter overrides the former, which is, in this case, ignored (we call it virtual function).
<br>

<br>
</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000"><b>What's next?
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">There is always a room for perfection. We start with simple things and go further to more complex ones, such as working with forms and databases, which we'll need to make our site genuinely interactive. At the same time, we're going to learn new opportunities provided by Parser for web-developers' easy living.
<br>
</span></span><br>

<!--(later)#include virtual="/docs/comment.html" -->


<hr size=1>
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr valign="top">
<td><font size="1">Copyright &copy; 1997&#150;2011 Art. Lebedev Studio | <a href="http://www.artlebedev.com/" target="_blank">http://www.artlebedev.com</a></font></td>
<td align="right"><font size="1">Last updated: 21.09.2007</font></td>
</tr>
</table>
</body>
</html>
