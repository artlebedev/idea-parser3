<html>
<head>
    
    
    <title>untaint, taint apply-taint. Преобразование данных</title><meta content="text/html; charset=utf-8" http-equiv="Content-Type">

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span class="h1"><b>untaint, taint apply-taint. Преобразование данных
<br />
</b></span>
    </td>
  </tr>
  <tr><td><div class="greenline"></div></td></tr>
</table>
<br />



<span class="mono"><b>^untaint{код}
<br />
^untaint[вид преобразования]{код}
<br />
^taint[текст]
<br />
^taint[вид преобразования][текст]</b><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span><span class="mono"><b>^apply-taint[текст]&nbsp;&nbsp;&nbsp;</b></span><span><b><i>[3.4.1]
<br />
</i></b></span><span class="mono"><b>^apply-taint[вид&nbsp;преобразования][текст]&nbsp;&nbsp;&nbsp;</b></span><span><b><i>[3.4.1]</i></b></span><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span><span>
<br />

<br />
C помощью механизма автоматических</span><span> преобразований</span><span> Parser защищает вашу систему от вторжения извне и «по умолчанию» делает это хорошо. Этот механизм работает даже тогда, когда вы ни разу не написали в вашем коде операторов </span><span class="mono"><b>taint/</b><b>untaint</b></span><span>. </span><span>Когда вы вмешиваетесь в работоспособность этого механизма с помощью данных операторов </span><span>(особенно используя вид преобразования </span><span class="mono"><b>as-is</b></span><span>)</span><span>, вы можете создать уязвимость в вашей системе, поэтому делать это нужно внимательно и обязательно разобравшись как же именно он работает.
<br />

<br />

<br />
Оператор </span><span class="mono"><b>taint</b></span><span> помечает весь переданный ему </span><span class="mono"><b>текст</b></span><span>, как нуждающийся в преобразовании заданного </span><span class="mono"><b>вида</b></span><span>.
<br />
Если вид преобразования не указан, оператор </span><span class="mono"><b>taint</b></span><span> помечает </span><span class="mono"><b>текст</b></span><span> как </span><span class="mono"><b>tainted</b></span><span>  (неопределенно «грязный», без указания вида преобразования). Для помеченного таким образом текста будут применяться такие же правила преобразований как для текста, пришедшего извне (из <a href="formfield.htm">полей формы</a>, из базы данных, из <a href="fileload.htm">файла</a>, из <a href="cookiestats.htm">cookies</a> и т.п.).
<br />

<br />
Оператор </span><span class="mono"><b>untaint</b></span><span> выполняет переданный ему </span><span class="mono"><b>код</b></span><span> и помечает, как нуждающиеся в преобразовании заданного </span><span class="mono"><b>вида</b></span><span>,</span><span> только неопределённо «грязные» части результата выполнения кода (т.е. те, которые не являлись частью кода на Parser, написанного разработчиком в теле документов, а поступили извне или которые были помечены как </span><span class="mono"><b>tainted</b></span><span> с помощью оператора </span><span class="mono"><b>taint</b></span><span> без первого параметра). Он не трогает те части, для которых уже задан конкретный вид преобразования.
<br />
Если вид преобразования не указан, оператор </span><span class="mono"><b>untaint</b></span><span> помечает неопределённо «грязные» части результата выполнения кода как </span><span class="mono"><b>as-is</b></span><span>.
<br />

<br />
Данные операторы лишь делают пометки в тексте о виде преобразования, который Parser-у нужно будет произвести </span><span class="mono"><b>позже</b></span><span>, но не производят его сиюминутно. Сами преобразования Parser выполняет или при выполнении оператора </span><span class="mono"><b>apply-taint</b></span><span> или при выдаче текста в браузер, перед выдачей SQL-серверу, при сохранении в файл, при отправке письма и т.п.
<br />

<br />
Оператор </span><span class="mono"><b>apply-taint</b></span><span> выполняет сиюминутное преобразованию всех фрагментов в строке. Неопределённо «грязные» фрагменты преобразуются в указанный вид преобразования (по умолчанию </span><span class="mono"><b>as-is</b></span><span>)
<br />

<br />

<br />
Для простоты можно представить себе, что вокруг всех букв, пришедших извне написано </span><span class="mono"><span class="monoblue"><b>^taint[</b></span></span><span class="mono"><b>пришедшее&nbsp;извне</b><span class="monoblue"><b>]</b></span></span><span>, а вокруг всех букв, н</span><span>абранных вами в теле страницы </span><span class="mono"><span class="monoblue"><b>^taint[optimized-as-is][</b></span></span><span class="mono"><b>написанное&nbsp;вами</b><span class="monoblue"><b>]</b></span></span><span>.</span><span>
<br />

<br />
В некоторых случаях результаты работы </span><span class="mono"><span class="monoblue"><b>^taint[вид&nbsp;преобразования][</b></span></span><span class="mono"><b>текст</b><span class="monoblue"><b>]</b></span></span><span> и </span><span class="mono"><span class="monoblue"><b>^untaint[вид&nbsp;преобразования]{</b></span></span><span class="mono"><b>текст</b><span class="monoblue"><b>}</b></span></span><span> одинаковые: это происходит тогда, когда весь обрабатываемый текст является н</span><span>еопределённо «грязным» (например </span><span class="mono"><span class="monoblue"><b><a href="formfield.htm">$form:field</a></b></span></span><span>). Однако будьте внимательны: применение к неопределённо «грязному» тексту этих операторов без первого параметра даст совершенно разные результаты, т.к. опущенные значения первого параметра у них различны.
<br />
</span><span class="h1"><b>
<br />
</b><b>
<br />
</b></span><span>Схема автоматического преобразования Parser при выдаче данных в браузер - </span><span class="mono"><b>optimized-html</b></span><span> и в общем виде можно представить весь набираемый разработчиком код следующим образом:
<br />
</span><span class="mono"><span class="monoblue"><b>^untaint[optimized-html]{весь&nbsp;код,&nbsp;набранный&nbsp;разработчиком}
<br />
</b></span></span><span>Это означает что если вы напишите в теле страницы </span><span class="mono"><span class="monoblue"><b>$form:field</b></span></span><span> (без всяких </span><span class="mono"><b>taint/untaint</b></span><span>)</span><span>, то даже если кто-то обратится к ней с параметром «</span><span class="mono"><b>?field=&lt;/html&gt;</b></span><span>», то это не «поломает» страницу из-за досрочно выведенного в неё закрывающего тега </span><span class="mono"><b>&lt;/html&gt;</b></span><span>, т.к. содержимое </span><span class="mono"><span class="monoblue"><b>$form:field</b></span></span><span> неопределённо </span><span>«</span><span>грязное</span><span>» и поэтом</span><span> к нему будет применено автоматическое преобразование </span><span class="mono"><b>optimized-html</b></span><span>, с помощью которого символы &lt; и &gt; будут заменены на &amp;lt; и &amp;gt; соответственно</span><span>.
<br />

<br />
Аналогично работают и другие автоматические преобразования, например если при составлении SQL запроса вы напишите (опять же без использования </span><span class="mono"><b>taint/untaint</b></span><span>):
<br />
</span><span class="mono"><span class="monoblue"><b>^string:sql{</b></span></span><span class="mono"><b>SELECT&nbsp;name&nbsp;FROM&nbsp;table&nbsp;WHERE&nbsp;uid&nbsp;=&nbsp;'</b><span class="monoblue"><b>$form:uid</b></span></span><span class="mono"><b>'</b><span class="monoblue"><b>}</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
</b></span></span><span>то злоумышленник не сможет выполнить SQL injection, передав в качестве параметра например «</span><span class="mono"><b>?uid='&nbsp;OR&nbsp;1=1</b><b>&nbsp;OR&nbsp;'</b></span><span>», т.к. Parser, перед выдачей SQL серверу текста запроса, заэкранирует в пришедшем от пользователя </span><span class="mono"><span class="monoblue"><b>$form:uid</b></span></span><span> одинарные кавычки.
<br />

<br />

<br />
Текст, написанный разработчиком в теле страниц, также подвергается автоматическому преобразованию. В нём Parser выполняет оптимизацию пробельных символов (пробел, табуляция, перевод строки). Идущие подряд перечисленные символы заменяются только одним, который встречается в коде первым. Т.е. если вы напишите в тексте страницы несколько идущих подряд пробельных символов, перед выдачей их в браузер посетителю, от них останется только первый символ. Если в каких-то случаях нужно отключить эту оптимизацию (например для выдачи в </span><span class="mono"><b>&lt;pre/&gt;</b></span><span>), то вы должны сделать это явно, например написав вокруг текста:
<br />

<br />
</span><span class="mono"><b>&lt;pre&gt;
<br />
</b><span class="monoblue"><b>^taint[a</b></span></span><span class="mono"><span class="monoblue"><b>s-is</b></span></span><span class="mono"><span class="monoblue"><b>][</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;Я
<br />
&nbsp;&nbsp;&nbsp;достаю
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;из&nbsp;широких&nbsp;штанин
<br />
&nbsp;&nbsp;дубликатом
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;бесценного&nbsp;груза.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br />
&nbsp;&nbsp;Читайте,
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;завидуйте,
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;я&nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;гражданин
<br />
&nbsp;&nbsp;Советского&nbsp;Союза.
<br />
</b><span class="monoblue"><b>]</b></span></span><span>
<br />
</span><span class="mono"><b>&lt;/pre&gt;
<br />
</b></span><span>
<br />
В данном случае нужно писать именно </span><span class="mono"><b>taint</b></span><span>, а не </span><span class="mono"><b>untaint</b></span><span>, т.к. буквы, написанные в тексте страницы разработчиком, являются «чистыми» и поэтому </span><span class="mono"><b>untaint</b></span><span> не окажет на них никакого влияния.
<br />

<br />

<br />
</span><span class="h1"><b>Пример</b></span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>$clean[</b></span></span><span class="mono"><b>&lt;br&nbsp;/&gt;</b><span class="monoblue"><b>]</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>#&nbsp;</b></span></span><span class="mono"><b>предыдущая&nbsp;запись&nbsp;эквивалентна&nbsp;следующей:</b><span class="monoblue"><b>&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>$clean[^taint[optimized-as-is][</b></span></span><span class="mono"><b>&lt;br&nbsp;/&gt;</b><span class="monoblue"><b>]]
<br />
$tainted[^taint[</b></span></span><span class="mono"><b>&lt;br&nbsp;/&gt;</b><span class="monoblue"><b>]]
<br />

<br />
</b></span></span><span class="mono"><b>Строки</b><span class="monoblue"><b>:&nbsp;^if($clean&nbsp;eq&nbsp;$tainted){</b></span></span><span class="mono"><b>совпадают</b><span class="monoblue"><b>}{</b></span></span><span class="mono"><b>не&nbsp;совпадают</b><span class="monoblue"><b>}</b></span></span><span class="mono"><b>&lt;br&nbsp;/&gt;</b><span class="monoblue"><b>
<br />

<br />
</b></span></span><span class="mono"><b>«Грязные»&nbsp;данные</b><span class="monoblue"><b>&nbsp;-&nbsp;'$tainted'</b></span></span><span class="mono"><b>&lt;br&nbsp;/&gt;</b></span><span>
<br />
</span><span class="mono"><b>«Чистые»&nbsp;данные</b><span class="monoblue"><b>&nbsp;-&nbsp;'$clean</b></span></span><span class="mono"><span class="monoblue"><b>'</b></span></span><span class="mono"><b>&lt;br&nbsp;/&gt;</b><span class="monoblue"><b>
<br />
</b></span></span><span>
<br />
В данном примере видно, что несмотря на то, что сравнение сообщает об эквивалентности строк, при выводе их в браузер результат различен: «чистая» строка выводится без преобразований, а в «грязной» строке символы &lt; и &gt; заменены на &amp;lt; и &amp;gt; соответственно.
<br />

<br />

<br />
</span><span class="h1"><b>Пример</b></span><span>
<br />
</span><span class="mono"><b>Пример&nbsp;на&nbsp;</b><b><a href="stringlit.htm">^^</a></b><b>untaint.&lt;br&nbsp;/&gt;
<br />
&lt;form&gt;
<br />
&lt;input&nbsp;</b><b>type="text"&nbsp;</b><b>name="field"&nbsp;/&gt;
<br />
&lt;input&nbsp;type="submit"&nbsp;/&gt;
<br />
&lt;/form&gt;
<br />

<br />
</b><span class="monoblue"><b>$tainted[$form:field]
<br />
</b></span></span><span class="mono"><b>«Грязные»&nbsp;данные&nbsp;-&nbsp;</b><span class="monoblue"><b>$tainted</b></span></span><span class="mono"><b>&lt;br&nbsp;/&gt;
<br />
«Чистые»&nbsp;данные&nbsp;-&nbsp;</b><span class="monoblue"><b>^untaint{$tainted}</b></span></span><span class="mono"><b>
<br />
</b></span><span>
<br />
В квадратных скобках оператора </span><span class="mono"><b>untaint</b></span><span> задается вид выполняемого преобразования. Здесь мы опускаем квадратные скобки в операторе </span><span class="mono"><b>untaint</b></span><span> и используем значение преобразования по умолчанию </span><span class="mono"><b>[as-is]</b></span><span>.
<br />
Обратите внимание: если оператор </span><span class="mono"><b>untaint</b></span><span> без указания вида преобразования полностью эквивалентен оператору </span><span class="mono"><b>untaint</b></span><span> с указанием вида преобразования </span><span class="mono"><b>as-is</b></span><span>, то для оператора </span><span class="mono"><b>taint</b></span><span> не существует такого вида преобразования, который равнозначен оператору </span><span class="mono"><b>taint</b></span><span> без указания</span><span> оного.
<br />

<br />

<br />
</span><span class="h1"><b>Пример
<br />
</b></span><span class="mono"><b>Пример&nbsp;</b><b><a href="stringlit.htm">^^</a></b><b>taint.&lt;br&nbsp;/&gt;
<br />
</b><span class="monoblue"><b>$town[</b></span></span><span class="mono"><b>Москва</b><span class="monoblue"><b>]
<br />
</b></span></span><span class="mono"><b>&lt;a&nbsp;href="town.html?town=</b><span class="monoblue"><b>^taint[uri][$town]</b></span></span><span class="mono"><b>"&gt;</b><span class="monoblue"><b>$town</b></span></span><span class="mono"><b>&lt;/a&gt;
<br />
</b></span><span>
<br />
В результате данные, хранящиеся в переменной </span><span class="mono"><b>town</b></span><span>, будут преобразованы к типу URI и позже, при выводе в браузер, русские буквы будут заменены на шестнадцатеричные коды символов и представлены в виде </span><span class="mono">%ХХ</span><span>.
<br />

<br />
</span><span class="h1"><b>
<br />
Пример
<br />
</b></span><span class="mono"><b>Вывод&nbsp;данных&nbsp;полученных&nbsp;от&nbsp;пользователя&nbsp;на&nbsp;странице,&nbsp;сохранение&nbsp;их</b><b>
<br />
</b><b>в&nbsp;БД&nbsp;и&nbsp;создание&nbsp;на&nbsp;их&nbsp;основе&nbsp;</b><b>XML</b><b>&lt;br&nbsp;/&gt;</b></span><span>
<br />
</span><span class="mono"><b>Вы&nbsp;указали:&nbsp;'</b><span class="monoblue"><b>$form:field</b></span></span><span class="mono"><b>'
<br />
</b><span class="monoblue"><b>^connect[$SQL.connect-string]{</b></span></span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>^void:sql{</b></span></span><span class="mono"><b>INSERT&nbsp;INTO&nbsp;news&nbsp;SET&nbsp;(body)&nbsp;VALUES&nbsp;('</b><span class="monoblue"><b>$form:field</b></span></span><span class="mono"><b>')</b><span class="monoblue"><b>}</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>}</b></span></span><span class="mono"><b>
<br />
</b><span class="monoblue"><b>$doc[^xdoc::create{</b></span></span><span class="mono"><b>&lt;?xml&nbsp;version="1.0"&nbsp;encoding="WINDOWS-1251"?&gt;
<br />
&lt;root&gt;
<br />
&nbsp;&nbsp;&nbsp;&lt;data&gt;</b><span class="monoblue"><b>$form:field</b></span></span><span class="mono"><b>&lt;/data&gt;
<br />
&lt;/root&gt;
<br />
</b><span class="monoblue"><b>}]</b></span></span><span>
<br />

<br />
В данном случае ни </span><span class="mono"><b>taint</b></span><span> ни </span><span class="mono"><b>untaint</b></span><span> использовать не нужно вовсе, т.к. необходимые преобразования будут сделаны автоматически, причем при выводе в браузер будет сделано преобразование </span><span class="mono"><b>optimized-html</b></span><span>, при выдаче SQL серверу - </span><span class="mono"><b>sql</b></span><span>, а при формировании XML - </span><span class="mono"><b>xml</b></span><span>.
<br />
Обратите внимание на то, что при сохранении данных в БД в административном интерфейсе, также не требуется писать </span><span class="mono"><b>taint/untaint</b></span><span> в SQL запросах</span><span>.
<br />

<br />

<br />
</span><span class="h1"><b>Пример
<br />
</b></span><span class="mono"><b>Выдача&nbsp;даннных&nbsp;(могут&nbsp;содержать&nbsp;теги),&nbsp;пришедших&nbsp;от&nbsp;пользователя&nbsp;или&nbsp;из&nbsp;БД</b><b>
<br />
</b><b>в&nbsp;форму&nbsp;для&nbsp;редактирования&lt;br&nbsp;/&gt;</b><b>
<br />
</b><span class="monoblue"><b>^if(def&nbsp;$form:body){
<br />
&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>$body[</b></span></span><span class="mono"><span class="monoblue"><b>$form:body</b></span></span><span class="mono"><span class="monoblue"><b>]</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
}{
<br />
&nbsp;&nbsp;&nbsp;^connect[$SQL.connect-string]{
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>$body[^string:sql{</b></span></span><span class="mono"><b>SELECT&nbsp;</b><b>body</b><b>&nbsp;FROM&nbsp;news&nbsp;WHERE&nbsp;news_id&nbsp;=&nbsp;</b><span class="monoblue"><b>$id}]
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>&nbsp;&nbsp;&nbsp;}
<br />
}
<br />
</b></span></span><span class="mono"><b>&lt;textarea&gt;</b><span class="monoblue"><b>$body</b></span></span><span class="mono"><b>&lt;/textarea&gt;</b><b>
<br />
</b></span><span>
<br />
В данном </span><span>случае сработает автоматическое преобразование </span><span class="mono"><b>optimized-html</b></span><span>, т.к. данные, пришедшие из БД или от пользователя являются </span><span>«грязными».
<br />
Поэтому встретившиеся в данных теги не «поломают» страницу. </span><span>Имейте в виду, что если в данных есть идущие подряд пробельные символы, то они будут оптимизированы при выдаче в браузер.
<br />
</span><span class="h1"><b>
<br />

<br />
</b><b>Пример</b></span><span>
<br />
</span><span class="mono"><b>Выдача&nbsp;данных&nbsp;с&nbsp;тегами&nbsp;из&nbsp;БД,&nbsp;помещённых&nbsp;туда&nbsp;администратором</b><b>:</b><b>&lt;br&nbsp;/&gt;
<br />
</b><span class="monoblue"><b>^connect[$SQL.connect-string]{
<br />
&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>$body[^string:sql{</b></span></span><span class="mono"><b>SELECT&nbsp;</b><b>body</b><b>&nbsp;FROM&nbsp;news&nbsp;WHERE&nbsp;news_id&nbsp;=&nbsp;</b><span class="monoblue"><b>$id}]
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>}</b></span></span><span class="h1"><b>
<br />
</b></span><span class="mono"><span class="monoblue"><b>^taint[as-is][$body]</b></span></span><span>
<br />
</span><span class="h1"><b>
<br />
</b></span><span>В данном случае необходимо использовать </span><span class="mono"><b>taint</b></span><span> с видом преобразования </span><span class="mono"><b>as-is</b></span><span> (или </span><span class="mono"><b>untaint</b></span><span> с таким же видом преобразования или без указания оного), т.к. требуется, чтобы теги в тексте новости, помещённые туда администратором, были выданы именно как теги и в них не было произведено никаких преобразований. Ни в коем случае нельзя выводить подобным образом данные из БД, помещённые туда от посетителей сайта (например данные гостевых книг, форумов и т.д.).
<br />
</span><span class="h1"><b>
<br />

<br />
</b><b>Пример
<br />
</b></span><span class="mono"><b>Выдача&nbsp;даннных&nbsp;(могут&nbsp;содержать&nbsp;теги),&nbsp;пришедших&nbsp;от&nbsp;пользователя&nbsp;или&nbsp;из&nbsp;БД</b><b>
<br />
</b><b>в&nbsp;форму&nbsp;для&nbsp;редактирования&nbsp;с&nbsp;сохранением&nbsp;пробельных&nbsp;символов&lt;br&nbsp;/&gt;</b><b>
<br />
</b><span class="monoblue"><b>^if(def&nbsp;$form:body){
<br />
&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>$body[</b></span></span><span class="mono"><span class="monoblue"><b>$form:body</b></span></span><span class="mono"><span class="monoblue"><b>]</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
}{
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>^connect[$SQL.connect-string]{
<br />
&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>&nbsp;&nbsp;&nbsp;$body[^string:sql{</b></span></span><span class="mono"><b>SELECT&nbsp;</b><b>body</b><b>&nbsp;FROM&nbsp;news&nbsp;WHERE&nbsp;news_id&nbsp;=&nbsp;</b><span class="monoblue"><b>$id}]
<br />
&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>}</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>}
<br />
</b></span></span><span class="mono"><b>&lt;textarea&gt;</b><span class="monoblue"><b>^taint[html][$</b></span></span><span class="mono"><span class="monoblue"><b>body</b></span></span><span class="mono"><span class="monoblue"><b>]</b></span></span><span class="mono"><b>&lt;/textarea&gt;</b></span><span>
<br />

<br />
В данном случае нужно использовать </span><span class="mono"><b>taint</b></span><span> с видом преобразования </span><span class="mono"><b>html</b></span><span> (или </span><span class="mono"><b>untaint</b></span><span> с таким же видом преобразования)</span><span>, чтобы встретившиеся в данных теги не «поломали» страницу </span><span class="mono"><b>и</b></span><span> чтобы отключить оптимизацию пробельных символов.
<br />

<br />

<br />
Из примеров выше можно заметить, что нам пришлось использовать оператор </span><span class="mono"><b>taint</b></span><span> лишь трижды: один раз для того, чтобы разрешить отображать теги в тексте из БД и помещённом туда администратором, второй раз чтобы отключить оптимизацию пробельных символов и третий раз чтобы выдать ссылку с query string содержащей русские буквы таким образом, чтобы эти буквы были закодированы.
<br />
Во всех остальных случаях мы вообще не использовали ни </span><span class="mono"><b>taint</b></span><span> ни </span><span class="mono"><b>untaint</b></span><span> и Parser сам всё сделал хорошо.
<br />

<br />
Запомните: в подавляющем большинстве случаев использовать данные операторы не нужно!
<br />

<br />

<br />
Как мы уже отметили, в приведённых примерах ни разу не был использован оператор </span><span class="mono"><b>untaint</b></span><span>, поэтому возникает вопрос, для чего он вообще нужен? Я знаю ему буквально пару практических применений.
<br />

<br />
Во первых иногда его использование позволяет уменьшить количество операторов </span><span class="mono"><b>taint</b></span><span> в коде</span><span>, например при выводе данных в форму, содержащую много полей и необходимостью отключить оптимизацию пробельных символов. В этом случае вместо того, чтобы писать </span><span class="mono"><b>^taint[html][...]</b></span><span> вокруг вывода содержимого каждой textarea (как в примере выше), можно написать один раз </span><span class="mono"><b>^untaint[html]{...}</b></span><span> вокруг всей формы.
<br />

<br />

<br />
</span><span class="h1"><b>Пример
<br />
</b></span><span class="mono"><b>Выдача&nbsp;даннных&nbsp;(могут&nbsp;содержать&nbsp;теги),&nbsp;пришедших&nbsp;от&nbsp;пользователя&nbsp;или&nbsp;из&nbsp;БД</b><b>
<br />
</b><b>в&nbsp;большую&nbsp;форму&nbsp;для&nbsp;редактирования&nbsp;с&nbsp;сохранением&nbsp;пробельных&nbsp;символов&lt;br&nbsp;/&gt;</b><b>
<br />
</b><span class="monoblue"><b>^if(def&nbsp;$form:title){
<br />
&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>$data[</b></span></span><span class="mono"><span class="monoblue"><b>$form:fields</b></span></span><span class="mono"><span class="monoblue"><b>]</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
}{
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>^connect[$SQL.connect-string]{
<br />
&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>&nbsp;&nbsp;&nbsp;$data[^table::sql{</b></span></span><span class="mono"><b>SELECT&nbsp;</b><b>title,&nbsp;lead,&nbsp;body</b><b>&nbsp;FROM&nbsp;news&nbsp;WHERE&nbsp;news_id&nbsp;=&nbsp;</b><span class="monoblue"><b>$id}]
<br />
&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>}</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>}
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
^untaint[html]{
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&lt;p&gt;</b><span class="monoblue"><b>
<br />
&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><b>&lt;b&gt;Заголовок:&lt;/b&gt;&lt;br&nbsp;/&gt;</b><span class="monoblue"><b>
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;textarea&nbsp;name="title"&gt;</b><span class="monoblue"><b>$</b></span></span><span class="mono"><span class="monoblue"><b>data.title</b></span></span><span class="mono"><b>&lt;/textarea&gt;
<br />
</b><b>&nbsp;&nbsp;&nbsp;&lt;/p&gt;
<br />
&nbsp;&nbsp;&nbsp;&lt;p&gt;</b><span class="monoblue"><b>
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b><b>&lt;b&gt;Анонс</b><b>:</b><b>&lt;/b&gt;</b><b>&lt;br&nbsp;/&gt;</b></span><span>
<br />
</span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;textarea&nbsp;name="lead"&gt;</b><span class="monoblue"><b>$</b></span></span><span class="mono"><span class="monoblue"><b>data.lead</b></span></span><span class="mono"><b>&lt;/textarea&gt;
<br />
</b><b>&nbsp;&nbsp;&nbsp;&lt;/p&gt;
<br />
&nbsp;&nbsp;&nbsp;&lt;p&gt;</b><span class="monoblue"><b>
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b><b>&lt;b&gt;Текст&nbsp;новости</b><b>:</b><b>&lt;/b&gt;</b><b>&lt;br&nbsp;/&gt;</b></span><span>
<br />
</span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;textarea&nbsp;name="body"&gt;</b><span class="monoblue"><b>$</b></span></span><span class="mono"><span class="monoblue"><b>data.body</b></span></span><span class="mono"><b>&lt;/textarea&gt;</b></span><span>
<br />
</span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&lt;/p&gt;
<br />
</b><span class="monoblue"><b>}</b></span></span><span>
<br />

<br />

<br />
И во вторых - когда нам нужно выдать в браузер xml, а не html (например для ajax, RSS, SOAP и т.п.). В этом случае автоматическое преобразование (</span><span class="mono"><b>optimized-html</b></span><span>) не подходит и вокруг всего кода нужно написать </span><span class="mono"><b>^untaint</b><b>[optimized-xml]{...}</b></span><span> и расслабиться :)
<br />

<br />

<br />

<br />
Преобразование заключается в замене одних символов на другие в соответствии с внутренними таблицами преобразований. Предусмотрены следующие виды преобразований:
<br />
</span><span class="mono"><b>as-is
<br />
file-spec
<br />
http-header
<br />
mail-header
<br />
uri
<br />
sql
<br />
js
<br />
regex&nbsp;&nbsp;&nbsp;</b></span><span><b><i>[3.1.5]</i></b></span><span class="mono"><b>
<br />
xml
<br />
html
<br />

<br />
optimized-as-is</b></span><span>
<br />
</span><span class="mono"><b>optimized-xml
<br />
optimized-html
<br />
</b></span><span>
<br />

<br />
</span><span class="h1"><b>Таблицы преобразований
<br />
</b></span><span><table border="0" cellpadding="1"><tr><td align="left" valign="top" width="126">
<span class="mono"><b>as-is</b><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span></span></td><td align="left" valign="top" width="453">
<span>изменений в тексте не делается
<br />

<br />
</span></td></tr><tr><td align="left" valign="top" width="126">
<span class="mono"><b>file</b><b>-spec</b><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span></span></td><td align="left" valign="top" width="453">
<span>символы <span class="mono">*&nbsp;?&nbsp;'&nbsp;"&nbsp;&lt;&nbsp;&gt;</span><span> 
<br />
преобразуются в "_XX", 
<br />
где XX - код символа в шестнадцатеричной форме
<br />

<br />
</span></span></td></tr><tr><td align="left" valign="top" width="126">
<span class="mono"><b>uri</b><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span></span></td><td align="left" valign="top" width="453">
<span>символы за исключением цифр, строчных и прописных латинских букв, а также следующих символов: <span class="mono">_&nbsp;-&nbsp;.&nbsp;"
<br />
</span><span>преобразуется в %XX где XX - код символа в шестнадцатеричной форме
<br />

<br />
</span></span></td></tr><tr><td align="left" valign="top" width="126">
<span class="mono"><b>http-</b><b>header</b><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span></span></td><td align="left" valign="top" width="453">
<span>то же, что и URI  
<br />

<br />
</span></td></tr><tr><td align="left" valign="top" width="126">
<span class="mono"><b>mail-header</b><b>
<br />
</b></span></td><td align="left" valign="top" width="453">
<span>если известен charset (если неизвестен, не будут работать up/low case), то фрагмент, начиная с первой буквы с восьмым битом и до конца строки, будет представлен в подобном виде:  
<br />
Subject: Re: parser3: =?koi8-r?Q?=D3=C5=CD=C9=CE=C1=D2?=
<br />

<br />
</span></td></tr><tr><td align="left" valign="top" width="126">
<span class="mono"><b>sql</b><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span></span></td><td align="left" valign="top" width="453">
<span>в зависимости от SQL-сервера  
<br />
для Oracle, ODBC и SQLite меняется <span class="mono">'</span><span> на </span><span class="mono">''</span><span>
<br />
для PgSQL делается средствами самого PgSQL
<br />
для MySQL делается средствами самого MySQL
<br />

<br />
для выполнения данного преобразования необходимо чтобы код, в результате работы которого преобразование должно выполниться, находился внутри оператора </span><span class="mono"><span class="monoblue"><b>^connect[]{}.
<br />
</b></span></span><span>
<br />
</span></span></td></tr><tr><td align="left" valign="top" width="126">
<span class="mono"><b>js</b><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span></span></td><td align="left" valign="top" width="453">
<span class="mono">"<span> преобразуется в </span><span class="mono">\"
<br />
'</span><span> преобразуется в  </span><span class="mono">\'&nbsp;</span><span> 
<br />
</span><span class="mono">\</span><span> преобразуется в  </span><span class="mono">\\</span><span>
<br />
</span><span class="mono">символ&nbsp;конца&nbsp;строки</span><span> преобразуется в \n
<br />
</span><span class="mono">символ&nbsp;с&nbsp;кодом&nbsp;0xFF</span><span> предваряется </span><span class="mono">\
<br />
</span><span>
<br />
</span></span></td></tr><tr><td align="left" valign="top" width="126">
<span class="mono"><b>parser-code</b><span>
<br />
</span></span></td><td align="left" valign="top" width="453">
<span><a href="stringlit.htm">служебные символы</a> предваряются символом ^
<br />
</span></td></tr><tr><td align="left" valign="top" width="126">
<span class="mono"><b>regex</b><span>
<br />
</span></span></td><td align="left" valign="top" width="453">
<span>символы
<br />
<span class="mono">\&nbsp;^&nbsp;$&nbsp;.&nbsp;[&nbsp;]&nbsp;|&nbsp;(&nbsp;)&nbsp;?&nbsp;*&nbsp;+&nbsp;{&nbsp;}&nbsp;-</span><span>
<br />
предваряются символом
<br />
</span><span class="mono">\</span><span>
<br />
<b><i>[3.1.5]
<br />
</i></b>
<br />
</span></span></td></tr><tr><td align="left" valign="top" width="126">
<span class="mono"><b>xml</b><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span></span></td><td align="left" valign="top" width="453">
<span class="mono">&amp;<span> преобразуется в &amp;amp;
<br />
</span><span class="mono">&gt;</span><span> преобразуется в &amp;gt;
<br />
</span><span class="mono">&lt;</span><span> преобразуется в &amp;lt;
<br />
</span><span class="mono">"</span><span> преобразуется в &amp;quot;
<br />
</span><span class="mono">'</span><span> преобразуется в &amp;apos;
<br />

<br />
</span></span></td></tr><tr><td align="left" valign="top" width="126">
<span class="mono"><b>html</b>
<br />
</span></td><td align="left" valign="top" width="453">
<span class="mono">&amp;<span> преобразуется в &amp;amp;
<br />
</span><span class="mono">&gt;</span><span> преобразуется в &amp;gt;
<br />
</span><span class="mono">&lt;</span><span> преобразуется в &amp;lt;
<br />
</span><span class="mono">"</span><span> преобразуется в &amp;quot;
<br />
</span><span class="mono">
<br />
</span></span></td></tr><tr><td align="left" valign="top" width="126">
<span class="mono"><b>optimized-as-is</b><span>
<br />
</span><span class="mono"><b>optimized-xml
<br />
</b><b>optimized-html</b></span><span style="font-family:MS Sans Serif; font-size:8pt; color:#000000">
<br />
</span></span></td><td align="left" valign="top" width="453">
<span>дополнительно к заменам выполняется оптимизация по "white spaces" (символы пробела, табуляция, перевода строки). 
<br />

<br />
Идущие подряд перечисленные символы заменяются только одним, который встречается в коде первым
<br />
</span></td></tr></table>
<br />

<br />
Ряд </span><span class="mono"><b>taint</b></span><span> преобразований Parser делает автоматически, так, имена и пути файлов всегда автоматически </span><span class="mono"><b>file-spec</b></span><span> преобразуются, и когда вы пишите…
<br />
</span><span class="mono"><b>
<br />
^</b><b><a href="fileload.htm">file::load</a></b><b>[filename]
<br />
</b></span><span>
<br />
…Parser выполняет…
<br />
</span><span class="mono"><b>
<br />
</b><span class="monoblue"><b>^file::load[^taint[file-spec][filename]]</b></span></span><span class="mono"><b>
<br />
</b></span><span>
<br />
Аналогично, при задании HTTP-заголовков и заголовков писем, происходят </span><span class="mono"><b>http-header</b></span><span> и </span><span class="mono"><b>mail-header</b></span><span> преобразования соответственно. А при DOM-операциях текстовые параметры всех методов автоматически </span><span class="mono"><b>xml</b></span><span> преобразуются.
<br />

<br />

<br />
Также Parser выполняет ряд автоматических </span><span class="mono"><b>untaint</b></span><span> преобразований:
<br />
</span><span class="mono"><b><table border="0" cellpadding="1"><tr><td align="left" valign="top" width="142">
<span><i>вид</i>
<br />
</span></td><td align="left" valign="top" width="534">
<span><i>что преобразуется</i><span class="mono">
<br />
</span></span></td></tr><tr><td align="left" valign="top" width="142">
<span class="mono"><b>sql</b>
<br />
</span></td><td align="left" valign="top" width="534">
<span>тело SQL-запроса
<br />
</span></td></tr><tr><td align="left" valign="top" width="142">
<span class="mono"><b>xml</b>
<br />
</span></td><td align="left" valign="top" width="534">
<span>XML код при создании объекта класса <span class="mono"><b><a href="xdocclass.htm">xdoc</a></b>
<br />
</span></span></td></tr><tr><td align="left" valign="top" width="142">
<span class="mono"><b>optimized-html</b>
<br />
</span></td><td align="left" valign="top" width="534">
<span>результат страницы, отдаваемый в браузер<span class="mono">
<br />
</span></span></td></tr><tr><td align="left" valign="top" width="142">
<span class="mono"><b>regex</b>
<br />
</span></td><td align="left" valign="top" width="534">
<span>шаблоны-регулярные выражения<span class="mono">
<br />
</span></span></td></tr><tr><td align="left" valign="top" width="142">
<span class="mono"><b>parser-code</b>
<br />
</span></td><td align="left" valign="top" width="534">
<span>тело оператора <a href="opprocess.htm">process</a><span class="mono">
<br />
</span></span></td></tr></table>
<br />
</b></span></span><br />




</body>
</html>