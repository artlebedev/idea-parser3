<html>
<head>
    
    
    <title>cache. Сохранение результатов работы кода</title><meta content="text/html; charset=utf-8" http-equiv="Content-Type">

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span class="h1"><b>cache. Сохранение результатов работы кода
<br />
</b></span>
    </td>
  </tr>
  <tr><td><div class="greenline"></div></td></tr>
</table>
<br />



<span class="mono"><b>^cache[файл]
<br />
^cache[файл](число&nbsp;секунд){код}
<br />
^cache[файл](число&nbsp;секунд){код}{обработчик&nbsp;проблем}&nbsp;&nbsp;&nbsp;</b><span><b><i>[3.1.2]</i></b></span><span class="mono"><b>
<br />
^cache[файл][дата&nbsp;устаревания]{код}
<br />
^cache[файл][дата&nbsp;устаревания]{код}{обработчик&nbsp;проблем}&nbsp;&nbsp;&nbsp;</b></span><span><b><i>[3.1.2]
<br />
</i></b></span><span class="mono"><b>^cache[]&nbsp;=&nbsp;дата&nbsp;устаревания&nbsp;&nbsp;&nbsp;</b></span><span><b><i>[3.1.5]</i></b></span><span class="mono"><b>
<br />
</b></span><span>
<br />
Оператор сохраняет строку, которая получится в результате работы кода. При последующих вызовах обычно происходит считывание ранее сохраненного результата, вместо повторного вычисления, что сильно экономит время обработки запроса и снижает нагрузку на ваши сервера.
<br />

<br />
Крайне рекомендуется подключать модули (</span><span class="mono"><b><a href="opuse.htm">^use[…]</a></b></span><span>) изнутри </span><span class="mono"><b>кода</b></span><span> оператора </span><span class="mono"><b>cache</b></span><span>, а не делать это статически (</span><span class="mono"><b><a href="defineclass.htm">@USE</a></b></span><span>).
<br />
По-возможности, работайте с базой данных (</span><span class="mono"><b><a href="opconnect.htm">^connect[…]</a></b></span><span>) также внутри </span><span class="mono"><b>кода</b></span><span> оператора </span><span class="mono"><b>cache</b></span><span> - вы существенно снизите нагрузку на ваш SQL-сервер и повысите производительность ваших сайтов.
<br />

<br />
</span><span class="mono"><b>Файл</b></span><span> - имя файла-кеша. Если такой файл существует и не устарел, то его содержимое выдается клиенту, если не существует - выполняется код, и результат сохраняется в файл с указанным именем.
<br />

<br />
</span><span class="mono"><b>Число&nbsp;секунд</b></span><span> - время хранения результата работы кода в секундах. Если это число равно нулю, то результат не сохраняется, а файл с ранее сохраненным результатом уничтожается.
<br />

<br />
</span><span class="mono"><b>Дата&nbsp;устаревания</b></span><span> - время, до которого хранится результата работы кода. Если она в прошлом, то результат не сохраняется, а файл с предыдущим сохраненным результатом уничтожается.
<br />

<br />
</span><span class="mono"><b>Код</b></span><span> - код, результат которого будет сохранен.
<br />

<br />
</span><span class="mono"><b>Обработчик&nbsp;проблем</b></span><span> - здесь можно обработать проблему, если она возникнет в </span><span class="mono"><b>коде</b></span><span>. В этом отношении оператор похож на </span><span class="mono"><b><a href="optry.htm">try</a></b></span><span>, см. раздел «<a href="exceptions.htm">Обработка ошибок</a>». В отличие от </span><span class="mono"><b>try</b></span><span>, можно задать </span><span class="mono"><b>$exception.handled[cache]</b></span><span> </span><span class="mono"><b>-</b></span><span> это дает указание Parser обработать ошибку особенным образом: достать из </span><span class="mono"><b>файла</b></span><span> ранее сохраненный результат работы </span><span class="mono"><b>кода</b></span><span>, проигнорировав тот факт, что этот результат устарел.</span><span class="mono"><b>
<br />
</b></span><span>
<br />
Для принудительного удаления файла-кеша можно использовать:
<br />
</span><span class="mono"><b>^cache[файл]</b></span><span>
<br />

<br />
Внутри </span><span class="mono"><b>кода</b></span><span> допустимы команды, изменяющие время хранения результата работы кода:
<br />
</span><span class="mono"><b>^cache(число&nbsp;секунд)
<br />
^cache[дата&nbsp;устаревания]
<br />
</b></span><span>Берется минимальное время хранения кода.
<br />

<br />
Текущую дату устаревания можно узнать, вызвав:
<br />
</span><span class="mono"><b>$expire_date[^cache[]]
<br />
</b></span><span>
<br />
</span><span class="h1"><b>Пример
<br />
</b></span><span class="mono"><span class="monoblue"><b>^cache[/data/cache/test1](5){
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;Нажимайте&nbsp;reload,&nbsp;меняется&nbsp;каждые&nbsp;5&nbsp;секунд:&nbsp;</b><span class="monoblue"><b>^</b></span></span><span class="mono"><span class="monoblue"><b><a href="mathrandom.htm">math:random</a></b></span></span><span class="mono"><span class="monoblue"><b>(100)</b></span></span><span class="mono"><b>
<br />
</b><span class="monoblue"><b>}
<br />
</b></span></span><span>
<br />
</span><span class="h1"><b>Изменение времени хранения
<br />
</b></span><span class="mono"><span class="monoblue"><b>^cache[/data/cache/test2](5){
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;по&nbsp;ходу&nbsp;работы&nbsp;вы&nbsp;выяснили,&nbsp;
<br />
&nbsp;&nbsp;&nbsp;что&nbsp;страницу&nbsp;сохранять&nbsp;не&nbsp;нужно:&nbsp;</b><span class="monoblue"><b>^cache(0)
<br />
}</b></span></span><span>
<br />
</span></span><br />




</body>
</html>