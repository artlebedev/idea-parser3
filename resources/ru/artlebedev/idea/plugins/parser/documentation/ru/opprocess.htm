<html>
<head>
    
    
    <title>process. Компиляция и исполнение строки</title><meta content="text/html; charset=utf-8" http-equiv="Content-Type">

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span class="h1"><b>process. Компиляция и исполнение строки
<br />
</b></span>
    </td>
  </tr>
  <tr><td><div class="greenline"></div></td></tr>
</table>
<br />



<span class="mono"><b>^process{строка}
<br />
^process[контекст]{строка}
<br />
^process[контекст]{строка}[опции]&nbsp;&nbsp;&nbsp;</b><span><b><i>[3.1.2]</i></b></span><span class="mono"><b>
<br />
</b></span><span>
<br />
</span><span class="mono"><b>Строка</b></span><span> будет скомпилирована и выполнена как код на Parser, в указанном </span><span class="mono"><b>контексте</b></span><span>, или в текущем контексте.
<br />
В качестве </span><span class="mono"><b>контекста</b></span><span> можно указать <a href="obj.htm">объект</a> или <a href="defineclass.htm">класс</a>, но </span><span class="mono"><b>не&nbsp;метод</b></span><span> (т.е. если вы внутри вашего метода вызовите process, то внутри выполняемого с помощью process кода не будут доступны локальные переменные вызывающего метода).
<br />

<br />
Удобно использовать, если какие-то части кода  или собственные методы необходимо хранить не в файлах </span><span class="mono">.html</span><span>, которые обрабатываются Parser, а в каких-то других, или базе данных.
<br />

<br />
Также можно указать ряд </span><span class="mono"><b>опций</b></span><span> (<a href="hash.htm">хеш</a>):
<br />
<table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><span></span></span><span class="mono"><b></b><font face="Symbol" size="2" color="#000000">&#183;</font><b></b></span></td><td><span class="mono"><b>$.main[</b></span><span>новое имя для метода </span><span class="mono"><b>main</b></span><span>, описанного в коде </span><span class="mono"><b>строки]</b></span><span>
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><span></span><span class="mono"><b></b><font face="Symbol" size="2" color="#000000">&#183;</font><b></b></span></td><td><span class="mono"><b>$.file[</b></span><span>имя файла, из которого взята данная </span><span class="mono"><b>строка]</b></span><span>
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><span></span><span class="mono"><b></b><font face="Symbol" size="2" color="#000000">&#183;</font><b></b></span></td><td><span class="mono"><b>$.lineno(</b></span><span>номер строки в файле, откуда взята данная </span><span class="mono"><b>строка.</b></span><span><i> может быть отрицательным</i></span><span class="mono"><b>)</b></span><span>
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td><span></span></td><td></td></tr></table><span>
<br />
</span><span class="h1"><b>Простые примеры
<br />
</b></span><span class="mono"><span class="monoblue"><b>^process{</b></span></span><span class="mono"><b>@extra[]
<br />
&nbsp;&nbsp;&nbsp;Здоровья&nbsp;прежде&nbsp;всего…
<br />
</b><span class="monoblue"><b>}
<br />
</b></span></span><span>Метод </span><span class="mono"><b>extra</b></span><span> будет добавлен к текущему классу, и его можно будет вызывать в дальнейшем.
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>^process[$engine:</b></span></span><span class="mono"><span class="monoblue"><b><a href="defineclass.htm">CLASS</a></b></span></span><span class="mono"><span class="monoblue"><b>]{</b></span></span><span class="mono"><b>@start[]
<br />
&nbsp;&nbsp;&nbsp;Мотор…
<br />
</b><span class="monoblue"><b>}
<br />
</b></span></span><span>Метод </span><span class="mono"><b>start</b></span><span> будет добавлен к пользовательскому классу </span><span class="mono"><b>engine</b></span><span>.
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>$running_man[^man</b></span></span><span class="mono"><span class="monoblue"><b><a href="obj.htm">::</a></b></span></span><span class="mono"><span class="monoblue"><b>create[Вася]]
<br />
^process[$running_man]{
<br />
&nbsp;&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><b>Имя:&nbsp;</b><span class="monoblue"><b>$name</b></span></span><span class="mono"><b>&lt;br&nbsp;/&gt;</b><span class="monoblue"><b>
<br />
}
<br />
</b></span></span><span>Код будет выполнен в контексте объекта </span><span class="mono"><b>$running_man</b></span><span>, соответственно, может воспользоваться полем </span><span class="mono"><b>name</b></span><span> этого объекта, выдаст «</span><span class="mono"><b>Вася</b></span><span>».
<br />

<br />
</span><span class="h1"><b>Оператор include
<br />
</b></span><span class="mono"><span class="monoblue"><b>@include[filename][file]
<br />
$file[^</b></span></span><span class="mono"><span class="monoblue"><b><a href="fileload.htm">file::load</a></b></span></span><span class="mono"><span class="monoblue"><b>[text;$filename]]
<br />
^process[$</b></span></span><span class="mono"><span class="monoblue"><b><a href="definemethod.htm">caller.self</a></b></span></span><span class="mono"><span class="monoblue"><b>]{^</b></span></span><span class="mono"><span class="monoblue"><b><a href="opuntainttaint.htm">taint</a></b></span></span><span class="mono"><span class="monoblue"><b>[as-is][$file.</b></span></span><span class="mono"><span class="monoblue"><b><a href="filefields.htm">text</a></b></span></span><span class="mono"><span class="monoblue"><b>]}[
<br />
&nbsp;&nbsp;&nbsp;$.file[$filename]
<br />
]
<br />
</b></span></span><span>Код загружает указанный файл и выполняет его в контексте объекта/класса, вызвавшего </span><span class="mono"><b>include</b></span><span>. Опция </span><span class="mono"><b>file</b></span><span> позволяет указать имя файла, откуда был загружен код. Если возникнет ошибка, вы увидите это «имя файла».
<br />
<i>Важно: контекст вызова не включает локальные переменные и параметры вызывающего метода!</i>
<br />

<br />
</span><span class="h1"><b>Сложный пример</b></span><span>
<br />
Часто удобно поместить компилируемый код в некоторый метод с именем, вычисляющимся по ходу работы:
<br />
</span><span class="mono"><span class="monoblue"><b>#&nbsp;это&nbsp;исходный&nbsp;код,&nbsp;обратите&nbsp;внимание,&nbsp;на&nbsp;^^
<br />
$source_code[</b></span></span><span class="mono"><b>2*2=</b><b><a href="stringlit.htm">^^</a></b><b>eval(2*2)</b><span class="monoblue"><b>]
<br />
#&nbsp;по&nbsp;ходу&nbsp;работы&nbsp;выясняется,&nbsp;что&nbsp;необходимо&nbsp;создать&nbsp;метод&nbsp;с&nbsp;именем&nbsp;method1
<br />
$method_name[method1]
<br />
#&nbsp;компилируем&nbsp;исходный&nbsp;код,&nbsp;помещяем&nbsp;его&nbsp;в&nbsp;новый&nbsp;метод
<br />
^process{$source_code}[
<br />
&nbsp;&nbsp;&nbsp;$.main[$method_name]
<br />
]
<br />
…
<br />
#&nbsp;далее&nbsp;по&nbsp;коду&nbsp;можно&nbsp;вызывать&nbsp;метод&nbsp;method1
<br />
^method1[]
<br />
</b></span></span><span>Данный пример будет продолжать работать, даже если в </span><span class="mono"><b>$source_code</b></span><span> будет определен ряд методов, поскольку </span><span class="mono"><b>опция&nbsp;main</b></span><span> задает новое имя методу </span><span class="mono"><b>main</b></span><span>.</span><span class="mono"><span class="monoblue"><b>
<br />
</b></span></span></span><br />




</body>
</html>