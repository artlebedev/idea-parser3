<html>
<head>
    
    
    <title>match. Matching a pattern</title><meta content="text/html; charset=utf-8" http-equiv="Content-Type">

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span class="h1"><b>match. Matching a pattern
<br />
</b></span>
    </td>
  </tr>
  <tr><td><div class="greenline"></div></td></tr>
</table>
<br />



<span class="mono"><b>^string.match[pattern]
<br />
^string.match[pattern][options]
<br />
</b><span>
<br />
The operator searches for a match of a </span><span class="mono"><b>pattern</b></span><span> in a </span><span class="mono"><b>string</b></span><span>. Pattern could be a string with PCRE-Perl-compatible regular expression-or </span><span class="mono"><span class="monoblue"><b><a href="regexclass.htm">regex-object</a></b></span></span><span><b><i> [3.4.0]</i></b>.
<br />
Some examples of PCRE are given in "<a href="app4.htm">Attachment 4: Perl Compatible Regular Expressions</a>". 
<br />

<br />
The following search </span><span class="mono"><b>options</b></span><span> may be used:
<br />

<br />
</span><span class="mono"><b>i</b></span><span>-case-insensitive;
<br />
</span><span class="mono"><b>x</b></span><span>-ignore "white space" characters and allow </span><span class="mono"><b>#comments&nbsp;till&nbsp;the&nbsp;end&nbsp;of&nbsp;the&nbsp;line</b></span><span>;
<br />
</span><span class="mono"><b>s</b></span><span>-regard </span><span class="mono"><b>$</b></span><span> as the end of the whole text (default);
<br />
</span><span class="mono"><b>m</b></span><span>-regard </span><span class="mono"><b>$</b></span><span> as the end of the line, but not the whole text;
<br />
</span><span class="mono"><b>U</b></span><span>-inverts the "greediness" of the quantifiers so that they are not greedy by default, but become greedy if followed by </span><span class="mono"><b>?</b></span><span>;<b><i> [3.3.0]</i></b></span><span class="mono"><b>
<br />
g</b></span><span>-find not only the first, but all occurrences of the pattern;
<br />
</span><span class="mono"><b>n</b></span><span>-return number of matches instead of table with search results;<b><i> [3.2.2]</i></b>
<br />
</span><span class="mono"><b>'</b></span><span>-evaluate values for </span><span class="mono"><b>prematch</b></span><span>, </span><span class="mono"><b>match</b></span><span>, </span><span class="mono"><b>postmatch</b></span><span> columns.
<br />

<br />
Characters </span><span class="mono"><b>^</b></span><span> and </span><span class="mono"><b>$</b></span><span> are used in Parser's syntax, that is why if you want to include them in your pattern, they must be given as </span><span class="mono"><b>^^</b></span><span> and </span><span class="mono"><b>^$</b></span><span> respectively (see also <a href="exprlit.htm">Literals</a>).
<br />

<br />
If option </span><span class="mono"><b>g</b></span><span> is specified, a table with the results of the match will be created with one row per each occurrence. If option </span><span class="mono"><b>g</b></span><span> is </span><span class="mono"><b>not</b></span><span> specified, a table with the results will contain only one record with first occurrence. If substring is not found, the result of operation will be </span><span class="mono"><b>empty&nbsp;</b></span><span>table. If option </span><span class="mono"><b>n</b></span><span> </span><span>is specified, a number of matches will be returned instead of table.
<br />

<br />

<br />
A matches' table (object of class table) contain the next columns </span><span class="mono"><b>1</b></span><span>, </span><span class="mono"><b>2</b></span><span>, &#133;, </span><span class="mono"><b>n</b></span><span>, </span><span class="mono"><b>prematch</b></span><span>, </span><span class="mono"><b>match</b></span><span>, </span><span class="mono"><b>postmatch</b></span><span>, where</span><span>
<br />
</span><span class="mono"><b>prematch</b></span><span> is the column with substring coming from the beginning of the string to the place where the pattern-matching substring was found
<br />
</span><span class="mono"><b>match</b></span><span> is the column with the pattern-matching substring
<br />
</span><span class="mono"><b>postmatch</b></span><span> is the column with the substring that comes after pattern-matching substring and up to the end of the entire string
<br />
</span><span class="mono"><b>1</b></span><span>, </span><span class="mono"><b>2</b></span><span>, </span><span class="mono"><b>&#133;</b></span><span>, </span><span class="mono"><b>n</b></span><span> are the columns with pattern-matching substrings enclosed in round brackets, where </span><span class="mono"><b>n</b></span><span> is number of the left bracket
<br />

<br />
<i>Note 1: values for </i></span><span class="mono"><b>prematch</b></span><span><i>, </i></span><span class="mono"><b>match</b></span><span><i>, </i></span><span class="mono"><b>postmatch</b></span><span> <i>columns are evaluated only if option </i></span><span class="mono"><b>'</b></span><span><i> is specified.
<br />
Note 2: values for </i></span><span class="mono"><b>1</b></span><span>, </span><span class="mono"><b>2</b></span><span>, </span><span class="mono"><b>&#133;</b></span><span>, </span><span class="mono"><b>n</b></span><span><i> are evaluated only if round brackets used in pattern.
<br />
Note 3: you can use (?:...) instead of (...) in pattern if you don't need some parts of matches in table with results
<br />
</i></span><span class="h1"><b>
<br />
</b><b>Examples</b></span><span><u>
<br />
</u></span><span class="mono"><span class="monoblue"><b>$str[</b></span></span><span class="mono"><b>www.parser.ru?user=admin</b><span class="monoblue"><b>]
<br />
^if(^str.match[\?.+]){</b></span></span><span class="mono"><b>match&nbsp;found</b><span class="monoblue"><b>}{</b></span></span><span class="mono"><b>match&nbsp;not&nbsp;found</b><span class="monoblue"><b>}</b></span></span><span class="mono"><b>
<br />
</b></span><span>
<br />
The code will output: </span><span class="mono"><b>match&nbsp;found
<br />
</b></span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>$str[</b></span></span><span class="mono"><b>www.parser.ru?user=admin</b><span class="monoblue"><b>]
<br />
$mtc[^str.match[(\?.+)][']]
<br />
^mtc.save[match.txt]</b></span></span><span class="mono"><b>
<br />
</b></span><span>
<br />
The example will create a file </span><span class="mono">match.txt</span><span>, with the following table:
<br />
</span><span class="mono">
<br />
</span><span><table border="1" cellpadding="1"><tr><td align="left" valign="top" width="123">
<span class="mono"><b>prematch</b>
<br />
</span></td><td align="left" valign="top" width="130">
<span class="mono"><b>match</b>
<br />
</span></td><td align="left" valign="top" width="113">
<span class="mono"><b>postmatch</b>
<br />
</span></td><td align="left" valign="top" width="117">
<span class="mono"><b>1</b>
<br />
</span></td></tr><tr><td align="left" valign="top" width="123">
<span class="mono"><b>www.parser.ru</b>
<br />
</span></td><td align="left" valign="top" width="130">
<span class="mono"><b>?user=admin</b><b>
<br />
</b></span></td><td align="left" valign="top" width="113">
<span class="mono">
<br />
</span></td><td align="left" valign="top" width="117">
<span class="mono"><b>?user=admin</b>
<br />
</span></td></tr></table>
<br />
</span></span><br />




</body>
</html>