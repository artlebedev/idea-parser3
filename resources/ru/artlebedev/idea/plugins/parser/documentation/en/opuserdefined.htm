<html>
<head>
    
    
    <title>User-defined operators</title>

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span><b>User-defined operators
<br />
</b></span>
    </td>
  </tr>
  <tr><td bgcolor="#99D228" height="3"></td></tr>
</table>
<br />



<span>Sometimes it will seem to you that Parser lacks some operators. Parser allows you to define your own operators which could be later used along with system operators.
<br />

<br />
Operators in parser are methods of class <a href="mainclass.htm">MAIN</a>, By adding new methods into this class you extend built-in set of operators.
<br />

<br />
<i>Important notice: while defining an operator you may use not only local variables, but also global ones.</i><span> </span><span><i> By doing so, you will assign and refer to fields of class</i><i> </i><i><a href="mainclass.htm">MAIN</a></i><i>.</i>
<br />

<br />
<a href="opuse.htm">User-defined operators</a> may be defined in separate files without header </span><span><b>@CLASS</b></span><span> and be linked to relevant sections of a site. If you define an operator (e.g. </span><span><b>@</b><b><a href="opprocess.htm">include</a></b><b>[]</b></span><span>) in such a file, every call </span><span><b>^include[]</b></span><span> will be addressed to the user-defined operator.
<br />

<br />
<i>CAUTION: If the name of the operator you define is same as a system operator's, user-defined operator will be called. Using of system operator will then be impossible. We advise you to use as few user-defined operators as possible. Consider using static methods of user-defined classes instead.
<br />
</i>
<br />
Creating classes and using their methods is far more comfortable than employing user-defined operators for the same purpose. For example: there are several sections of the site and each one needs a help section. By creating several files defining different classes, we can get methods of different classes bearing the same name. While calling these methods as static ones, we can clearly see the relation between methods and sections:
<br />

<br />
</span><span><b>^news:help[]
<br />
^forum:help[]
<br />
^search:help[]</b><b>
<br />
</b></span><span>
<br />
</span><span><b>Examples
<br />
</b></span><span>Place the code&#133;
<br />
</span><span><span><b>@default[a;b]
<br />
^if(</b></span></span><span><span><b><a href="exprops.htm">def</a></b></span></span><span><span><b>&nbsp;$a){$a}{$b}
<br />
</b></span></span><span>
<br />
&#133;into file </span><span>operators.p</span><span> in root directory of your website.
<br />

<br />
After you have done it, you can link this module whenever you need <a href="opuse.htm">additional operators</a>. For example, write such a construction in your root </span><span>auto.p</span><span>:
<br />

<br />
</span><span><span><b>@</b></span></span><span><span><b><a href="opuse.htm">USE</a></b></span></span><span><span><b>
<br />
/operators.p
<br />
</b></span></span><span>
<br />
&#133;and you will be able to use construction of type </span><span><span><b>^default[$form:name;</b></span></span><span><b>Anonymous</b><span><b>]</b></span></span><span> not only on any page, but also in any <a href="defineclass.htm">user-defined class</a></span><span>.
<br />
</span><span>
<br />
Details can be found in section <a href="definemethod.htm">Defining methods and user operators</a>.
<br />
</span></span><br />




</body>
</html>