<html>
<head>
    
    
    <title>process. Compiling and processing string</title>

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span><b>process. Compiling and processing string
<br />
</b></span>
    </td>
  </tr>
  <tr><td bgcolor="#99D228" height="3"></td></tr>
</table>
<br />



<span><b>^process{string}
<br />
^process[scope]{string}
<br />
^process[scope]{string}</b><b>[options]</b><b>
<br />
</b><span>
<br />
</span><span><b>String</b></span><span> will be compiled and executed as code in Parser, within specified </span><span><b>scope</b></span><span> or current scope. Specified </span><span><b>scope</b></span><span> can be an <a href="obj.htm">object</a> or a <a href="defineclass.htm">class</a>, but </span><span><b>not&nbsp;method</b></span><span> (this meaning if you process something inside your method, the method`s local varuables will not available inside processed code).
<br />

<br />
This operator is useful when you need to store fragments of code or your own methods in files with extension other than </span><span>.html</span><span>-and which therefore will not be processed by Parser by default-or in a DB.
<br />

<br />
Several </span><span><b>options</b></span><span> (<a href="hash.htm">hash</a>) may be specified:
<br />
<table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><span></span></span><span><b></b><font face="Symbol" size="2" color="#000000">&#183;</font><b></b></span></td><td><span><b>$.main[</b></span><span>a new name for </span><span><b>main</b></span><span> method, declared in code in </span><span><b>string]</b></span><span>
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><span></span><span><b></b><font face="Symbol" size="2" color="#000000">&#183;</font><b></b></span></td><td><span><b>$.file[</b></span><span>a name of file, from which this </span><span><b>string</b></span><span> comes from</span><span><b>]</b></span><span>
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><span></span><span><b></b><font face="Symbol" size="2" color="#000000">&#183;</font><b></b></span></td><td><span><b>$.lineno(</b></span><span>a line number in file, where this </span><span><b>string</b></span><span> cames from</span><span><b>.</b></span><span><i> m</i><i>ay be negative</i></span><span><b>)</b></span><span>
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td><span></span></td><td></td></tr></table><span>
<br />
</span><span><b>Simple examples
<br />
</b></span><span><span><b>^process{</b></span></span><span><b>@extra[]
<br />
&nbsp;&nbsp;&nbsp;</b><b>PS:&nbsp;you&nbsp;look&nbsp;really&nbsp;good&#133;</b></span><span><b>
<br />
</b></span><span><span><b>}
<br />
</b></span></span><span>Method </span><span><b>extra</b></span><span> will be added to the current class and you will be able to call it later on.</span><span>
<br />
</span><span><span><b>
<br />
^process[$engine:</b></span></span><span><span><b><a href="defineclass.htm">CLASS</a></b></span></span><span><span><b>]{</b></span></span><span><b>@start[]
<br />
&nbsp;&nbsp;&nbsp;</b><b>5&#133;&nbsp;4&#133;&nbsp;3&#133;&nbsp;2&#133;&nbsp;1&#133;&nbsp;GO!</b></span><span><b>
<br />
</b></span><span><span><b>}
<br />
</b></span></span><span>Method </span><span><b>start</b></span><span> will be added to user class </span><span><b>engine</b></span><span>.</span><span>
<br />
</span><span><span><b>
<br />
$running_man[^man</b></span></span><span><span><b><a href="obj.htm">::</a></b></span></span><span><span><b>create[Jack]]
<br />
^process[$running_man]{
<br />
&nbsp;&nbsp;&nbsp;&nbsp;</b></span></span><span><b>Name</b><b>:&nbsp;</b><span><b>$name</b></span></span><span><b>&lt;br&nbsp;/&gt;</b><span><b>
<br />
}
<br />
</b></span></span><span>As the code is executed within the scope of object </span><span><b>$running_man</b></span><span>, it is able to use the object's field </span><span><b>name</b></span><span> and output "Jack".</span><span>
<br />
</span><span>
<br />
</span><span><b>Include</b><b> o</b><b>perator
<br />
</b></span><span><span><b>@include[filename][file]
<br />
$file[^</b></span></span><span><span><b><a href="fileload.htm">file::load</a></b></span></span><span><span><b>[text;$filename]]
<br />
^process[$</b></span></span><span><span><b><a href="definemethod.htm">caller.self</a></b></span></span><span><span><b>]{^</b></span></span><span><span><b><a href="opuntainttaint.htm">taint</a></b></span></span><span><span><b>[as-is][$file.</b></span></span><span><span><b><a href="filefields.htm">text</a></b></span></span><span><span><b>]}</b></span></span><span><span><b>[
<br />
</b></span></span><span><span><b>&nbsp;&nbsp;&nbsp;$.file[$filename]
<br />
</b></span></span><span><span><b>]</b></span></span><span><span><b>
<br />
</b></span></span><span>The code loads specified file and executes it within the scope of the current object/class when </span><span><b>include</b></span><span> was called. </span><span><b>File</b></span><span> option allows us to specify the name of file, where this code were loaded from. In case there would be some error, you would see this "file name".
<br />
<i>Note: "scope of current call" does not include any local variables or parameters!
<br />
</i></span><span><b>
<br />
Complex example
<br />
</b></span><span>It is often convinient to compile a code to some method, which name evaluated dynamically:
<br />
</span><span><span><b>#&nbsp;this&nbsp;is&nbsp;source&nbsp;code,&nbsp;note&nbsp;^^
<br />
$source_code[</b></span></span><span><b>2*2=</b><b><a href="stringlit.htm">^^</a></b><b>eval(2*2)</b><span><b>]
<br />
#&nbsp;</b></span></span><span><span><b>it&nbsp;is&nbsp;evaluated&nbsp;dynamically,&nbsp;that&nbsp;we&nbsp;need&nbsp;to&nbsp;create&nbsp;the&nbsp;"method</b></span></span><span><span><b>1</b></span></span><span><span><b>"</b></span></span><span><span><b>&nbsp;</b></span></span><span><span><b>method&nbsp;</b></span></span><span><span><b>
<br />
$method_name[method1]
<br />
#&nbsp;</b></span></span><span><span><b>compiling&nbsp;source&nbsp;code,&nbsp;storing&nbsp;it&nbsp;to&nbsp;new&nbsp;method</b></span></span><span><span><b>
<br />
^process{$source_code}[
<br />
&nbsp;&nbsp;&nbsp;$.main[$method_name]
<br />
]
<br />
&#133;
<br />
#&nbsp;</b></span></span><span><span><b>later&nbsp;in&nbsp;code&nbsp;it&nbsp;can&nbsp;be&nbsp;called</b></span></span><span><span><b>
<br />
^method1[]
<br />
</b></span></span><span>This example would continue to work even if in </span><span><b>$source_code</b></span><span> there would be declared several methods, because </span><span><b>main&nbsp;option</b></span><span> sets the name of </span><span><b>main</b></span><span> method.</span><span><span><b>
<br />
</b></span></span></span><br />




</body>
</html>