<html>
<head>
    
    
    <title>copy. Copying image fragments</title>

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span><b>copy. Copying image fragments
<br />
</b></span>
    </td>
  </tr>
  <tr><td bgcolor="#99D228" height="3"></td></tr>
</table>
<br />



<span><b>^image.copy[source](x1;y1;width1;height1;x2;y2)
<br />
^image.copy[source](x1;y1;width1;height1;x2;y2;width2;height2;color_precision)
<br />
</b><span>
<br />
The method copies a fragment of one image to another. It is very useful in such tasks as placing signs on a map. The method gets the following parameters:
<br />

<br />
1.&nbsp;&nbsp;&nbsp;</span><span><b>Source</b></span><span> image
<br />
2.&nbsp;&nbsp;&nbsp;Coordinates (</span><span><b>X1</b></span><span>;</span><span><b>Y1</b></span><span>) of the left top corner of copied fragment
<br />
3.&nbsp;&nbsp;&nbsp;</span><span><b>Width</b></span><span> and </span><span><b>height</b></span><span> of copied fragment
<br />
4.&nbsp;&nbsp;&nbsp;Coordinates (</span><span><b>X2</b></span><span>;</span><span><b>Y2</b></span><span>) to which copied fragment will be pasted
<br />
5.&nbsp;&nbsp;&nbsp;As optional parameters you can specify new width and height of pasted fragment (in this case the fragment will undergo scaling), and &nbsp;&nbsp;&nbsp;value characterizing precision of color reproduction, The less this value is, the more precise the color reproduction will be, but number of &nbsp;&nbsp;&nbsp;reproduced colors is decreased in this case-and vice versa (default number of colors is 150)
<br />

<br />
</span><span><span><b>$mygif[^image::</b></span></span><span><span><b><a href="imageload.htm">load</a></b></span></span><span><span><b>[test.gif]]
<br />

<br />
$resample_width($mygif.</b></span></span><span><span><b><a href="imagefields.htm">width</a></b></span></span><span><span><b>*2)
<br />
$resample_height($mygif.height*2)
<br />

<br />
$mygif_new[^image::</b></span></span><span><span><b><a href="imagecreate.htm">create</a></b></span></span><span><span><b>($resample_width;$resample_height)]
<br />
^mygif_new.</b></span></span><span><span><b><a href="imagecopy.htm">copy</a></b></span></span><span><span><b>[$mygif](0;0;20;30;0;0;$mygif_new.width;$mygif_new.height)
<br />

<br />
$</b></span></span><span><span><b><a href="responsebody.htm">response:body</a></b></span></span><span><span><b>[^mygif_new.</b></span></span><span><span><b><a href="imagegif.htm">gif</a></b></span></span><span><span><b>[]]</b></span></span><span><b>
<br />
</b></span><span>
<br />
In this example, we create two objects of class </span><span><b>image</b></span><span>. The first is based on existing GIF file; the second, which is twice as big, is generated by Parser itself. After that, we copy into it the fragment of the first file scaled up to the entire width and height of the second image. The last line of the code outputs the scaled fragment. It is advisable to use this approach only to the images, which do not demand high quality.
<br />
</span></span><br />




</body>
</html>