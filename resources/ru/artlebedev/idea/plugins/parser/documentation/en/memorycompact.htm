<html>
<head>
    
    
    <title>compact. Collecting garbage</title>

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span><b>compact. Collecting garbage
<br />
</b></span>
    </td>
  </tr>
  <tr><td bgcolor="#99D228" height="3"></td></tr>
</table>
<br />



<span><b>^memory:compact[]</b><b>
<br />
</b><span>
<br />
This method collects so-called "garbage" in memory, cleaning it up for reuse by your code.
<br />
Garbage is memory no longer used by your code, i.e. to which there are no references in your code.
<br />
</span><span><b>
<br />
</b></span><span>For example:
<br />
</span><span><span><b>
<br />
$table[^table::</b></span></span><span><span><b><a href="tablesql.htm">sql</a></b></span></span><span><span><b>{query}]
<br />
</b></span></span><span><span><b><a href="vars.htm">$table[]</a></b></span></span><span><span><b>
<br />
</b></span></span><span><span><b>#&nbsp;free&nbsp;up&nbsp;memory&nbsp;occupied&nbsp;by&nbsp;SQL-query&nbsp;result
<br />
^memory:compact[]</b></span></span><span><b>
<br />
</b></span><span>
<br />
Parser does not collect garbage automatically leaving decision-making to coder: call </span><span><b>compact</b></span><span> from place(s) where you expect greatest benefit, for example before <a href="xdoctransform.htm">XSL-transformation</a>.
<br />

<br />
</span><span><b><a href="statusmemory.htm">$status:memory</a></b></span><span> will help you fix and find places most favorable for collecting garbage.
<br />

<br />
<i>Important notice: it is necessary to use local variables as intensely as possible and zero out, which you no longer need. All this will help </i></span><span><b><i>compact</i></b></span><span><i> free up more memory.
<br />
</i>
<br />
<i>Important notice: total memory cleaning is not guaranteed.</i><i>
<br />
</i></span></span><br />




</body>
</html>