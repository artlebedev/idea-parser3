<html>
<head>
    
    
    <title>Methods and user-defined operators</title><meta content="text/html; charset=utf-8" http-equiv="Content-Type">

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span class="h1"><b>Methods and user-defined operators
<br />
</b></span>
    </td>
  </tr>
  <tr><td><div class="greenline"></div></td></tr>
</table>
<br />



<span class="mono"><b>@name[parameters]
<br />
body
<br />
</b><span>
<br />
</span><span class="mono"><b>@name[parameters][local;variables]
<br />
body
<br />

<br />
@static:name[parameters]</b></span><span><b><i>&nbsp;&nbsp;&nbsp;[3.4.1]</i></b></span><span class="mono"><b>
<br />
body&nbsp;of&nbsp;class'&nbsp;method&nbsp;which&nbsp;can&nbsp;be&nbsp;only&nbsp;called&nbsp;statically&nbsp;(</b><b><a href="defineclass.htm">more details</a></b><b>)
<br />

<br />
@name[*parameters]</b></span><span><b><i>&nbsp;&nbsp;&nbsp;[3.4.1]</i></b></span><span class="mono"><b>
<br />
method's&nbsp;body&nbsp;which&nbsp;can&nbsp;accept&nbsp;valiable&nbsp;number&nbsp;of&nbsp;parameters
<br />
</b></span><span>
<br />
</span><span class="mono"><b>@name[param1;param2;*parameters]</b></span><span><b><i>&nbsp;&nbsp;&nbsp;[3.4.1]</i></b></span><span class="mono"><b>
<br />
method's&nbsp;body&nbsp;which&nbsp;can&nbsp;accept&nbsp;valiable&nbsp;number&nbsp;of&nbsp;parameters
<br />
</b></span><span>
<br />
Method is a code block, which has name, accepts parameters, and returns result. Names of a method's parameters are separated by semicolon. Method can also have local variables, which should be declared in method's header after declaration of parameters. Names of local variables are also separated by semicolon.
<br />

<br />
Local variables are visible only within the operator or method they belong to and from within the operators or methods they refer to (cf. </span><span class="mono"><b>$caller</b></span><span> described further in the text).
<br />

<br />
While defining a method, you can use not only parameters and local variables but also any other names, thus working with fields of a class or object. This will depend on how you called the method&nbsp;<a href="stats.htm">statically</a>, or <a href="obj.htm">dynamically</a>.
<br />

<br />
In Parser, you can extend core set of <a href="opuserdefined.htm">operators</a>, since methods of class <a href="mainclass.htm">MAIN</a> are considered operators.
<br />
<i>Important notice: operators are methods of class</i><i> </i><i><a href="mainclass.htm">MAIN</a></i><i>,</i><i> but in contrast to other classes' methods, you can call them from any other class by using their name only, i.e. instead of using sophisticated </i></span><span class="mono"><b>^MAIN:include[&#133;]</b></span><span><i>, you can use just </i></span><span class="mono"><b>^include[&#133;]</b></span><span><i>.
<br />
</i></span><span>
<br />
</span><span>Into the methods which can accept valiable number of parameters (such </span><span class="mono"><b>@name[*parameters]</b></span><span>), all </span><span>excessive</span><span> parameters are available as a hash with numeric keys. </span><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span><span>
<br />
Example:</span><span style="font-family:Times New Roman; font-size:12pt; color:#000000"><b>
<br />
</b></span><span class="mono"><span class="monoblue"><b>@main[]&nbsp;
<br />
^call[a;b;c]&nbsp;
<br />

<br />
@call[p;*args][k;v]&nbsp;
<br />
p=$p&nbsp;
<br />
^args.foreach[k;v]{&nbsp;
<br />
&nbsp;&nbsp;&nbsp;$k=$v&nbsp;
<br />
}[^#0A]&nbsp;</b></span></span><span style="font-family:Times New Roman; font-size:12pt; color:#000000"><i>
<br />

<br />
</i></span><span>Outputs: </span><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span><span class="mono"><b>p=a&nbsp;
<br />
0=b&nbsp;
<br />
1=c&nbsp;</b></span><span style="font-family:Times New Roman; font-size:12pt; color:#000000"><i>
<br />
</i>
<br />
</span><span><i>
<br />
</i></span><span class="h1"><b>System variable: </b><b>self
<br />
</b></span><span>All methods and operators have a local variable </span><span class="mono"><b>self</b></span><span>. It contains reference to the current object; in static methods, its content is the same is that of </span><span class="mono"><b>$CLASS</b></span><span>.
<br />

<br />
Example: </span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>@main[]&nbsp;&nbsp;
<br />
$a[</b></span></span><span class="mono"><b>Static&nbsp;field</b><span class="monoblue"><b>&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>^$a</b></span></span><span class="mono"><b>&nbsp;</b><b>of&nbsp;class</b><b>&nbsp;MAIN</b><span class="monoblue"><b>]
<br />
^test[</b></span></span><span class="mono"><b>Method's&nbsp;parameter</b><span class="monoblue"><b>]
<br />

<br />
@test[a]&nbsp;&nbsp;
<br />
^$a</b></span></span><span class="mono"><b>&nbsp;-&nbsp;</b><span class="monoblue"><b>$a</b></span></span><span class="mono"><b>&nbsp;&nbsp;&lt;br&nbsp;/&gt;&nbsp;&nbsp;
<br />
</b><span class="monoblue"><b>^$self.a</b></span></span><span class="mono"><b>&nbsp;-&nbsp;</b><span class="monoblue"><b>$self.a&nbsp;&nbsp;
<br />
</b></span></span><span>&nbsp;&nbsp;&nbsp;
<br />
</span><span>The code will output:
<br />

<br />
</span><span class="mono"><b>$a</b><b>&nbsp;-&nbsp;</b><b>Method's&nbsp;parameter</b><b>&nbsp;
<br />
</b><b>$self.a</b><b>&nbsp;-&nbsp;</b><b>Static&nbsp;field&nbsp;$a&nbsp;of&nbsp;class&nbsp;MAIN
<br />
</b></span><span class="h1"><b>
<br />
System variable: result
<br />
</b></span><span>All methods and operators have a local variable </span><span class="mono"><b>result</b></span><span>. If any value is assigned to it, it will be considered the result of the method's work. The value of </span><span class="mono"><b>result</b></span><span> can be read and used in calculations.
<br />

<br />
Example:
<br />
</span><span class="mono"><span class="monoblue"><b>@</b></span></span><span class="mono"><span class="monoblue"><b><a href="mainclass.htm">main</a></b></span></span><span class="mono"><span class="monoblue"><b>[]
<br />
$a(2)
<br />
$b(3)
<br />
$summa[^sum[$a;$b]]
<br />
$summa
<br />

<br />
@sum[a;b]
<br />
^eval($a+$b)
<br />
$result[</b></span></span><span class="mono"><b>I&nbsp;won't&nbsp;say&nbsp;anything</b><b>!</b><span class="monoblue"><b>]
<br />
</b></span></span><span>
<br />
</span><span class="h1">I</span><span>n this case, the client will receive a string </span><span class="mono"><b>I&nbsp;won't&nbsp;say&nbsp;anything!</b></span><span>, but not the result of addition of the two numbers.
<br />

<br />
</span><span class="h1"><b>System variable: result</b><b>, explicit declaration</b><b>&nbsp;&nbsp;&nbsp;</b></span><span><b><i>[3.1.5]</i></b><b><i>
<br />
</i></b>If </span><span class="mono"><b>result</b></span><span> variable is explicitly declared, this means to Parser that it should ignore all whitespace characters in method code and perceive as error any non-whitespace characrers, if those characters are not explicitly assigned to </span><span class="mono"><b>result</b></span><span> variable.</span><span class="h1"><b>
<br />
</b></span><span>
<br />
Example:
<br />
</span><span class="mono"><span class="monoblue"><b>@lookup[table;findcol;resultcol;</b></span></span><span class="mono"><span class="monoblue"><b>findvalue;</b></span></span><span class="mono"><span class="monoblue"><b>notfound]</b></span></span><span class="mono"><span class="monoblue"><b>[result]</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
^if</b></span></span><span class="mono"><span class="monoblue"><b>(^</b></span></span><span class="mono"><span class="monoblue"><b><a href="tableclass.htm">table</a></b></span></span><span class="mono"><span class="monoblue"><b>.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablelocate.htm">locate</a></b></span></span><span class="mono"><span class="monoblue"><b>[$</b></span></span><span class="mono"><span class="monoblue"><b>findcol</b></span></span><span class="mono"><span class="monoblue"><b>;$findvalue]){
<br />
&nbsp;&nbsp;&nbsp;$table.$</b></span></span><span class="mono"><span class="monoblue"><b>resultcol</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
}{
<br />
&nbsp;&nbsp;&nbsp;$</b></span></span><span class="mono"><span class="monoblue"><b>notfound</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
}
<br />
</b></span></span><span>
<br />
</span><span class="h1">I</span><span>n this case, the client will receive either a value from </span><span class="mono"><b>$resultcol</b></span><span> column or </span><span class="mono"><b>$notfound</b></span><span> value.
<br />
What important is there would be <b>no</b> whitespace characters returned (no line breaks, tabs or spaces).
<br />

<br />
</span><span class="h1"><b>System variable</b><b>: caller
<br />
</b></span><span>All methods and operators have local variable </span><span class="mono"><b>caller</b></span><span>, which stores the method's or operator's "scope of the call".
<br />

<br />
You can use it:
<br />
<table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="25"><span></span></span><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span></span><span>to find out who called the method or operator. In this case you will need to use </span><span class="mono"><b>$caller.self</b></span><span>;
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="25"><span></span><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span></span><span>refer to-</span><span class="mono"><b>$caller.variable_name_to_refer</b></span><span>-or assign </span><span class="mono"><b>$caller.variable_name_to_assign[value]</b></span><span>-a variable as if you were in the place where the defined method or operator was called from.
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td><span></span></td><td></td></tr></table><span>
<br />
For example, you need an operator which would be like system </span><span class="mono"><b>for</b></span><span>, yet somewhat different from it. You can create it by yourself, using an opportunity to change local variable with name sent to you within </span><span class="mono"><b>the&nbsp;scope&nbsp;of&nbsp;the&nbsp;call&nbsp;of&nbsp;your&nbsp;operator:</b></span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>
<br />
@steppedfor[name;from;to;step;code]
<br />
$caller.$name($from)
<br />
^</b></span></span><span class="mono"><span class="monoblue"><b><a href="opwhile.htm">while</a></b></span></span><span class="mono"><span class="monoblue"><b>($caller.$name&lt;=$to){
<br />
&nbsp;&nbsp;&nbsp;$code
<br />
&nbsp;&nbsp;&nbsp;^caller.$name.</b></span></span><span class="mono"><span class="monoblue"><b><a href="intdoubleincetc.htm">inc</a></b></span></span><span class="mono"><span class="monoblue"><b>($step)
<br />
}
<br />
</b></span></span><span>
<br />
Now the call&#133;</span><span class="h1">
<br />
</span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>@somewhere[][i]
<br />
^steppedfor[i](1;10;2){$i&nbsp;}
<br />
</b></span></span><span>
<br />
&#133;will output "</span><span class="mono"><b>1&nbsp;3&nbsp;5&nbsp;7&nbsp;9&nbsp;</b></span><span>". Note: </span><span class="mono"><b>it&nbsp;is&nbsp;the&nbsp;local&nbsp;variable&nbsp;of&nbsp;method&nbsp;</b><b>somewhere</b><b>&nbsp;that&nbsp;is&nbsp;changed.</b></span><span class="h1">
<br />
</span><span>
<br />
<i>Notice: You may need the opportunity to find out the scope of the call to specify the scope of code's compilation (cf. </i><i>"</i><i><a href="opprocess.htm">Process. Compiling and processing string</a></i><i>".
<br />

<br />
</i></span><span class="h1"><b>System variable: locals</b><b>, explicit declaration</b><b>&nbsp;&nbsp;&nbsp;</b></span><span><b><i>[3.3.0]
<br />
</i></b>If </span><span class="mono"><b>locals</b></span><span> variable is explicitly declared, this means to Parser that all variables used in the method are declarated locally.
<br />
To access object or class variables you should use self or CLASS prefixes.
<br />
</span><span class="mono"><b><i>
<br />
</i></b></span></span><br />




</body>
</html>