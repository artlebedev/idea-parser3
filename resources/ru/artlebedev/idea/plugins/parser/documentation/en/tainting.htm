<html>
<head>
    
    
    <title>External and internal data</title>

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span><b>External and internal data
<br />
</b></span>
    </td>
  </tr>
  <tr><td bgcolor="#99D228" height="3"></td></tr>
</table>
<br />



<span>While creating a script in Parser, we deal with two main types of data. One of them is part of code. The other is incoming data received from HTML-forms, environment variables, files, and SQL-servers. Part of code is not to be proofed. Yet, when the data is received from a form filled in by a visitor, for example, it is potentially dangerous to output it <span><b>as-is</b></span><span>. Thus, we need to transform such data according to certain rules. The lion's share of such transformations is performed by Parser automatically, on its own. For example, if Parser must output data received from an HTML-form field, characters </span><span><b>&lt;</b></span><span> and </span><span><b>&gt;</b></span><span> contained in the input will be automatically substituted by </span><span><b>&amp;lt;</b></span><span> and </span><span><b>&amp;gt;</b></span><span> respectively. Yet, sometimes we will need to allow outputting this type of data to be output </span><span><b>as-is</b></span><span>, without any transformation.
<br />

<br />
The code created personally by the coder is regarded </span><span><b>clean</b></span><span>. All incoming data is considered </span><span><b>tainted</b></span><span>.
<br />

<br />
</span><span><span><b>Parser</b></span></span><span> </span><span><span><b>code</b></span></span><span>-code is created personally by the coder and is therefore not to be proofed;
<br />

<br />
</span><span><span><b>$</b></span></span><span><span><b><a href="formclass.htm">form</a></b></span></span><span><span><b>:</b></span></span><span><span><b><a href="formfield.htm">field</a></b></span></span><span>-outputs data sent by user through HTML-form;
<br />

<br />
</span><span><span><b>$my_table[^</b></span></span><span><span><b><a href="tableclass.htm">table</a></b></span></span><span><span><b>::</b></span></span><span><span><b><a href="tablesql.htm">sql</a></b></span></span><span><span><b>{</b></span></span><span><b>sql-</b><b>query</b><span><b>}]</b></span></span><span>-data is retrieved from DB.
<br />

<br />
As for </span><span><b>$form:field</b></span><span>, </span><span><b>tainted</b></span><span> data received from a form field will be automatically transformed and some characters will be substituted according to the built-in table of replacements. After this, they will be regarded as </span><span><b>clean</b></span><span>, not </span><span><b>tainted</b></span><span>. In other words, they will implicitly undergo operation </span><span><b>untaint</b></span><span>. Automatic transformation will be employed at the moment the data is output. Thus, a data retrieved from an DB and assigned to </span><span><b>$my_table</b></span><span> will be transformed when this data is output (sent to browser, saved to file or DB).
<br />

<br />
Besides, there may be a situation when the data should be either not transformed at all or transformed according to rules different from those used by default. For example, we allow a visitor to use HTML tags in the input, for example, for additional text formatting. Yet, since it is potentially dangerous (for example, a JavaScript submitted by user to guestbook may redirect other visitors' browsers to another site), Parser will by itself make replacement of "undesirable" characters according to predefined rules. This problem can be solved by using operator </span><span><b><a href="opuntainttaint.htm">untaint</a></b></span><span>.
<br />
</span></span><br />




</body>
</html>