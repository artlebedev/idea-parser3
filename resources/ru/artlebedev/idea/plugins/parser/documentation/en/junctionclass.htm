<html>
<head>
    
    
    <title>Junction class</title><meta content="text/html; charset=utf-8" http-equiv="Content-Type">

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span class="h1"><b>Junction class
<br />
</b></span>
    </td>
  </tr>
  <tr><td><div class="greenline"></div></td></tr>
</table>
<br />



<span>This class is designed for storing <b><a href="vars.htm">code</a></b> and <b>scope</b> of its execution.
<br />
While referring to variables containing <span class="mono"><b>junction</b></span><span>, Parser executes <b>code</b> within the stored <b>scope</b>.
<br />

<br />
Value of type </span><span class="mono"><b>junction</b></span><span> appears in variable:
<br />

<br />
&#133;when it is assigned a code:
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>$junction{</b></span></span><span class="mono"><b>Code&nbsp;to&nbsp;be&nbsp;assigned&nbsp;to&nbsp;variable:&nbsp;</b><span class="monoblue"><b>^do_something[]}
<br />
</b></span></span><span>
<br />
&#133;when passing code as parameter:
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>@somewhere[]
<br />
^method{</b></span></span><span class="mono"><b>Code&nbsp;passed&nbsp;as&nbsp;parameter</b><b>:&nbsp;</b><span class="monoblue"><b>^do_something_else[]}
<br />
&#133;
<br />
@method[parameter]
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>#in&nbsp;this&nbsp;case&nbsp;junction&nbsp;will&nbsp;be&nbsp;passed&nbsp;into&nbsp;$parameter
<br />
</b></span></span><span>
<br />
&#133;while referring to the name of a class method:
<br />
</span><span class="mono"><span class="monoblue"><b>$action[</b></span></span><span class="mono"><span class="monoblue"><b>$</b></span></span><span class="mono"><span class="monoblue"><b><a href="defineclass.htm">user</a></b></span></span><span class="mono"><span class="monoblue"><b>:</b></span></span><span class="mono"><span class="monoblue"><b>edit</b></span></span><span class="mono"><span class="monoblue"><b>]
<br />
#$action[</b></span></span><span class="mono"><span class="monoblue"><b>$</b></span></span><span class="mono"><span class="monoblue"><b>user:delete]
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>^action[parameter]
<br />
</b></span></span><span>
<br />
In this case, </span><span class="mono"><b>$action</b></span><span> contains reference to the method and its class. Calling </span><span class="mono"><b>action</b></span><span> is then identical to calling </span><span class="mono"><b>^</b><b>edit[parameter]</b></span><span>.
<br />

<br />
&#133;when referring to the name of an object method:
<br />
</span><span class="mono"><span class="monoblue"><b>
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>$action[$person.show_info]
<br />
^action[full]
<br />
</b></span></span><span>
<br />
In this case, </span><span class="mono"><b>$action</b></span><span> contains reference to the method and its object. Calling action is then identical to calling </span><span class="mono"><b>^person.show_info[parameters]</b></span><span>.
<br />

<br />

<br />
</span><span class="mono"><span class="monoblue"><b>@check_if_old_enough[age;order_alcohol]
<br />
^myif($age&lt;21&nbsp;&amp;&amp;&nbsp;!$order_alcohol){
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&nbsp;Sorry,&nbsp;but&nbsp;we&nbsp;cannot&nbsp;sell&nbsp;strong&nbsp;drinks&nbsp;to</b><span class="monoblue"><b>&nbsp;${age}</b></span></span><span class="mono"><b>-year-olds.
<br />
</b><span class="monoblue"><b>}
<br />
</b></span></span><span class="h1"><b>
<br />
Example of using junction of expressions and code
<br />
</b></span><span class="mono"><span class="monoblue"><b>@myif[condition;action][age]
<br />
$age(11)
<br />
^if($condition){
<br />
&nbsp;&nbsp;&nbsp;&nbsp;$action
<br />
}
<br />
</b></span></span><span>
<br />
Note<i>: </i><i><a href="params.htm">parameter</a></i><i> </i>with expression is code calculating the expression. It is executed-i.e. expression is calculated-every time the parameter is referred to within the call.
<br />

<br />
In this case, operator </span><span class="mono"><b>myif</b></span><span> receives code which-along with everything else-outputs </span><span class="mono"><b>$age</b></span><span>. Operator performs check and executes code within the stored </span><span class="mono"><b>scope</b></span><span> (</span><span class="mono"><b>$condition</b></span><span> and </span><span class="mono"><b>$action</b></span><span>). Therefore, what is to be checked and what is to be output will not depend on whether local variable </span><span class="mono"><b>age</b></span><span> exists or what its value is.
<br />
</span><span><b><i>
<br />
</i></b></span><span class="h1"><b>Example of checking if method exists</b></span><span><b><i>
<br />
</i></b></span><span class="mono"><span class="monoblue"><b>^if($some_method&nbsp;is&nbsp;junction){
<br />
&nbsp;&nbsp;&nbsp;&nbsp;^some_method[parameter]
<br />
}{
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&nbsp;no&nbsp;method
<br />
</b><span class="monoblue"><b>}
<br />
</b></span></span><span>
<br />
Method </span><span class="mono"><b>some_method</b></span><span>, will be called only if it is defined.
<br />
</span></span><br />




</body>
</html>