<html>
<head>
    
    
    <title>is. Checking type</title><meta content="text/html; charset=utf-8" http-equiv="Content-Type">

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span class="h1"><b>is. Checking type
<br />
</b></span>
    </td>
  </tr>
  <tr><td><div class="greenline"></div></td></tr>
</table>
<br />



<span class="mono"><b>object&nbsp;is&nbsp;type
<br />
</b><span>
<br />
The operator checks if left operand is an object of specified type and returns Boolean value (true/false). It is handy to use the operator in cases when a variable may contain a single value or a set of values (hash), as well as to check if a method is defined.
<br />

<br />
</span><span class="mono"><b>type</b></span><span>-name of type. It may be a system name  (</span><span class="mono"><b><a href="hashclass.htm">hash</a></b></span><span>, </span><span class="mono"><b><a href="junctionclass.htm">junction</a></b></span><span>, &#133;), or name of  <a href="defineclass.htm">user-defined</a> class.
<br />

<br />
</span><span class="h1"><b>Simple type check</b></span><span style="font-family:Arial; font-size:13pt; color:#000000"><b>
<br />
</b></span><span class="mono"><span class="monoblue"><b>@</b></span></span><span class="mono"><span class="monoblue"><b><a href="mainclass.htm">main</a></b></span></span><span class="mono"><span class="monoblue"><b>[]
<br />
$date[</b></span></span><span class="mono"><b>1999-10-10</b><span class="monoblue"><b>]
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>#$date[^</b></span></span><span class="mono"><span class="monoblue"><b><a href="datenow.htm">date::now</a></b></span></span><span class="mono"><span class="monoblue"><b>[]]
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>^if($date&nbsp;is&nbsp;string){
<br />
&nbsp;&nbsp;&nbsp;&nbsp;^parse[$date]
<br />
}{
<br />
&nbsp;&nbsp;&nbsp;&nbsp;^print_date[$date.</b></span></span><span class="mono"><span class="monoblue"><b><a href="datefields.htm">year</a></b></span></span><span class="mono"><span class="monoblue"><b>;$date.month;$date.day]
<br />
}
<br />

<br />
@parse[date_string][date_parts]
<br />
$date_parts[^date_string.</b></span></span><span class="mono"><span class="monoblue"><b><a href="stringmatch.htm">match</a></b></span></span><span class="mono"><span class="monoblue"><b>[(\d{4})-(\d{2})-(\d{2})][]]
<br />
^print_date[$date_parts.</b></span></span><span class="mono"><span class="monoblue"><b><a href="stringmatch.htm">1</a></b></span></span><span class="mono"><span class="monoblue"><b>;$date_parts.2;$date_parts.3]
<br />

<br />
@print_date[year;month;day]
<br />
</b></span></span><span class="mono"><b>Working&nbsp;with&nbsp;date</b><b>:&lt;br&nbsp;/&gt;
<br />
</b><b>Day</b><b>:&nbsp;</b><b>&nbsp;</b><b>&nbsp;</b><span class="monoblue"><b>$day</b></span></span><span class="mono"><b>&lt;br&nbsp;/&gt;
<br />
</b><b>Month</b><b>:&nbsp;</b><span class="monoblue"><b>$month</b></span></span><span class="mono"><b>&lt;br&nbsp;/&gt;
<br />
</b><b>Year</b><b>:&nbsp;&nbsp;</b><span class="monoblue"><b>$year</b></span></span><span class="mono"><b>&lt;br&nbsp;/&gt;
<br />
</b></span><span>
<br />
This example will check the type of variable </span><span class="mono"><b>$date</b></span><span> and will either perform syntactical analysis or pass to method </span><span class="mono"><b>print_date</b></span><span> the fields of </span><span class="mono"><b>$date</b></span><span> (if type is </span><span class="mono"><b>object</b></span><span> of class </span><span class="mono"><b>date</b></span><span>).</span><span class="h1">
<br />
</span><span>
<br />
</span><span class="h1"><b>Checking if </b><b><a href="definemethod.htm">method</a></b><b> is defined
<br />
</b></span><span>The value of </span><span class="mono"><b>$method_name</b></span><span> is also </span><span class="mono"><b><a href="junctionclass.htm">junction</a></b></span><span>, that is why we should also use </span><span class="mono"><b>is</b></span><span> and not </span><span class="mono"><b><a href="opdef.htm">def</a></b></span><span> in this case.
<br />
</span><span class="mono"><span class="monoblue"><b>@body[]
<br />
</b></span></span><span class="mono"><b>body
<br />
</b><span class="monoblue"><b>
<br />
@</b></span></span><span class="mono"><span class="monoblue"><b><a href="mainclass.htm">main</a></b></span></span><span class="mono"><span class="monoblue"><b>[]
<br />
</b></span></span><span class="mono"><b>Start
<br />
</b><span class="monoblue"><b>^if($body&nbsp;is&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b><a href="junctionclass.htm">junction</a></b></span></span><span class="mono"><span class="monoblue"><b>){
<br />
&nbsp;&nbsp;&nbsp;^body[]
<br />
}{
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;</b><b>Method&nbsp;"body"&nbsp;is&nbsp;not&nbsp;defined!
<br />
</b><span class="monoblue"><b>}
<br />
</b></span></span><span class="mono"><b>Finish
<br />
</b><b>
<br />
</b></span><span>Note: using operator </span><span class="mono"><b>is</b></span><span> you can't check variables which contains </span><span class="mono"><b><a href="vars.htm">code</a></b></span><span> because of any address to such variables execute the code.
<br />
</span></span><br />




</body>
</html>