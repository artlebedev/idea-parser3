/* The following code was generated by JFlex 1.4.3 on 4/3/11 6:04 PM */

package ru.artlebedev.idea.plugins.parser.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/3/11 6:04 PM from the specification file
 * <tt>src/ru/artlebedev/idea/plugins/parser/lexer/ParserLexer.flex</tt>
 */
public class _ParserLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LINE_COMMENT = 20;
  public static final int C_COMMENT_END = 16;
  public static final int ATTRIBUTE_VALUE_SQ = 12;
  public static final int DOC_TYPE = 2;
  public static final int ATTRIBUTE_VALUE_DQ = 10;
  public static final int YYINITIAL = 0;
  public static final int PARSERDOC = 18;
  public static final int TAG_ATTRIBUTES = 6;
  public static final int COMMENT = 4;
  public static final int ATTRIBUTE_VALUE_START = 8;
  public static final int C_COMMENT_START = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\67\1\4\1\103\1\5\1\3\22\0\1\67\1\31\1\22"+
    "\1\10\1\106\1\113\1\66\1\23\1\63\1\64\1\112\1\14\1\74"+
    "\1\7\1\12\1\77\1\1\11\1\1\25\1\107\1\30\1\100\1\62"+
    "\1\26\1\101\1\104\1\56\1\36\1\32\1\21\1\17\1\20\1\46"+
    "\1\60\2\20\1\52\1\50\1\105\1\34\1\44\2\20\1\102\1\40"+
    "\1\54\3\20\1\42\1\20\1\75\1\115\1\76\1\15\1\6\1\0"+
    "\1\70\1\57\1\37\1\33\1\13\1\2\1\117\1\47\1\61\2\11"+
    "\1\53\1\51\1\72\1\35\1\45\1\116\1\71\1\73\1\41\1\55"+
    "\1\11\1\111\1\11\1\43\1\11\1\110\1\65\1\16\1\114\6\0"+
    "\1\103\44\0\1\24\12\0\1\24\4\0\1\24\5\0\27\24\1\0"+
    "\1\27\17\24\1\27\1\24\15\27\1\26\u013f\27\31\26\162\27\4\26"+
    "\14\27\16\26\5\27\11\26\1\27\213\26\1\27\13\26\1\27\1\26"+
    "\3\27\1\26\1\27\1\26\24\27\1\26\54\27\1\26\46\27\1\26"+
    "\5\27\4\26\202\27\10\26\105\27\1\26\46\27\2\26\2\27\6\26"+
    "\20\27\41\26\46\27\2\26\1\27\7\26\47\27\110\26\33\27\5\26"+
    "\3\27\56\26\32\27\5\26\13\27\43\26\2\27\1\26\143\27\1\26"+
    "\1\27\17\26\2\27\7\26\2\27\12\26\3\27\2\26\1\27\20\26"+
    "\1\27\1\26\36\27\35\26\3\27\60\26\46\27\13\26\1\27\u0152\26"+
    "\66\27\3\26\1\27\22\26\1\27\7\26\12\27\43\26\10\27\2\26"+
    "\2\27\2\26\26\27\1\26\7\27\1\26\1\27\3\26\4\27\3\26"+
    "\1\27\36\26\2\27\1\26\3\27\16\26\2\27\23\26\6\27\4\26"+
    "\2\27\2\26\26\27\1\26\7\27\1\26\2\27\1\26\2\27\1\26"+
    "\2\27\37\26\4\27\1\26\1\27\23\26\3\27\20\26\11\27\1\26"+
    "\3\27\1\26\26\27\1\26\7\27\1\26\2\27\1\26\5\27\3\26"+
    "\1\27\22\26\1\27\17\26\2\27\43\26\10\27\2\26\2\27\2\26"+
    "\26\27\1\26\7\27\1\26\2\27\1\26\5\27\3\26\1\27\36\26"+
    "\2\27\1\26\3\27\17\26\1\27\21\26\1\27\1\26\6\27\3\26"+
    "\3\27\1\26\4\27\3\26\2\27\1\26\1\27\1\26\2\27\3\26"+
    "\2\27\3\26\3\27\3\26\10\27\1\26\3\27\113\26\10\27\1\26"+
    "\3\27\1\26\27\27\1\26\12\27\1\26\5\27\46\26\2\27\43\26"+
    "\10\27\1\26\3\27\1\26\27\27\1\26\12\27\1\26\5\27\3\26"+
    "\1\27\40\26\1\27\1\26\2\27\43\26\10\27\1\26\3\27\1\26"+
    "\27\27\1\26\20\27\46\26\2\27\43\26\22\27\3\26\30\27\1\26"+
    "\11\27\1\26\1\27\2\26\7\27\72\26\60\27\1\26\2\27\14\26"+
    "\7\27\72\26\2\27\1\26\1\27\2\26\2\27\1\26\1\27\2\26"+
    "\1\27\6\26\4\27\1\26\7\27\1\26\3\27\1\26\1\27\1\26"+
    "\1\27\2\26\2\27\1\26\4\27\1\26\2\27\11\26\1\27\2\26"+
    "\5\27\1\26\1\27\25\26\2\27\42\26\1\27\77\26\10\27\1\26"+
    "\42\27\35\26\4\27\164\26\42\27\1\26\5\27\1\26\2\27\45\26"+
    "\6\27\112\26\46\27\12\26\51\27\7\26\132\27\5\26\104\27\5\26"+
    "\122\27\6\26\7\27\1\26\77\27\1\26\1\27\1\26\4\27\2\26"+
    "\7\27\1\26\1\27\1\26\4\27\2\26\47\27\1\26\1\27\1\26"+
    "\4\27\2\26\37\27\1\26\1\27\1\26\4\27\2\26\7\27\1\26"+
    "\1\27\1\26\4\27\2\26\7\27\1\26\7\27\1\26\27\27\1\26"+
    "\37\27\1\26\1\27\1\26\4\27\2\26\7\27\1\26\47\27\1\26"+
    "\23\27\105\26\125\27\14\26\u026c\27\2\26\10\27\12\26\32\27\5\26"+
    "\113\27\25\26\15\27\1\26\4\27\16\26\22\27\16\26\22\27\16\26"+
    "\15\27\1\26\3\27\17\26\64\27\43\26\1\27\4\26\1\27\103\26"+
    "\130\27\10\26\51\27\127\26\35\27\63\26\36\27\2\26\5\27\u038b\26"+
    "\154\27\224\26\234\27\4\26\132\27\6\26\26\27\2\26\6\27\2\26"+
    "\46\27\2\26\6\27\2\26\10\27\1\26\1\27\1\26\1\27\1\26"+
    "\1\27\1\26\37\27\2\26\65\27\1\26\7\27\1\26\1\27\3\26"+
    "\3\27\1\26\7\27\3\26\4\27\2\26\6\27\4\26\15\27\5\26"+
    "\3\27\1\26\7\27\27\26\24\0\2\103\107\0\1\24\15\0\1\24"+
    "\202\0\1\24\4\0\1\24\2\0\12\24\1\0\1\24\3\0\5\24"+
    "\6\0\1\24\1\0\1\24\1\0\1\24\1\0\4\24\1\0\3\24"+
    "\1\0\7\24\3\0\3\24\5\0\5\24\u0ebb\0\2\24\52\0\5\24"+
    "\5\0\2\24\4\0\126\24\6\0\3\24\1\0\132\24\1\0\4\24"+
    "\5\0\50\24\4\0\136\24\21\0\30\24\70\0\20\24\u0200\0\u19b6\24"+
    "\112\0\u51a6\24\132\0\u048d\24\u0773\0\u2ba4\24\u215c\0\u012e\24\2\0\73\24"+
    "\225\0\7\24\14\0\5\24\5\0\1\24\1\0\12\24\1\0\15\24"+
    "\1\0\5\24\1\0\1\24\1\0\2\24\1\0\2\24\1\0\154\24"+
    "\41\0\u016b\24\22\0\100\24\2\0\66\24\50\0\14\24\164\0\5\24"+
    "\1\0\207\24\44\0\32\24\6\0\32\24\13\0\131\24\3\0\6\24"+
    "\2\0\6\24\2\0\6\24\2\0\3\24\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\2\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\3\1\11\1\12\1\13\2\7\1\14\1\15"+
    "\1\16\7\3\1\17\1\20\1\21\1\22\1\23\3\3"+
    "\1\24\1\25\1\26\1\7\1\27\1\30\1\31\1\32"+
    "\1\3\1\33\1\34\1\35\1\36\1\3\2\37\1\40"+
    "\3\3\1\37\1\3\1\41\1\42\4\2\1\43\2\42"+
    "\1\44\5\42\1\45\1\2\1\46\1\47\2\2\1\50"+
    "\1\51\1\42\2\51\1\52\5\53\1\54\1\55\1\0"+
    "\1\3\1\56\1\0\1\57\1\0\1\60\1\0\1\50"+
    "\1\61\2\0\1\62\1\63\1\64\6\3\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\3\1\75"+
    "\2\3\1\76\1\3\1\77\1\100\1\101\4\3\15\0"+
    "\4\53\1\102\3\0\1\3\1\103\4\3\1\104\10\3"+
    "\7\0\1\105\1\0\4\53\1\0\3\3\1\106\2\3"+
    "\1\107\6\3\6\0\2\53\1\110\1\53\1\0\1\3"+
    "\1\111\1\3\1\112\2\3\1\113\4\3\2\0\2\114"+
    "\3\0\2\53\1\115\1\0\1\3\1\116\1\117\1\120"+
    "\4\3\2\0\2\121\1\0\2\53\1\0\1\122\2\3"+
    "\2\123\2\124\1\0\2\125\1\0\2\53\1\0\2\126"+
    "\2\127\1\0\1\41\1\130\1\53\1\131\2\132\2\53"+
    "\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460\0\u04b0"+
    "\0\u03c0\0\u0500\0\u03c0\0\u03c0\0\u03c0\0\u0550\0\u03c0\0\u05a0"+
    "\0\u03c0\0\u05f0\0\u0640\0\u03c0\0\u0690\0\u06e0\0\u0730\0\u0780"+
    "\0\u07d0\0\u0820\0\u0870\0\u08c0\0\u0910\0\u0960\0\u03c0\0\u03c0"+
    "\0\u09b0\0\u0a00\0\u0a50\0\u0aa0\0\u0af0\0\u03c0\0\u03c0\0\u03c0"+
    "\0\u0b40\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u0b90\0\u03c0\0\u03c0"+
    "\0\u03c0\0\u03c0\0\u0be0\0\u0c30\0\u03c0\0\u0c80\0\u0cd0\0\u0d20"+
    "\0\u0d70\0\u0dc0\0\u0e10\0\u0e60\0\u03c0\0\u0eb0\0\u0f00\0\u0f50"+
    "\0\u0fa0\0\u03c0\0\u0ff0\0\u1040\0\u03c0\0\u1090\0\u10e0\0\u1130"+
    "\0\u1180\0\u11d0\0\u03c0\0\u1130\0\u03c0\0\u03c0\0\u1180\0\u11d0"+
    "\0\u03c0\0\u03c0\0\u1220\0\u0ff0\0\u1270\0\u03c0\0\u12c0\0\u1310"+
    "\0\u1360\0\u13b0\0\u1400\0\u03c0\0\u03c0\0\u0410\0\u1450\0\u0410"+
    "\0\u14a0\0\u03c0\0\u05f0\0\u03c0\0\u0640\0\u14f0\0\u03c0\0\u1540"+
    "\0\u1590\0\u03c0\0\u03c0\0\u03c0\0\u15e0\0\u1630\0\u1680\0\u16d0"+
    "\0\u1720\0\u1770\0\u0410\0\u0410\0\u0410\0\u0410\0\u03c0\0\u03c0"+
    "\0\u03c0\0\u03c0\0\u17c0\0\u0410\0\u1810\0\u1860\0\u03c0\0\u18b0"+
    "\0\u0410\0\u0410\0\u03c0\0\u1900\0\u1950\0\u19a0\0\u19f0\0\u1a40"+
    "\0\u1a90\0\u1ae0\0\u1b30\0\u1b80\0\u0eb0\0\u0f00\0\u1bd0\0\u1c20"+
    "\0\u1c70\0\u1cc0\0\u1d10\0\u12c0\0\u1d60\0\u1db0\0\u1e00\0\u1e50"+
    "\0\u0410\0\u1ea0\0\u1ef0\0\u1f40\0\u1f90\0\u0410\0\u1fe0\0\u2030"+
    "\0\u2080\0\u20d0\0\u0410\0\u2120\0\u2170\0\u21c0\0\u2210\0\u2260"+
    "\0\u22b0\0\u2300\0\u2350\0\u23a0\0\u23f0\0\u2440\0\u2490\0\u24e0"+
    "\0\u2530\0\u2580\0\u03c0\0\u25d0\0\u2620\0\u2670\0\u26c0\0\u2710"+
    "\0\u2760\0\u27b0\0\u2800\0\u2850\0\u0410\0\u28a0\0\u28f0\0\u0410"+
    "\0\u2940\0\u2990\0\u29e0\0\u2a30\0\u2a80\0\u2ad0\0\u2b20\0\u2b70"+
    "\0\u2bc0\0\u2c10\0\u2c60\0\u2cb0\0\u2d00\0\u2d50\0\u12c0\0\u2da0"+
    "\0\u2df0\0\u2e40\0\u0410\0\u2e90\0\u0410\0\u2ee0\0\u2f30\0\u0410"+
    "\0\u2f80\0\u2fd0\0\u3020\0\u3070\0\u30c0\0\u3110\0\u3160\0\u03c0"+
    "\0\u31b0\0\u3200\0\u3250\0\u32a0\0\u32f0\0\u12c0\0\u3340\0\u3390"+
    "\0\u0410\0\u0410\0\u0410\0\u33e0\0\u3430\0\u3480\0\u34d0\0\u3520"+
    "\0\u3570\0\u35c0\0\u03c0\0\u3610\0\u3660\0\u36b0\0\u3700\0\u0410"+
    "\0\u3750\0\u37a0\0\u37f0\0\u03c0\0\u3840\0\u03c0\0\u3890\0\u38e0"+
    "\0\u03c0\0\u3930\0\u3980\0\u39d0\0\u3a20\0\u3a70\0\u03c0\0\u3ac0"+
    "\0\u03c0\0\u3b10\0\u03c0\0\u12c0\0\u3b60\0\u03c0\0\u3bb0\0\u03c0"+
    "\0\u3c00\0\u3c50\0\u12c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\16\1\23"+
    "\1\24\1\16\1\25\1\26\1\27\1\30\1\31\3\16"+
    "\1\32\1\33\1\15\1\34\2\24\1\35\1\36\1\37"+
    "\1\40\2\16\1\41\1\42\1\16\1\43\11\16\1\44"+
    "\5\16\1\45\1\46\1\47\1\50\1\51\1\52\1\22"+
    "\1\16\1\53\1\54\1\55\1\24\1\56\1\57\1\60"+
    "\1\61\1\62\1\16\1\15\2\16\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\16\1\73\1\15"+
    "\1\16\1\17\1\74\1\75\1\22\1\16\1\23\1\76"+
    "\1\16\1\25\1\26\1\27\1\30\1\31\3\16\1\32"+
    "\1\33\1\15\1\34\2\24\1\35\1\36\1\37\1\77"+
    "\2\16\1\41\1\42\1\16\1\43\3\16\1\100\5\16"+
    "\1\101\5\16\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\102\1\16\1\53\1\54\1\103\1\24\1\56\1\57"+
    "\1\60\1\61\1\104\1\16\1\15\2\16\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\16\1\73"+
    "\4\15\1\0\1\105\14\15\1\106\1\107\20\15\2\110"+
    "\2\111\12\15\1\112\4\15\1\105\30\15\7\105\1\113"+
    "\20\105\1\114\44\105\1\115\25\105\1\116\1\105\1\117"+
    "\7\105\1\120\12\105\1\121\31\105\1\112\4\105\1\117"+
    "\7\105\1\122\1\123\17\105\3\15\1\116\1\105\1\117"+
    "\7\15\1\124\4\15\1\125\1\126\4\15\1\127\31\15"+
    "\1\112\4\15\1\117\7\15\1\130\20\15\3\105\1\116"+
    "\1\105\1\117\7\105\1\120\4\105\1\131\5\105\1\121"+
    "\36\105\1\117\33\105\1\116\1\105\1\117\7\105\1\120"+
    "\5\105\1\131\4\105\1\121\36\105\1\117\30\105\2\132"+
    "\1\133\4\132\1\134\1\132\1\133\1\132\1\133\3\132"+
    "\3\133\2\132\1\133\2\132\1\133\2\132\30\133\6\132"+
    "\4\133\2\132\1\135\3\132\1\133\1\132\2\133\3\132"+
    "\1\133\4\132\2\133\2\132\1\133\4\132\1\134\1\132"+
    "\1\133\1\132\1\133\3\132\3\133\2\132\1\133\2\132"+
    "\1\133\2\132\30\133\6\132\4\133\6\132\1\133\1\132"+
    "\2\133\3\132\1\133\4\132\2\133\1\136\2\137\1\20"+
    "\1\21\1\136\1\137\2\136\1\137\1\136\1\137\3\136"+
    "\3\137\10\136\3\137\1\140\1\137\1\141\1\137\1\142"+
    "\3\137\1\143\14\137\5\136\1\144\4\137\1\145\5\136"+
    "\1\137\1\136\2\137\3\136\1\137\4\136\2\137\4\14"+
    "\1\0\113\14\121\0\2\16\3\0\1\16\1\146\1\0"+
    "\1\16\1\0\1\16\3\0\3\16\10\0\30\16\6\0"+
    "\4\16\6\0\1\16\1\0\2\16\3\0\1\16\4\0"+
    "\2\16\1\0\2\16\3\0\1\16\1\146\1\0\1\16"+
    "\1\0\1\16\3\0\3\16\10\0\3\16\1\147\24\16"+
    "\6\0\4\16\6\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\4\0\1\21\120\0\1\22\61\0\1\22"+
    "\31\0\2\16\3\0\1\16\1\146\1\0\1\16\1\0"+
    "\1\16\3\0\3\16\10\0\30\16\6\0\4\16\6\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\1\150\1\16"+
    "\10\0\1\151\4\0\2\152\44\0\2\152\10\0\2\152"+
    "\7\0\3\152\7\0\3\153\2\0\15\153\1\154\75\153"+
    "\3\155\2\0\16\155\1\154\74\155\2\0\1\156\3\0"+
    "\1\156\2\0\1\156\1\0\1\156\3\0\3\156\2\0"+
    "\2\156\1\0\1\156\1\157\1\160\30\156\6\0\4\156"+
    "\3\0\1\161\1\162\1\0\1\156\1\0\2\156\3\0"+
    "\1\156\4\0\2\156\65\0\1\163\12\0\1\164\20\0"+
    "\2\16\3\0\1\16\1\146\1\0\1\16\1\0\1\16"+
    "\3\0\2\16\1\165\10\0\30\16\6\0\4\16\6\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\16\3\0\1\16\1\146\1\0\1\16\1\0\1\166"+
    "\3\0\3\16\10\0\30\16\6\0\4\16\6\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\1\0\2\16"+
    "\3\0\1\16\1\146\1\0\1\16\1\0\1\16\3\0"+
    "\3\16\10\0\20\16\1\167\7\16\6\0\4\16\6\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\16\3\0\1\16\1\146\1\0\1\16\1\0\1\16"+
    "\3\0\3\16\10\0\30\16\6\0\1\170\3\16\6\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\16\3\0\1\16\1\146\1\0\1\16\1\0\1\16"+
    "\3\0\3\16\10\0\15\16\1\171\12\16\6\0\1\16"+
    "\1\172\2\16\6\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\1\0\2\16\3\0\1\16\1\146\1\0"+
    "\1\16\1\0\1\173\3\0\3\16\10\0\7\16\1\174"+
    "\20\16\6\0\4\16\6\0\1\16\1\0\2\16\3\0"+
    "\1\16\4\0\2\16\1\0\1\16\1\175\3\0\1\16"+
    "\1\146\1\0\1\16\1\0\1\16\3\0\3\16\10\0"+
    "\30\16\6\0\3\16\1\176\6\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\62\0\1\177\15\0\1\200"+
    "\104\0\1\201\120\0\1\202\32\0\2\16\3\0\1\16"+
    "\1\146\1\0\1\16\1\0\1\203\3\0\3\16\10\0"+
    "\30\16\6\0\4\16\6\0\1\16\1\0\2\16\3\0"+
    "\1\16\4\0\2\16\1\0\2\16\3\0\1\16\1\146"+
    "\1\0\1\16\1\0\1\204\3\0\3\16\10\0\30\16"+
    "\6\0\4\16\6\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\1\0\2\16\3\0\1\16\1\146\1\0"+
    "\1\16\1\0\1\205\3\0\3\16\10\0\30\16\6\0"+
    "\4\16\6\0\1\16\1\0\2\16\3\0\1\206\4\0"+
    "\2\16\100\0\1\207\20\0\2\16\3\0\1\16\1\146"+
    "\1\0\1\16\1\0\1\16\3\0\3\16\10\0\15\16"+
    "\1\210\12\16\6\0\4\16\6\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\1\146\1\0\1\16\1\0\1\211\3\0\3\16\10\0"+
    "\7\16\1\212\20\16\6\0\4\16\6\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\4\0\1\75\140\0"+
    "\1\213\73\0\2\16\3\0\1\16\1\146\1\0\1\16"+
    "\1\0\1\166\3\0\3\16\10\0\11\16\1\214\16\16"+
    "\6\0\4\16\6\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\1\0\2\16\3\0\1\16\1\146\1\0"+
    "\1\16\1\0\1\16\3\0\3\16\10\0\30\16\6\0"+
    "\1\215\3\16\6\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\1\0\2\16\3\0\1\16\1\146\1\0"+
    "\1\16\1\0\1\173\3\0\3\16\10\0\3\16\1\216"+
    "\3\16\1\174\20\16\6\0\4\16\6\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\5\0\1\22\61\0"+
    "\1\102\31\0\2\16\3\0\1\16\1\146\1\0\1\16"+
    "\1\0\1\205\3\0\3\16\10\0\7\16\1\217\20\16"+
    "\6\0\4\16\6\0\1\16\1\0\2\16\3\0\1\206"+
    "\4\0\2\16\34\0\1\220\1\0\1\221\15\0\1\222"+
    "\1\0\1\223\14\0\1\224\24\0\22\225\1\105\75\225"+
    "\23\226\1\105\74\226\54\0\2\227\102\0\2\230\65\0"+
    "\1\231\141\0\1\232\72\0\1\105\120\0\1\117\61\0"+
    "\1\117\40\0\1\233\4\0\2\105\44\0\2\105\10\0"+
    "\2\105\7\0\3\105\11\0\1\156\3\0\1\156\2\0"+
    "\1\156\1\0\1\156\3\0\3\156\2\0\2\156\1\0"+
    "\1\156\2\0\30\156\6\0\4\156\3\0\1\161\2\0"+
    "\1\156\1\0\2\156\3\0\1\156\4\0\2\156\62\0"+
    "\1\112\36\0\5\133\3\0\3\133\3\0\3\133\2\0"+
    "\1\133\2\0\1\133\1\0\31\133\1\0\11\133\6\0"+
    "\1\133\1\0\2\133\3\0\1\133\4\0\2\133\62\0"+
    "\1\132\36\0\2\137\3\0\1\137\1\234\1\0\1\137"+
    "\1\0\1\137\3\0\3\137\10\0\30\137\6\0\4\137"+
    "\6\0\1\137\1\0\2\137\3\0\1\137\4\0\2\137"+
    "\1\0\2\137\3\0\1\137\1\234\1\0\1\137\1\0"+
    "\1\137\3\0\3\137\10\0\13\137\1\235\14\137\6\0"+
    "\4\137\6\0\1\137\1\0\2\137\3\0\1\137\4\0"+
    "\2\137\1\0\2\137\3\0\1\137\1\234\1\0\1\137"+
    "\1\0\1\137\3\0\3\137\10\0\3\137\1\236\24\137"+
    "\6\0\4\137\6\0\1\137\1\0\2\137\3\0\1\137"+
    "\4\0\2\137\1\0\2\137\3\0\1\137\1\234\1\0"+
    "\1\137\1\0\1\137\3\0\3\137\10\0\11\137\1\237"+
    "\16\137\6\0\4\137\6\0\1\137\1\0\2\137\3\0"+
    "\1\137\4\0\2\137\1\0\2\137\3\0\1\137\1\234"+
    "\1\0\1\137\1\0\1\137\3\0\3\137\10\0\30\137"+
    "\6\0\1\240\3\137\6\0\1\137\1\0\2\137\3\0"+
    "\1\137\4\0\2\137\1\0\2\16\3\0\1\16\1\146"+
    "\1\0\1\16\1\0\1\16\3\0\3\16\10\0\30\16"+
    "\6\0\1\16\1\241\2\16\6\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\1\242\15\0\3\242"+
    "\10\0\1\242\1\0\1\242\1\0\1\242\1\0\1\242"+
    "\1\0\1\242\1\0\1\242\1\0\1\242\1\0\1\242"+
    "\1\0\1\242\1\0\1\242\1\0\1\242\1\0\1\242"+
    "\21\0\1\242\1\0\2\242\13\0\2\156\3\0\2\156"+
    "\1\0\3\156\3\0\3\156\2\0\2\156\1\0\1\156"+
    "\2\0\30\156\6\0\4\156\6\0\1\156\1\0\2\156"+
    "\3\0\1\156\4\0\2\156\7\0\1\243\22\0\2\244"+
    "\66\0\1\156\3\0\1\156\2\0\1\156\1\0\1\156"+
    "\3\0\3\156\2\0\2\156\1\0\1\156\2\0\30\156"+
    "\6\0\4\156\6\0\1\156\1\0\2\156\3\0\1\156"+
    "\4\0\2\156\1\0\2\16\3\0\1\16\1\146\1\0"+
    "\1\16\1\0\1\16\3\0\1\245\2\16\10\0\30\16"+
    "\6\0\4\16\6\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\1\0\1\16\1\246\3\0\1\16\1\146"+
    "\1\0\1\16\1\0\1\16\3\0\3\16\10\0\30\16"+
    "\6\0\4\16\6\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\1\0\2\16\3\0\1\16\1\146\1\0"+
    "\1\16\1\0\1\16\3\0\3\16\10\0\30\16\6\0"+
    "\4\16\6\0\1\16\1\0\1\247\1\16\3\0\1\16"+
    "\4\0\2\16\1\0\2\16\3\0\1\16\1\146\1\0"+
    "\1\16\1\0\1\16\3\0\3\16\10\0\21\16\1\250"+
    "\6\16\6\0\3\16\1\251\6\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\1\146\1\0\1\16\1\0\1\16\3\0\3\16\10\0"+
    "\30\16\6\0\1\16\1\252\2\16\6\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\1\146\1\0\1\16\1\0\1\16\3\0\3\16"+
    "\10\0\11\16\1\253\16\16\6\0\4\16\6\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\1\0\2\16"+
    "\3\0\1\16\1\146\1\0\1\16\1\0\1\16\3\0"+
    "\3\16\10\0\30\16\6\0\3\16\1\254\6\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\1\0\2\16"+
    "\3\0\1\16\1\146\1\0\1\16\1\0\1\16\3\0"+
    "\3\16\10\0\21\16\1\255\6\16\6\0\4\16\6\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\16\3\0\1\16\1\146\1\0\1\16\1\0\1\16"+
    "\3\0\3\16\10\0\27\16\1\256\6\0\4\16\6\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\16\3\0\1\16\1\146\1\0\1\16\1\0\1\16"+
    "\3\0\3\16\10\0\27\16\1\257\6\0\4\16\6\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\16\3\0\1\16\1\146\1\0\1\16\1\0\1\16"+
    "\3\0\3\16\10\0\30\16\6\0\2\16\1\260\1\16"+
    "\6\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\1\0\2\16\3\0\1\16\1\146\1\0\1\16\1\0"+
    "\1\16\3\0\3\16\10\0\30\16\6\0\1\16\1\261"+
    "\2\16\6\0\1\16\1\0\2\16\3\0\1\16\4\0"+
    "\2\16\1\0\2\16\3\0\1\16\1\146\1\0\1\16"+
    "\1\0\1\16\3\0\3\16\10\0\5\16\1\262\22\16"+
    "\6\0\4\16\6\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\1\0\2\16\3\0\1\16\1\146\1\0"+
    "\1\16\1\0\1\16\3\0\3\16\10\0\30\16\6\0"+
    "\1\263\3\16\6\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\44\0\1\264\125\0\1\265\147\0\1\266"+
    "\121\0\1\267\54\0\1\270\134\0\2\271\110\0\2\272"+
    "\51\0\3\231\54\0\1\112\4\0\1\231\125\0\1\273"+
    "\23\0\1\274\15\0\3\274\10\0\1\274\1\0\1\274"+
    "\1\0\1\274\1\0\1\274\1\0\1\274\1\0\1\274"+
    "\1\0\1\274\1\0\1\274\1\0\1\274\1\0\1\274"+
    "\1\0\1\274\1\0\1\274\21\0\1\274\1\0\2\274"+
    "\13\0\2\137\3\0\1\137\1\234\1\0\1\137\1\0"+
    "\1\137\3\0\3\137\10\0\7\137\1\275\20\137\6\0"+
    "\4\137\6\0\1\137\1\0\2\137\3\0\1\137\4\0"+
    "\2\137\1\0\2\137\3\0\1\137\1\234\1\0\1\137"+
    "\1\0\1\137\3\0\3\137\10\0\30\137\6\0\2\137"+
    "\1\276\1\137\6\0\1\137\1\0\2\137\3\0\1\137"+
    "\4\0\2\137\1\0\2\137\3\0\1\137\1\234\1\0"+
    "\1\137\1\0\1\137\3\0\3\137\10\0\13\137\1\277"+
    "\14\137\6\0\4\137\6\0\1\137\1\0\2\137\3\0"+
    "\1\137\4\0\2\137\1\0\2\137\3\0\1\137\1\234"+
    "\1\0\1\137\1\0\1\137\3\0\3\137\10\0\30\137"+
    "\6\0\1\137\1\300\2\137\6\0\1\137\1\0\2\137"+
    "\3\0\1\137\4\0\2\137\1\0\1\152\15\0\3\152"+
    "\10\0\1\152\1\0\1\152\1\0\1\152\1\0\1\152"+
    "\1\0\1\152\1\0\1\152\1\0\1\152\1\0\1\152"+
    "\1\0\1\152\1\0\1\152\1\0\1\152\1\0\1\152"+
    "\21\0\1\152\1\0\2\152\21\0\1\132\144\0\2\301"+
    "\63\0\2\16\3\0\1\16\1\146\1\0\1\16\1\0"+
    "\1\16\3\0\3\16\10\0\30\16\6\0\4\16\6\0"+
    "\1\16\1\0\1\302\1\16\3\0\1\16\4\0\2\16"+
    "\1\0\2\16\3\0\1\16\1\146\1\0\1\16\1\0"+
    "\1\16\3\0\3\16\10\0\30\16\6\0\4\16\6\0"+
    "\1\303\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\16\3\0\1\16\1\146\1\0\1\16\1\0\1\16"+
    "\3\0\3\16\10\0\21\16\1\304\6\16\6\0\4\16"+
    "\6\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\1\0\2\16\3\0\1\16\1\146\1\0\1\16\1\0"+
    "\1\305\3\0\3\16\10\0\30\16\6\0\4\16\6\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\16\3\0\1\16\1\146\1\0\1\16\1\0\1\16"+
    "\3\0\3\16\10\0\3\16\1\306\24\16\6\0\4\16"+
    "\6\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\1\0\2\16\3\0\1\16\1\146\1\0\1\16\1\0"+
    "\1\16\3\0\3\16\10\0\23\16\1\307\4\16\6\0"+
    "\4\16\6\0\1\16\1\0\2\16\3\0\1\16\4\0"+
    "\2\16\1\0\1\16\1\310\3\0\1\16\1\146\1\0"+
    "\1\16\1\0\1\16\3\0\3\16\10\0\30\16\6\0"+
    "\4\16\6\0\1\16\1\0\2\16\3\0\1\16\4\0"+
    "\2\16\1\0\2\16\3\0\1\16\1\146\1\0\1\16"+
    "\1\0\1\16\3\0\3\16\10\0\7\16\1\311\20\16"+
    "\6\0\4\16\6\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\1\0\2\16\3\0\1\16\1\146\1\0"+
    "\1\16\1\0\1\16\3\0\3\16\10\0\21\16\1\312"+
    "\6\16\6\0\4\16\6\0\1\16\1\0\2\16\3\0"+
    "\1\16\4\0\2\16\1\0\2\16\3\0\1\16\1\146"+
    "\1\0\1\16\1\0\1\16\3\0\3\16\10\0\30\16"+
    "\6\0\1\313\3\16\6\0\1\16\1\0\2\16\3\0"+
    "\1\16\4\0\2\16\1\0\2\16\3\0\1\16\1\146"+
    "\1\0\1\16\1\0\1\16\3\0\3\16\10\0\7\16"+
    "\1\314\20\16\6\0\4\16\6\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\1\146\1\0\1\16\1\0\1\16\3\0\3\16\10\0"+
    "\30\16\6\0\1\315\3\16\6\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\1\146\1\0\1\16\1\0\1\16\3\0\3\16\10\0"+
    "\7\16\1\316\20\16\6\0\4\16\6\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\40\0\1\317\163\0"+
    "\1\320\34\0\1\321\200\0\1\322\105\0\1\323\101\0"+
    "\2\324\116\0\2\105\45\0\1\105\15\0\3\105\10\0"+
    "\1\105\1\0\1\105\1\0\1\105\1\0\1\105\1\0"+
    "\1\105\1\0\1\105\1\0\1\105\1\0\1\105\1\0"+
    "\1\105\1\0\1\105\1\0\1\105\1\0\1\105\21\0"+
    "\1\105\1\0\2\105\13\0\2\137\3\0\1\137\1\234"+
    "\1\0\1\137\1\0\1\137\3\0\3\137\10\0\27\137"+
    "\1\325\6\0\4\137\6\0\1\137\1\0\2\137\3\0"+
    "\1\137\4\0\2\137\1\0\2\137\3\0\1\137\1\234"+
    "\1\0\1\137\1\0\1\137\3\0\3\137\10\0\30\137"+
    "\6\0\3\137\1\326\6\0\1\137\1\0\2\137\3\0"+
    "\1\137\4\0\2\137\1\0\2\137\3\0\1\137\1\234"+
    "\1\0\1\137\1\0\1\327\3\0\3\137\10\0\30\137"+
    "\6\0\4\137\6\0\1\137\1\0\2\137\3\0\1\137"+
    "\4\0\2\137\1\0\2\137\3\0\1\137\1\234\1\0"+
    "\1\137\1\0\1\137\3\0\3\137\10\0\30\137\6\0"+
    "\1\330\3\137\6\0\1\137\1\0\2\137\3\0\1\137"+
    "\4\0\2\137\36\0\2\331\61\0\2\16\3\0\1\16"+
    "\1\146\1\0\1\16\1\0\1\16\3\0\3\16\10\0"+
    "\22\16\1\332\5\16\6\0\4\16\6\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\1\146\1\0\1\16\1\0\1\16\3\0\3\16"+
    "\10\0\30\16\6\0\4\16\6\0\1\333\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\1\146\1\0\1\16\1\0\1\334\3\0\3\16\10\0"+
    "\30\16\6\0\4\16\6\0\1\16\1\0\2\16\3\0"+
    "\1\16\4\0\2\16\1\0\2\16\3\0\1\16\1\146"+
    "\1\0\1\16\1\0\1\16\3\0\3\16\10\0\30\16"+
    "\6\0\4\16\6\0\1\16\1\0\2\16\3\0\1\335"+
    "\4\0\2\16\1\0\2\16\3\0\1\16\1\146\1\0"+
    "\1\16\1\0\1\16\3\0\3\16\10\0\21\16\1\336"+
    "\6\16\6\0\4\16\6\0\1\16\1\0\2\16\3\0"+
    "\1\16\4\0\2\16\1\0\2\16\3\0\1\16\1\146"+
    "\1\0\1\16\1\0\1\16\3\0\3\16\10\0\5\16"+
    "\1\337\22\16\6\0\4\16\6\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\1\146\1\0\1\16\1\0\1\340\3\0\3\16\10\0"+
    "\30\16\6\0\4\16\6\0\1\16\1\0\2\16\3\0"+
    "\1\16\4\0\2\16\1\0\2\16\3\0\1\16\1\146"+
    "\1\0\1\16\1\0\1\16\3\0\3\16\10\0\17\16"+
    "\1\341\10\16\6\0\4\16\6\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\1\146\1\0\1\16\1\0\1\16\3\0\3\16\10\0"+
    "\27\16\1\342\6\0\4\16\6\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\1\146\1\0\1\16\1\0\1\16\3\0\3\16\10\0"+
    "\21\16\1\343\6\16\6\0\4\16\6\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\1\146\1\0\1\16\1\0\1\16\3\0\3\16"+
    "\10\0\27\16\1\344\6\0\4\16\6\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\60\0\1\345\141\0"+
    "\1\346\20\0\1\347\2\350\75\0\1\350\35\0\1\351"+
    "\137\0\1\352\136\0\2\353\37\0\2\137\3\0\1\137"+
    "\1\234\1\0\1\137\1\0\1\137\3\0\3\137\10\0"+
    "\3\137\1\354\24\137\6\0\4\137\6\0\1\137\1\0"+
    "\2\137\3\0\1\137\4\0\2\137\1\0\2\137\3\0"+
    "\1\137\1\234\1\0\1\137\1\0\1\137\3\0\3\137"+
    "\10\0\7\137\1\355\20\137\6\0\4\137\6\0\1\137"+
    "\1\0\2\137\3\0\1\137\4\0\2\137\1\0\2\137"+
    "\3\0\1\137\1\234\1\0\1\137\1\0\1\137\3\0"+
    "\3\137\10\0\17\137\1\356\10\137\6\0\4\137\6\0"+
    "\1\137\1\0\2\137\3\0\1\137\4\0\2\137\40\0"+
    "\2\357\57\0\2\16\3\0\1\16\1\146\1\0\1\16"+
    "\1\0\1\16\3\0\3\16\10\0\20\16\1\360\7\16"+
    "\6\0\4\16\6\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\1\0\2\16\3\0\1\16\1\146\1\0"+
    "\1\16\1\0\1\16\3\0\3\16\10\0\30\16\6\0"+
    "\1\16\1\361\2\16\6\0\1\16\1\0\2\16\3\0"+
    "\1\16\4\0\2\16\1\0\2\16\3\0\1\16\1\146"+
    "\1\0\1\16\1\0\1\16\3\0\3\16\10\0\7\16"+
    "\1\362\20\16\6\0\4\16\6\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\1\146\1\0\1\16\1\0\1\16\3\0\3\16\10\0"+
    "\15\16\1\363\12\16\6\0\4\16\6\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\1\146\1\0\1\16\1\0\1\16\3\0\3\16"+
    "\10\0\27\16\1\364\6\0\4\16\6\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\1\146\1\0\1\16\1\0\1\16\3\0\3\16"+
    "\10\0\30\16\6\0\1\365\3\16\6\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\1\146\1\0\1\16\1\0\1\16\3\0\3\16"+
    "\10\0\30\16\6\0\3\16\1\366\6\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\1\146\1\0\1\16\1\0\1\16\3\0\3\16"+
    "\10\0\5\16\1\367\22\16\6\0\4\16\6\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\34\0\1\370"+
    "\165\0\1\371\21\0\1\350\116\0\1\372\2\373\75\0"+
    "\1\373\75\0\1\374\74\0\2\105\61\0\2\137\3\0"+
    "\1\137\1\234\1\0\1\137\1\0\1\137\3\0\3\137"+
    "\10\0\30\137\6\0\2\137\1\375\1\137\6\0\1\137"+
    "\1\0\2\137\3\0\1\137\4\0\2\137\1\0\2\137"+
    "\3\0\1\137\1\234\1\0\1\137\1\0\1\137\3\0"+
    "\3\137\10\0\30\137\6\0\1\137\1\376\2\137\6\0"+
    "\1\137\1\0\2\137\3\0\1\137\4\0\2\137\42\0"+
    "\2\377\55\0\2\16\3\0\1\16\1\146\1\0\1\16"+
    "\1\0\1\16\3\0\3\16\10\0\6\16\1\u0100\21\16"+
    "\6\0\4\16\6\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\1\0\2\16\3\0\1\16\1\146\1\0"+
    "\1\16\1\0\1\16\3\0\3\16\10\0\5\16\1\u0101"+
    "\22\16\6\0\4\16\6\0\1\16\1\0\2\16\3\0"+
    "\1\16\4\0\2\16\1\0\2\16\3\0\1\16\1\146"+
    "\1\0\1\16\1\0\1\16\3\0\3\16\10\0\21\16"+
    "\1\u0102\6\16\6\0\4\16\6\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\1\u0103\2\u0104"+
    "\1\16\1\146\1\0\1\16\1\0\1\16\3\0\3\16"+
    "\10\0\30\16\6\0\4\16\6\0\1\16\1\u0104\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\1\u0105\2\u0106"+
    "\1\16\1\146\1\0\1\16\1\0\1\16\3\0\3\16"+
    "\10\0\30\16\6\0\4\16\6\0\1\16\1\u0106\2\16"+
    "\3\0\1\16\4\0\2\16\105\0\1\u0107\15\0\1\u0108"+
    "\2\u0109\75\0\1\u0109\20\0\1\373\152\0\1\u010a\61\0"+
    "\2\137\3\0\1\137\1\234\1\0\1\137\1\0\1\137"+
    "\3\0\3\137\10\0\30\137\6\0\1\u010b\3\137\6\0"+
    "\1\137\1\0\2\137\3\0\1\137\4\0\2\137\1\0"+
    "\2\137\3\0\1\137\1\234\1\0\1\137\1\0\1\137"+
    "\3\0\3\137\10\0\23\137\1\u010c\4\137\6\0\4\137"+
    "\6\0\1\137\1\0\2\137\3\0\1\137\4\0\2\137"+
    "\44\0\2\u010d\53\0\2\16\1\u010e\2\u010f\1\16\1\146"+
    "\1\0\1\16\1\0\1\16\3\0\3\16\10\0\30\16"+
    "\6\0\4\16\6\0\1\16\1\u010f\2\16\3\0\1\16"+
    "\4\0\2\16\1\0\2\16\1\u0110\2\u0111\1\16\1\146"+
    "\1\0\1\16\1\0\1\16\3\0\3\16\10\0\30\16"+
    "\6\0\4\16\6\0\1\16\1\u0111\2\16\3\0\1\16"+
    "\4\0\2\16\4\0\1\u0104\117\0\1\u0106\215\0\1\u0112"+
    "\21\0\1\u0109\140\0\1\u0113\73\0\2\137\3\0\1\137"+
    "\1\234\1\0\1\137\1\0\1\137\3\0\3\137\10\0"+
    "\21\137\1\u0114\6\137\6\0\4\137\6\0\1\137\1\0"+
    "\2\137\3\0\1\137\4\0\2\137\1\0\2\137\3\0"+
    "\1\137\1\234\1\0\1\137\1\0\1\137\3\0\3\137"+
    "\10\0\5\137\1\u0115\22\137\6\0\4\137\6\0\1\137"+
    "\1\0\2\137\3\0\1\137\4\0\2\137\13\0\1\u0116"+
    "\5\0\1\u0116\102\0\1\u010f\117\0\1\u0111\116\0\1\u0117"+
    "\2\u0118\75\0\1\u0118\15\0\2\137\3\0\1\137\1\234"+
    "\1\0\1\137\1\0\1\137\3\0\3\137\10\0\7\137"+
    "\1\u0119\20\137\6\0\4\137\6\0\1\137\1\0\2\137"+
    "\3\0\1\137\4\0\2\137\4\0\1\u0118\114\0\2\137"+
    "\3\0\1\137\1\234\1\0\1\137\1\0\1\137\3\0"+
    "\3\137\10\0\3\137\1\u011a\24\137\6\0\4\137\6\0"+
    "\1\137\1\0\2\137\3\0\1\137\4\0\2\137\1\0"+
    "\2\137\3\0\1\137\1\234\1\0\1\137\1\0\1\137"+
    "\3\0\3\137\10\0\30\137\6\0\1\137\1\u011b\2\137"+
    "\6\0\1\137\1\0\2\137\3\0\1\137\4\0\2\137";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\1\1\11\3\1\1\11\1\1\3\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\11\12\1\2\11\5\1"+
    "\3\11\1\1\4\11\1\1\4\11\2\1\1\11\7\1"+
    "\1\11\4\1\1\11\2\1\1\11\5\1\1\11\1\1"+
    "\2\11\2\1\2\11\3\1\1\11\5\1\2\11\1\0"+
    "\2\1\1\0\1\11\1\0\1\11\1\0\1\1\1\11"+
    "\2\0\3\11\12\1\4\11\4\1\1\11\3\1\1\11"+
    "\4\1\15\0\5\1\3\0\17\1\7\0\1\11\1\0"+
    "\4\1\1\0\15\1\6\0\4\1\1\0\13\1\2\0"+
    "\1\1\1\11\3\0\3\1\1\0\10\1\2\0\1\1"+
    "\1\11\1\0\2\1\1\0\4\1\1\11\1\1\1\11"+
    "\1\0\1\1\1\11\1\0\2\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\0\1\11\2\1\1\11\1\1\1\11"+
    "\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public _ParserLexer() {
      this((java.io.Reader) null);
    }

    public _ParserLexer(boolean highlightMode) {
      this((java.io.Reader) null);
    }


  public _ParserLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ParserLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1294) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { yybegin(YYINITIAL); return ParserTokenTypes.XOR;
          }
        case 92: break;
        case 72: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_TYPE_KEYWORD;
          }
        case 93: break;
        case 64: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITGT;
          }
        case 94: break;
        case 22: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DIV;
          }
        case 95: break;
        case 24: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DOLLAR;
          }
        case 96: break;
        case 77: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_PARAM_KEYWORD;
          }
        case 97: break;
        case 73: 
          { yybegin(YYINITIAL); return ParserTokenTypes.CLASS_STATIC_KEYWORD;
          }
        case 98: break;
        case 7: 
          { yybegin(YYINITIAL); return ParserTokenTypes.USELESS_CHAR;
          }
        case 99: break;
        case 52: 
          { yybegin(YYINITIAL); return ParserTokenTypes.NE;
          }
        case 100: break;
        case 27: 
          { yybegin(YYINITIAL); return ParserTokenTypes.MULT;
          }
        case 101: break;
        case 11: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RBRACE;
          }
        case 102: break;
        case 82: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DEFAULT_KEYWORD;
          }
        case 103: break;
        case 56: 
          { yybegin(YYINITIAL); return ParserTokenTypes.IS_KEYWORD;
          }
        case 104: break;
        case 50: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LE;
          }
        case 105: break;
        case 55: 
          { yybegin(YYINITIAL); return ParserTokenTypes.IF_KEYWORD;
          }
        case 106: break;
        case 9: 
          { yybegin(YYINITIAL); return ParserTokenTypes.PLUS;
          }
        case 107: break;
        case 8: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DOT;
          }
        case 108: break;
        case 62: 
          { yybegin(YYINITIAL); return ParserTokenTypes.EQEQ;
          }
        case 109: break;
        case 20: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LBRACKET;
          }
        case 110: break;
        case 85: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { yybegin(YYINITIAL); return ParserTokenTypes.CLASS_KEYWORD;
          }
        case 111: break;
        case 74: 
          { yybegin(YYINITIAL); return ParserTokenTypes.THROW_KEYWORD;
          }
        case 112: break;
        case 69: 
          { yybegin(C_COMMENT_END); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 113: break;
        case 26: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LBRACE;
          }
        case 114: break;
        case 61: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITNE;
          }
        case 115: break;
        case 49: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LTLT;
          }
        case 116: break;
        case 14: 
          { yybegin(YYINITIAL); return ParserTokenTypes.EXCL;
          }
        case 117: break;
        case 41: 
          { yybegin(COMMENT); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 118: break;
        case 58: 
          { yybegin(YYINITIAL); return ParserTokenTypes.GE;
          }
        case 119: break;
        case 70: 
          { yybegin(YYINITIAL); return ParserTokenTypes.CASE_KEYWORD;
          }
        case 120: break;
        case 53: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITLE;
          }
        case 121: break;
        case 57: 
          { yybegin(YYINITIAL); return ParserTokenTypes.GTGT;
          }
        case 122: break;
        case 3: 
          { yybegin(YYINITIAL); return ParserTokenTypes.IDENTIFIER;
          }
        case 123: break;
        case 87: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { yybegin(YYINITIAL); return ParserTokenTypes.PARTIAL_KEYWORD;
          }
        case 124: break;
        case 25: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SEMICOLON;
          }
        case 125: break;
        case 33: 
          { yybegin(YYINITIAL); return ParserTokenTypes.KEY_AT_SIGN;
          }
        case 126: break;
        case 40: 
          { yybegin(TAG_ATTRIBUTES); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 127: break;
        case 88: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_OPTIONAL_KEYWORD;
          }
        case 128: break;
        case 2: 
          { yybegin(YYINITIAL); return ParserTokenTypes.BAD_CHARACTER;
          }
        case 129: break;
        case 63: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITGE;
          }
        case 130: break;
        case 47: 
          { yybegin(YYINITIAL); return ParserTokenTypes.ESCAPE;
          }
        case 131: break;
        case 60: 
          { yybegin(YYINITIAL); return ParserTokenTypes.ANDAND;
          }
        case 132: break;
        case 45: 
          { yybegin(PARSERDOC); return ParserTokenTypes.COMMA;
          }
        case 133: break;
        case 66: 
          { yybegin(YYINITIAL); return ParserTokenTypes.FOR_KEYWORD;
          }
        case 134: break;
        case 42: 
          { yybegin(PARSERDOC); return ParserTokenTypes.BAD_CHARACTER;
          }
        case 135: break;
        case 1: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SHARP_COMMENT;
          }
        case 136: break;
        case 39: 
          { yybegin(ATTRIBUTE_VALUE_SQ); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 137: break;
        case 46: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITEQ;
          }
        case 138: break;
        case 44: 
          { yybegin(PARSERDOC); return ParserTokenTypes.NEW_LINE_INDENT;
          }
        case 139: break;
        case 29: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TILDE;
          }
        case 140: break;
        case 79: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RESULT_KEYWORD;
          }
        case 141: break;
        case 4: 
          { yybegin(YYINITIAL); return ParserTokenTypes.NEW_LINE;
          }
        case 142: break;
        case 71: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SELF_KEYWORD;
          }
        case 143: break;
        case 36: 
          { yybegin(C_COMMENT_START); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 144: break;
        case 90: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 8;
          { yybegin(YYINITIAL); return ParserTokenTypes.OPTIONS_KEYWORD;
          }
        case 145: break;
        case 28: 
          { yybegin(YYINITIAL); return ParserTokenTypes.PERC;
          }
        case 146: break;
        case 23: 
          { yybegin(YYINITIAL); return ParserTokenTypes.AT_SIGN;
          }
        case 147: break;
        case 17: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RPAR;
          }
        case 148: break;
        case 84: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { yybegin(YYINITIAL); return ParserTokenTypes.STATIC_KEYWORD;
          }
        case 149: break;
        case 30: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DIR;
          }
        case 150: break;
        case 13: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LT;
          }
        case 151: break;
        case 80: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SWITCH_KEYWORD;
          }
        case 152: break;
        case 37: 
          { yybegin(ATTRIBUTE_VALUE_START); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 153: break;
        case 19: 
          { yybegin(YYINITIAL); return ParserTokenTypes.AND;
          }
        case 154: break;
        case 68: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TRY_KEYWORD;
          }
        case 155: break;
        case 6: 
          { yybegin(YYINITIAL); return ParserTokenTypes.MINUS;
          }
        case 156: break;
        case 38: 
          { yybegin(ATTRIBUTE_VALUE_DQ); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 157: break;
        case 5: 
          { yybegin(YYINITIAL); return ParserTokenTypes.WHITE_SPACE;
          }
        case 158: break;
        case 78: 
          { yybegin(YYINITIAL); return ParserTokenTypes.CALLER_KEYWORD;
          }
        case 159: break;
        case 76: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { yybegin(YYINITIAL); return ParserTokenTypes.USE_KEYWORD;
          }
        case 160: break;
        case 67: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DEF_KEYWORD;
          }
        case 161: break;
        case 75: 
          { yybegin(YYINITIAL); return ParserTokenTypes.WHILE_KEYWORD;
          }
        case 162: break;
        case 16: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LPAR;
          }
        case 163: break;
        case 48: 
          { yybegin(YYINITIAL); return ParserTokenTypes.STRING_LITERAL;
          }
        case 164: break;
        case 89: 
          { yybegin(DOC_TYPE); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 165: break;
        case 32: 
          { yybegin(LINE_COMMENT); yypushback(1);
          }
        case 166: break;
        case 15: 
          { yybegin(YYINITIAL); return ParserTokenTypes.GT;
          }
        case 167: break;
        case 59: 
          { yybegin(YYINITIAL); return ParserTokenTypes.OROR;
          }
        case 168: break;
        case 54: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITLT;
          }
        case 169: break;
        case 34: 
          { return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 170: break;
        case 81: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { yybegin(YYINITIAL); return ParserTokenTypes.BASE_KEYWORD;
          }
        case 171: break;
        case 86: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { yybegin(YYINITIAL); return ParserTokenTypes.DYNAMIC_KEYWORD;
          }
        case 172: break;
        case 83: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { yybegin(YYINITIAL); return ParserTokenTypes.LOCALS_KEYWORD;
          }
        case 173: break;
        case 18: 
          { yybegin(YYINITIAL); return ParserTokenTypes.OR;
          }
        case 174: break;
        case 35: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 175: break;
        case 91: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_CONSTRUCTOR_KEYWORD;
          }
        case 176: break;
        case 10: 
          { yybegin(YYINITIAL); return ParserTokenTypes.HAT_SIGN;
          }
        case 177: break;
        case 43: 
          { yybegin(PARSERDOC); return ParserTokenTypes.IDENTIFIER;
          }
        case 178: break;
        case 31: 
          { yybegin(YYINITIAL); return ParserTokenTypes.NEW_LINE_INDENT;
          }
        case 179: break;
        case 21: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RBRACKET;
          }
        case 180: break;
        case 12: 
          { yybegin(YYINITIAL); return ParserTokenTypes.COLON;
          }
        case 181: break;
        case 65: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_START;
          }
        case 182: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
