
@CLASS
string

#	Преобразование значения переменной к целому числу
#
#	Метод преобразует значение переменной к целому числу и возвращает это число.
#	Необязательная опция default указывает число, которое будет получено в случае, если проебразование невозможно или строка состоит из пробелов, символов табуляции или перевода стороки. Значение пустой строки считается нулём. Преобразование строки, не являющейся целым числом к целому числу, считается ошибкой, например значение "1.5" - не является целым числом.
#:	parameter default type int optional
@int[default]
$result(1)
###

#	Преобразование значения переменной к вещественному числу
#
#	Метод преобразует значение переменной к вещественному числу и возвращает это число.
#	Необязательная опция default указывает число, которое будет получено в случае, если проебразование невозможно или строка состоит из пробелов, символов табуляции или перевода стороки.
#:	parameter default type double optional
@double[default]
$result(1)
###

#   Вывод числа в заданном формате
#
#   Метод выводит значение переменной в заданном формате, при этом выполняется автоматическое преобразование строки к числу. В общем случае форматная строка имеет вид %Длина.ТочностьТип
#   Существуют следующие типы:
#   d - десятичное целое число со знаком
#   u - десятичное целое число без знака
#   o - восьмеричное целое число без знака
#   x - шестнадцатиричное целое число без знака; для вывода цифр, больших 9, используются буквы a, b, c, d, e, f
#   X - шестнадцатиричное целое число без знака; для вывода цифр, больших 9, используются буквы A, B, C, D, E, F
#   f - действительное число
#:   parameter options type string
@format[options]
$result(1)
###

#   Разбиение строки на подстроки
#
#   Метод разбивает строку на подстроки относительно указанного разделителя и формирует объект класса table, содержащий либо таблицу со столбцом piece, в который помещаются части исходной строки, либо безымянную таблицу с частями исходной строки в колонках единственной записи.
#   Предусмотрены следующие опции разбиения:
#   l - разбить слева направо (по-умолчанию);
#   r - разбить справа налево;
#   h - сформировать безымянную таблицу где части исходной строки помещаются горизонтально;
#   v - сформировать таблицу со столбцом piece, где части исходной строки помещаются вертикально.
#:   parameter divider type string
#:   parameter options type string optional
@split[divider;options]
$result[^table::create[]]
###

#   Перевод строки в верхний регистр
#
#   Метод переводит строку в верхний регистр. Для его работы необходимо, чтобы была задана кодировка $request:charset. По умолчанию - UTF-8
@upper[]
###

#   Перевод строки в нижний регистр
#
#   Метод переводит строку в нижний регистр. Для его работы необходимо, чтобы была задана кодировка $request:charset. По умолчанию - UTF-8
@lower[]
###

#   Вычисление длины строки
#
#   Метод возвращает длину строки.
@length[]
$result(1)
###

#   Вывод подстроки с заданной позиции
#
#   Метод возвращает подстроку, которая начинается с позиции P и имеет длину N (если N не задано, то возвращается подстрока с позиции P до конца строки). Отсчет P начинается с нулевой позиции. Если P+N больше длины строки, то будут возвращены все символы строки, начиная с позиции P.
#:  parameter P type int
#:  parameter N type int optional
@mid[P;N]
###

#   Подстрока слева
#
#   Метод возвращает N первых символов строки. Если длина строки меньше N, то возвращается вся строка.
#:  parameter N type int
@left[N]
###

#   Подстрока справа
#
#   Метод возвращает N последних символов строки. Если длина строки меньше N, то возвращается вся строка.
#:  parameter N type int
@right[N]
###

#   Получение позиции подстроки
#
#   Метод возвращает число int - позицию первого символа подстроки в строке (начиная с нуля), или -1, если подстрока не найдена.
#:  parameter substring type string
@pos[substring]
$result(1)
###

#   Замена подстрок в строке
#
#   Метод эффективно заменяет подстроки в строке в соответствии с таблицей подстановок, работает существенно быстрее match.
#   Таблица подстановок - объект класса table, содержащий два столбца:
#   первый - подстрока, которую нужно заменить
#   второй - подстрока, которая появится на месте подстроки из первого столбца после замены.
#   Имена столбцов несущественны, можно называть их from/to, или вообще никак не называть, воспользовавшись nameless таблицей.
#:  parameter tableData type table
@replace[tableData]
###

#   Сохранение строки в файл
#
#   Метод сохраняет или добавляет строку в файл по указанному пути.
#   При этом с фрагментами строки производятся необходимые преобразования, см. «Преобразование данных».
#   ^строка.save[append;имя_файла_с_путем] - добавит строку к файлу.
#:  parameter append type string optional
#:  parameter filename type string
@save[append;filename]
###

#   Поиск подстроки по шаблону
#
#   Метод осуществляет поиск в строке по шаблону. Шаблон - это регулярное выражение, совместимое с PCRE (Perl compatible regular expressions). Частичный перевод описания PCRE приведен в Приложении 4 документации.
#   Спецсимволы в шаблоне необходимо экранировать символом ^
#   Предусмотрены следующие опции поиска:
#   i - не учитывать регистр;
#   x - игнорировать символы white space и разрешить #комментарий до конца строки;
#   s - символ $ считать концом всего текста (опция по умолчанию);
#   m - символ $ считать концом строки, но не всего текста;
#   g - найти все вхождения строки (а не только первое);
#   ' - вычислять значения столбцов prematch, match, postmatch.
#   Если в шаблоне не используются круглые скобки, то оператор возвращает булевое значение истина при обнаружении подстроки, соответствующей шаблону, или ложь, если совпадений не найдено.
#   Если в шаблоне используются круглые скобки, то вместо булевого значения оператор создает таблицу совпадений (объект класса table) со столбцами prematch, match, postmatch, 1, 2,…, n, где:
#   prematch -  столбец с подстрокой от начала строки до совпадения
#   match -     столбец с подстрокой, совпавшей с шаблоном
#   postmatch - столбец с подстрокой, следующей за совпавшей подстрокой до конца строки
#   1, 2,…, n - столбцы с подстроками, соответствующими фрагментам шаблона, заключенным в круглые скобки, n - номер открывающей круглой скобки
#   Если указана опция поиска g, будет создана таблица найденного по шаблону (по одной строке на каждое вхождение). При этом не важно, есть в шаблоне круглые скобки или нет.
#:  parameter template type string
#:  parameter options type string optional
@match[template;options]
$result[^table::create[]]
###

#   Замена подстроки, соответствующей шаблону
#
#   Метод осуществляет поиск в строке по шаблону и производит замену совпавшей подстроки на заданную. Шаблон - это регулярное выражение, совместимое с PCRE (Perl compatible regular expressions). Частичный перевод описания PCRE приведен в Приложении 4 документации. Внутри кода замены доступна автоматически создаваемая таблица совпадений match.
#   Дополнительно можно задать еще одну опцию поиска:
#   g - задает замену всех совпавших подстрок
#:  parameter template type string
#:  parameter options type string optional
#:  parameter replace type string
@match[template;options;replace]
###

#   Отсечение букв с концов строки
#
#   Метод отсекает буквы с концов строки. По умолчанию отсекаются white space символы с начала и конца строки.
#   Можно указать, откуда именно отсекать символы, задав одно из значений:
#   start - отсекать с начала;
#   both - отсекать и с начала и с конца;
#   end - отсекать с конца.
#   Также можно указать те буквы, которые необходимо отсечь.
#:  parameter position type string optional
#:  parameter symbol type string optional
@trim[position;symbol]
###