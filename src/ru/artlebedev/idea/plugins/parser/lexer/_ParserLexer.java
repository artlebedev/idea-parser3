/* The following code was generated by JFlex 1.4.3 on 3/20/11 2:19 PM */

package ru.artlebedev.idea.plugins.parser.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/20/11 2:19 PM from the specification file
 * <tt>src/ru/artlebedev/idea/plugins/parser/lexer/ParserLexer.flex</tt>
 */
public class _ParserLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PARSERDOC = 2;
  public static final int LINE_COMMENT = 4;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\22\1\4\1\44\1\5\1\3\22\0\1\22\1\77\1\17"+
    "\1\7\1\61\1\101\1\102\1\20\1\63\1\64\1\100\1\12\1\40"+
    "\1\6\1\10\1\105\1\1\11\1\1\60\1\62\1\74\1\76\1\75"+
    "\1\21\1\41\1\50\1\51\1\46\1\72\1\16\1\15\2\1\1\55"+
    "\2\1\1\47\1\1\1\56\1\52\1\53\2\1\1\43\1\54\1\42"+
    "\5\1\1\65\1\106\1\66\1\13\1\2\1\0\1\24\1\2\1\35"+
    "\1\57\1\11\1\73\1\110\1\71\1\32\2\2\1\34\1\26\1\33"+
    "\1\31\1\23\1\107\1\25\1\36\1\27\1\37\1\2\1\70\1\2"+
    "\1\30\1\2\1\67\1\103\1\14\1\104\6\0\1\44\71\0\u1f69\21"+
    "\2\45\udad9\21\u04fd\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\3\1\11\1\12\1\13\2\7\7\3\1\14"+
    "\1\3\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\3\3\1\25\1\26\1\7\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\3\2\37\1\40"+
    "\1\37\3\3\1\41\1\3\1\42\1\43\1\44\4\43"+
    "\1\45\1\0\1\46\1\0\1\47\1\0\1\50\1\0"+
    "\3\3\1\51\1\52\1\53\1\54\1\55\3\3\1\0"+
    "\4\3\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\3\3\5\0\1\3"+
    "\1\0\4\43\1\0\1\3\1\72\5\3\1\0\1\73"+
    "\2\3\1\74\3\3\5\0\1\3\4\43\3\3\1\75"+
    "\1\76\1\3\1\0\5\3\5\0\1\3\1\43\1\77"+
    "\2\43\1\3\1\100\2\3\1\0\1\101\4\3\1\0"+
    "\2\102\3\0\1\3\3\43\1\103\1\104\1\105\1\0"+
    "\4\3\2\0\2\106\1\0\1\3\3\43\1\0\1\107"+
    "\1\3\2\110\2\111\1\0\2\112\1\0\1\3\3\43"+
    "\1\14\2\113\1\41\1\0\2\114\1\43\1\115\1\43"+
    "\2\116\1\117\2\43\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u0124"+
    "\0\u01ff\0\u0124\0\u0124\0\u0124\0\u0248\0\u0124\0\u0291\0\u0124"+
    "\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447\0\u0490\0\u04d9"+
    "\0\u0522\0\u056b\0\u05b4\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124"+
    "\0\u0124\0\u0124\0\u0124\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721"+
    "\0\u076a\0\u07b3\0\u0124\0\u0124\0\u07fc\0\u0845\0\u0124\0\u0124"+
    "\0\u0124\0\u088e\0\u08d7\0\u0124\0\u0920\0\u0969\0\u09b2\0\u09fb"+
    "\0\u0a44\0\u0a8d\0\u0ad6\0\u0124\0\u0b1f\0\u0124\0\u0b68\0\u0bb1"+
    "\0\u0bfa\0\u0c43\0\u0124\0\u016d\0\u016d\0\u0c8c\0\u0124\0\u02da"+
    "\0\u0124\0\u0323\0\u0cd5\0\u0d1e\0\u0d67\0\u016d\0\u016d\0\u016d"+
    "\0\u016d\0\u016d\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d"+
    "\0\u0f66\0\u0faf\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124"+
    "\0\u0124\0\u0124\0\u0124\0\u016d\0\u016d\0\u0124\0\u0ff8\0\u1041"+
    "\0\u108a\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u0b1f"+
    "\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u016d\0\u143f"+
    "\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u016d\0\u15f5\0\u163e"+
    "\0\u016d\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d"+
    "\0\u1886\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85"+
    "\0\u1ace\0\u016d\0\u016d\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b"+
    "\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83"+
    "\0\u1ecc\0\u0b1f\0\u1f15\0\u1f5e\0\u1fa7\0\u016d\0\u1ff0\0\u2039"+
    "\0\u2082\0\u016d\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238"+
    "\0\u0124\0\u2281\0\u22ca\0\u2313\0\u235c\0\u23a5\0\u23ee\0\u2437"+
    "\0\u016d\0\u016d\0\u016d\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4"+
    "\0\u25ed\0\u2636\0\u267f\0\u0124\0\u26c8\0\u2711\0\u275a\0\u27a3"+
    "\0\u27ec\0\u2835\0\u016d\0\u287e\0\u28c7\0\u0124\0\u2910\0\u0124"+
    "\0\u2959\0\u29a2\0\u0124\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f"+
    "\0\u0124\0\u2b58\0\u0124\0\u0124\0\u2ba1\0\u2bea\0\u0124\0\u2c33"+
    "\0\u0b1f\0\u2c7c\0\u2cc5\0\u0124\0\u0b1f\0\u2d0e\0\u2d57\0\u0b1f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\2\6\1\21\1\22\1\13"+
    "\1\11\2\6\1\23\1\6\1\24\2\6\1\25\1\26"+
    "\1\27\1\30\1\31\1\6\1\13\1\32\2\6\1\5"+
    "\1\13\11\6\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\6\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\6\1\62\1\5\2\6\1\63\1\64"+
    "\1\11\1\12\1\65\1\14\1\15\1\16\1\17\1\20"+
    "\2\6\1\21\1\22\1\13\1\66\1\67\1\6\1\23"+
    "\1\6\1\24\2\6\1\25\1\26\1\70\1\30\1\71"+
    "\1\6\1\13\1\72\2\6\1\5\1\13\11\6\1\73"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\6\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\6"+
    "\1\62\1\74\2\75\1\7\1\10\4\74\1\75\3\74"+
    "\2\75\3\74\1\76\1\77\3\75\1\100\1\75\1\101"+
    "\3\75\1\102\2\75\1\103\1\74\2\75\2\74\12\75"+
    "\10\74\4\75\13\74\2\75\4\4\1\0\104\4\112\0"+
    "\2\6\3\0\1\104\2\0\1\6\3\0\2\6\4\0"+
    "\15\6\2\0\2\6\2\0\12\6\10\0\4\6\13\0"+
    "\2\6\4\0\1\10\111\0\1\11\14\0\1\11\67\0"+
    "\2\6\3\0\1\104\2\0\1\6\3\0\2\6\4\0"+
    "\15\6\2\0\2\6\2\0\12\6\10\0\4\6\13\0"+
    "\1\105\1\6\7\0\1\106\3\0\2\107\44\0\7\107"+
    "\21\0\3\110\2\0\12\110\1\111\71\110\3\112\2\0"+
    "\13\112\1\111\70\112\1\0\2\6\3\0\1\104\2\0"+
    "\1\113\3\0\2\6\4\0\15\6\2\0\2\6\2\0"+
    "\12\6\10\0\4\6\13\0\2\6\1\0\2\6\3\0"+
    "\1\104\2\0\1\6\3\0\2\6\4\0\2\6\1\114"+
    "\12\6\2\0\2\6\2\0\12\6\10\0\1\6\1\115"+
    "\2\6\13\0\2\6\1\0\2\6\3\0\1\104\2\0"+
    "\1\6\3\0\2\6\4\0\13\6\1\116\1\6\2\0"+
    "\2\6\2\0\12\6\10\0\3\6\1\117\13\0\2\6"+
    "\1\0\2\6\3\0\1\104\2\0\1\120\3\0\2\6"+
    "\4\0\15\6\2\0\2\6\2\0\12\6\10\0\4\6"+
    "\13\0\2\6\1\0\2\6\3\0\1\104\2\0\1\121"+
    "\3\0\2\6\4\0\4\6\1\122\10\6\2\0\2\6"+
    "\2\0\12\6\10\0\4\6\13\0\2\6\1\0\2\6"+
    "\3\0\1\104\2\0\1\6\3\0\2\6\4\0\1\6"+
    "\1\123\13\6\2\0\2\6\2\0\12\6\10\0\4\6"+
    "\13\0\2\6\1\0\2\6\3\0\1\104\2\0\1\124"+
    "\3\0\2\6\4\0\15\6\2\0\2\6\2\0\12\6"+
    "\10\0\1\125\3\6\13\0\2\6\36\0\1\126\53\0"+
    "\2\6\3\0\1\104\2\0\1\127\3\0\2\6\4\0"+
    "\15\6\2\0\2\6\2\0\12\6\10\0\4\6\13\0"+
    "\2\6\1\0\2\6\3\0\1\104\2\0\1\6\3\0"+
    "\2\6\4\0\15\6\2\0\2\6\2\0\12\6\10\0"+
    "\1\6\1\130\2\6\13\0\2\6\1\0\2\6\3\0"+
    "\1\104\2\0\1\6\3\0\1\6\1\131\4\0\15\6"+
    "\2\0\2\6\2\0\12\6\10\0\4\6\13\0\2\6"+
    "\1\0\2\6\3\0\1\104\2\0\1\6\3\0\2\6"+
    "\4\0\6\6\1\132\6\6\2\0\2\6\2\0\12\6"+
    "\10\0\4\6\13\0\2\6\74\0\1\133\1\0\1\134"+
    "\107\0\1\135\1\136\110\0\1\137\110\0\1\140\4\0"+
    "\1\141\107\0\1\142\111\0\1\143\6\0\2\6\3\0"+
    "\1\104\2\0\1\144\3\0\2\6\4\0\4\6\1\145"+
    "\10\6\2\0\2\6\2\0\12\6\10\0\4\6\13\0"+
    "\2\6\4\0\1\64\164\0\1\146\35\0\1\11\14\0"+
    "\1\66\67\0\2\6\3\0\1\104\2\0\1\6\3\0"+
    "\2\6\4\0\1\6\1\147\13\6\2\0\2\6\2\0"+
    "\12\6\10\0\4\6\13\0\2\6\1\0\2\6\3\0"+
    "\1\104\2\0\1\121\3\0\2\6\4\0\4\6\1\122"+
    "\1\6\1\150\6\6\2\0\2\6\2\0\12\6\10\0"+
    "\4\6\13\0\2\6\1\0\2\6\3\0\1\104\2\0"+
    "\1\124\3\0\2\6\4\0\4\6\1\151\10\6\2\0"+
    "\2\6\2\0\12\6\10\0\1\125\3\6\13\0\2\6"+
    "\36\0\1\152\3\0\1\153\3\0\1\154\2\0\1\155"+
    "\1\156\37\0\2\6\3\0\1\104\2\0\1\127\3\0"+
    "\2\6\4\0\5\6\1\157\7\6\2\0\2\6\2\0"+
    "\12\6\10\0\4\6\13\0\2\6\1\0\2\75\3\0"+
    "\1\160\2\0\1\75\3\0\2\75\4\0\15\75\2\0"+
    "\2\75\2\0\12\75\10\0\4\75\13\0\2\75\1\0"+
    "\2\75\3\0\1\160\2\0\1\75\3\0\2\75\4\0"+
    "\1\75\1\161\13\75\2\0\2\75\2\0\12\75\10\0"+
    "\4\75\13\0\2\75\1\0\2\75\3\0\1\160\2\0"+
    "\1\75\3\0\2\75\4\0\5\75\1\162\7\75\2\0"+
    "\2\75\2\0\12\75\10\0\4\75\13\0\2\75\1\0"+
    "\2\75\3\0\1\160\2\0\1\75\3\0\2\75\4\0"+
    "\1\163\14\75\2\0\2\75\2\0\12\75\10\0\4\75"+
    "\13\0\2\75\1\0\2\75\3\0\1\160\2\0\1\75"+
    "\3\0\2\75\4\0\6\75\1\164\6\75\2\0\2\75"+
    "\2\0\12\75\10\0\4\75\13\0\2\75\1\0\1\165"+
    "\13\0\2\165\23\0\2\165\2\0\11\165\13\0\1\165"+
    "\17\0\2\6\3\0\1\104\2\0\1\6\3\0\2\6"+
    "\4\0\13\6\1\166\1\6\2\0\2\6\2\0\12\6"+
    "\10\0\4\6\13\0\2\6\1\0\2\6\3\0\1\104"+
    "\2\0\1\6\3\0\2\6\4\0\5\6\1\167\7\6"+
    "\2\0\2\6\2\0\12\6\10\0\4\6\13\0\2\6"+
    "\1\0\2\6\3\0\1\104\2\0\1\6\3\0\2\6"+
    "\4\0\2\6\1\170\12\6\2\0\2\6\2\0\12\6"+
    "\10\0\4\6\13\0\2\6\1\0\2\6\3\0\1\104"+
    "\2\0\1\6\3\0\2\6\4\0\11\6\1\171\1\6"+
    "\1\172\1\6\2\0\2\6\2\0\12\6\10\0\4\6"+
    "\13\0\2\6\1\0\2\6\3\0\1\104\2\0\1\6"+
    "\3\0\2\6\4\0\11\6\1\173\3\6\2\0\2\6"+
    "\2\0\12\6\10\0\4\6\13\0\2\6\1\0\2\6"+
    "\3\0\1\104\2\0\1\6\3\0\2\6\4\0\7\6"+
    "\1\174\5\6\2\0\2\6\2\0\12\6\10\0\4\6"+
    "\13\0\2\6\27\0\1\175\62\0\2\6\3\0\1\104"+
    "\2\0\1\6\3\0\2\6\4\0\15\6\2\0\2\6"+
    "\2\0\12\6\10\0\3\6\1\176\13\0\2\6\1\0"+
    "\2\6\3\0\1\104\2\0\1\6\3\0\2\6\4\0"+
    "\7\6\1\177\5\6\2\0\2\6\2\0\12\6\10\0"+
    "\4\6\13\0\2\6\1\0\2\6\3\0\1\104\2\0"+
    "\1\6\3\0\1\200\1\6\4\0\15\6\2\0\2\6"+
    "\2\0\12\6\10\0\4\6\13\0\2\6\1\0\2\6"+
    "\3\0\1\104\2\0\1\6\3\0\2\6\4\0\2\6"+
    "\1\201\12\6\2\0\2\6\2\0\12\6\10\0\4\6"+
    "\13\0\2\6\1\0\2\6\3\0\1\104\2\0\1\6"+
    "\3\0\2\6\4\0\2\6\1\202\12\6\2\0\2\6"+
    "\2\0\12\6\10\0\4\6\13\0\2\6\1\0\2\6"+
    "\3\0\1\104\2\0\1\6\3\0\2\6\4\0\12\6"+
    "\1\203\2\6\2\0\2\6\2\0\12\6\10\0\4\6"+
    "\13\0\2\6\1\0\2\6\3\0\1\104\2\0\1\6"+
    "\3\0\2\6\4\0\1\6\1\204\13\6\2\0\2\6"+
    "\2\0\12\6\10\0\4\6\13\0\2\6\27\0\1\205"+
    "\124\0\1\206\114\0\1\207\111\0\1\210\113\0\1\211"+
    "\36\0\2\6\3\0\1\104\2\0\1\6\3\0\2\6"+
    "\4\0\10\6\1\212\4\6\2\0\2\6\2\0\12\6"+
    "\10\0\4\6\13\0\2\6\1\0\2\75\3\0\1\160"+
    "\2\0\1\75\3\0\2\75\4\0\2\75\1\213\12\75"+
    "\2\0\2\75\2\0\12\75\10\0\4\75\13\0\2\75"+
    "\1\0\2\75\3\0\1\160\2\0\1\75\3\0\2\75"+
    "\4\0\1\214\14\75\2\0\2\75\2\0\12\75\10\0"+
    "\4\75\13\0\2\75\1\0\2\75\3\0\1\160\2\0"+
    "\1\75\3\0\2\75\4\0\4\75\1\215\10\75\2\0"+
    "\2\75\2\0\12\75\10\0\4\75\13\0\2\75\1\0"+
    "\2\75\3\0\1\160\2\0\1\75\3\0\2\75\4\0"+
    "\10\75\1\216\4\75\2\0\2\75\2\0\12\75\10\0"+
    "\4\75\13\0\2\75\1\0\1\107\13\0\2\107\23\0"+
    "\2\107\2\0\11\107\13\0\1\107\17\0\2\6\3\0"+
    "\1\104\2\0\1\6\3\0\2\6\4\0\14\6\1\217"+
    "\2\0\2\6\2\0\12\6\10\0\4\6\13\0\2\6"+
    "\1\0\2\6\3\0\1\104\2\0\1\6\3\0\2\6"+
    "\4\0\6\6\1\220\6\6\2\0\2\6\2\0\12\6"+
    "\10\0\4\6\13\0\2\6\1\0\2\6\3\0\1\104"+
    "\2\0\1\6\3\0\2\6\4\0\11\6\1\221\3\6"+
    "\2\0\2\6\2\0\12\6\10\0\4\6\13\0\2\6"+
    "\1\0\2\6\3\0\1\104\2\0\1\222\3\0\2\6"+
    "\4\0\15\6\2\0\2\6\2\0\12\6\10\0\4\6"+
    "\13\0\2\6\1\0\2\6\3\0\1\104\2\0\1\6"+
    "\3\0\2\6\4\0\15\6\2\0\2\6\2\0\12\6"+
    "\10\0\3\6\1\223\13\0\2\6\1\0\2\6\3\0"+
    "\1\104\2\0\1\6\3\0\2\6\4\0\4\6\1\224"+
    "\10\6\2\0\2\6\2\0\12\6\10\0\4\6\13\0"+
    "\2\6\24\0\1\225\65\0\2\6\3\0\1\104\2\0"+
    "\1\6\3\0\2\6\4\0\11\6\1\226\3\6\2\0"+
    "\2\6\2\0\12\6\10\0\4\6\13\0\2\6\1\0"+
    "\2\6\3\0\1\104\2\0\1\6\3\0\2\6\4\0"+
    "\15\6\2\0\2\6\2\0\2\6\1\227\7\6\10\0"+
    "\4\6\13\0\2\6\1\0\2\6\3\0\1\104\2\0"+
    "\1\6\3\0\2\6\4\0\4\6\1\230\10\6\2\0"+
    "\2\6\2\0\12\6\10\0\4\6\13\0\2\6\1\0"+
    "\2\6\3\0\1\104\2\0\1\6\3\0\2\6\4\0"+
    "\1\6\1\231\13\6\2\0\2\6\2\0\12\6\10\0"+
    "\4\6\13\0\2\6\1\0\2\6\3\0\1\104\2\0"+
    "\1\6\3\0\2\6\4\0\4\6\1\232\10\6\2\0"+
    "\2\6\2\0\12\6\10\0\4\6\13\0\2\6\24\0"+
    "\1\233\102\0\1\234\142\0\1\235\103\0\1\236\121\0"+
    "\1\237\35\0\2\6\3\0\1\104\2\0\1\6\3\0"+
    "\2\6\4\0\1\6\1\240\13\6\2\0\2\6\2\0"+
    "\12\6\10\0\4\6\13\0\2\6\1\0\2\75\3\0"+
    "\1\160\2\0\1\75\3\0\2\75\4\0\1\75\1\241"+
    "\13\75\2\0\2\75\2\0\12\75\10\0\4\75\13\0"+
    "\2\75\1\0\2\75\3\0\1\160\2\0\1\242\3\0"+
    "\2\75\4\0\15\75\2\0\2\75\2\0\12\75\10\0"+
    "\4\75\13\0\2\75\1\0\2\75\3\0\1\160\2\0"+
    "\1\75\3\0\2\75\4\0\7\75\1\243\5\75\2\0"+
    "\2\75\2\0\12\75\10\0\4\75\13\0\2\75\1\0"+
    "\2\75\3\0\1\160\2\0\1\75\3\0\2\75\4\0"+
    "\13\75\1\244\1\75\2\0\2\75\2\0\12\75\10\0"+
    "\4\75\13\0\2\75\1\0\2\6\3\0\1\104\2\0"+
    "\1\6\3\0\2\6\4\0\11\6\1\245\3\6\2\0"+
    "\2\6\2\0\12\6\10\0\4\6\13\0\2\6\1\0"+
    "\2\6\3\0\1\104\2\0\1\6\3\0\2\6\4\0"+
    "\15\6\2\0\2\6\2\0\12\6\10\0\1\246\3\6"+
    "\13\0\2\6\1\0\2\6\3\0\1\104\2\0\1\247"+
    "\3\0\2\6\4\0\15\6\2\0\2\6\2\0\12\6"+
    "\10\0\4\6\13\0\2\6\1\0\2\6\3\0\1\104"+
    "\2\0\1\6\3\0\2\6\4\0\12\6\1\250\2\6"+
    "\2\0\2\6\2\0\12\6\10\0\4\6\13\0\2\6"+
    "\27\0\1\251\62\0\2\6\3\0\1\104\2\0\1\252"+
    "\3\0\2\6\4\0\15\6\2\0\2\6\2\0\12\6"+
    "\10\0\4\6\13\0\2\6\1\0\2\6\3\0\1\104"+
    "\2\0\1\6\3\0\2\6\4\0\15\6\2\0\1\253"+
    "\1\6\2\0\12\6\10\0\4\6\13\0\2\6\1\0"+
    "\2\6\3\0\1\104\2\0\1\6\3\0\2\6\4\0"+
    "\7\6\1\254\5\6\2\0\2\6\2\0\12\6\10\0"+
    "\4\6\13\0\2\6\1\0\2\6\3\0\1\104\2\0"+
    "\1\6\3\0\2\6\4\0\11\6\1\255\3\6\2\0"+
    "\2\6\2\0\12\6\10\0\4\6\13\0\2\6\1\0"+
    "\2\6\3\0\1\104\2\0\1\6\3\0\2\6\4\0"+
    "\7\6\1\256\5\6\2\0\2\6\2\0\12\6\10\0"+
    "\4\6\13\0\2\6\27\0\1\257\64\0\1\260\2\261"+
    "\36\0\2\261\106\0\1\262\63\0\1\263\147\0\1\264"+
    "\34\0\2\6\3\0\1\104\2\0\1\6\3\0\2\6"+
    "\4\0\3\6\1\265\11\6\2\0\2\6\2\0\12\6"+
    "\10\0\4\6\13\0\2\6\1\0\2\75\3\0\1\160"+
    "\2\0\1\75\3\0\2\75\4\0\3\75\1\266\11\75"+
    "\2\0\2\75\2\0\12\75\10\0\4\75\13\0\2\75"+
    "\1\0\2\75\3\0\1\160\2\0\1\75\3\0\2\75"+
    "\4\0\6\75\1\267\6\75\2\0\2\75\2\0\12\75"+
    "\10\0\4\75\13\0\2\75\1\0\2\75\3\0\1\160"+
    "\2\0\1\75\3\0\2\75\4\0\4\75\1\270\10\75"+
    "\2\0\2\75\2\0\12\75\10\0\4\75\13\0\2\75"+
    "\1\0\2\6\3\0\1\104\2\0\1\6\3\0\2\6"+
    "\4\0\4\6\1\271\10\6\2\0\2\6\2\0\12\6"+
    "\10\0\4\6\13\0\2\6\1\0\2\6\3\0\1\104"+
    "\2\0\1\6\3\0\2\6\4\0\2\6\1\272\12\6"+
    "\2\0\2\6\2\0\12\6\10\0\4\6\13\0\2\6"+
    "\1\0\2\6\3\0\1\104\2\0\1\6\3\0\2\6"+
    "\4\0\15\6\2\0\2\6\2\0\12\6\10\0\1\6"+
    "\1\273\2\6\13\0\2\6\32\0\1\274\57\0\2\6"+
    "\3\0\1\104\2\0\1\6\3\0\2\6\4\0\15\6"+
    "\2\0\2\6\2\0\1\6\1\275\10\6\10\0\4\6"+
    "\13\0\2\6\1\0\2\6\3\0\1\104\2\0\1\6"+
    "\3\0\2\6\4\0\1\6\1\276\13\6\2\0\2\6"+
    "\2\0\12\6\10\0\4\6\13\0\2\6\1\0\2\6"+
    "\3\0\1\104\2\0\1\6\3\0\2\6\4\0\13\6"+
    "\1\277\1\6\2\0\2\6\2\0\12\6\10\0\4\6"+
    "\13\0\2\6\1\0\2\6\3\0\1\104\2\0\1\6"+
    "\3\0\2\6\4\0\12\6\1\300\2\6\2\0\2\6"+
    "\2\0\12\6\10\0\4\6\13\0\2\6\32\0\1\301"+
    "\62\0\1\261\147\0\1\302\50\0\1\303\2\304\36\0"+
    "\2\304\115\0\1\305\37\0\2\6\3\0\1\104\2\0"+
    "\1\6\3\0\2\6\4\0\7\6\1\306\5\6\2\0"+
    "\2\6\2\0\12\6\10\0\4\6\13\0\2\6\1\0"+
    "\2\75\3\0\1\160\2\0\1\307\3\0\2\75\4\0"+
    "\15\75\2\0\2\75\2\0\12\75\10\0\4\75\13\0"+
    "\2\75\1\0\2\75\3\0\1\160\2\0\1\75\3\0"+
    "\2\75\4\0\10\75\1\310\4\75\2\0\2\75\2\0"+
    "\12\75\10\0\4\75\13\0\2\75\1\0\2\75\3\0"+
    "\1\160\2\0\1\75\3\0\2\75\4\0\2\75\1\311"+
    "\12\75\2\0\2\75\2\0\12\75\10\0\4\75\13\0"+
    "\2\75\35\0\1\312\54\0\2\6\3\0\1\104\2\0"+
    "\1\6\3\0\2\6\4\0\15\6\2\0\2\6\2\0"+
    "\6\6\1\313\3\6\10\0\4\6\13\0\2\6\1\0"+
    "\2\6\3\0\1\104\2\0\1\6\3\0\2\6\4\0"+
    "\11\6\1\314\3\6\2\0\2\6\2\0\12\6\10\0"+
    "\4\6\13\0\2\6\1\0\2\6\1\315\2\316\1\104"+
    "\2\0\1\6\3\0\2\6\4\0\15\6\2\0\2\6"+
    "\2\316\12\6\10\0\4\6\13\0\2\6\1\0\2\6"+
    "\1\317\2\320\1\104\2\0\1\6\3\0\2\6\4\0"+
    "\15\6\2\0\2\6\2\320\12\6\10\0\4\6\13\0"+
    "\2\6\35\0\1\321\56\0\1\322\2\323\36\0\2\323"+
    "\47\0\1\304\162\0\1\324\33\0\2\6\3\0\1\104"+
    "\2\0\1\6\3\0\2\6\4\0\12\6\1\325\2\6"+
    "\2\0\2\6\2\0\12\6\10\0\4\6\13\0\2\6"+
    "\1\0\2\75\3\0\1\160\2\0\1\75\3\0\2\75"+
    "\4\0\4\75\1\326\10\75\2\0\2\75\2\0\12\75"+
    "\10\0\4\75\13\0\2\75\1\0\2\75\3\0\1\160"+
    "\2\0\1\75\3\0\2\75\4\0\1\75\1\327\13\75"+
    "\2\0\2\75\2\0\12\75\10\0\4\75\13\0\2\75"+
    "\1\0\2\75\3\0\1\160\2\0\1\75\3\0\2\75"+
    "\4\0\14\75\1\330\2\0\2\75\2\0\12\75\10\0"+
    "\4\75\13\0\2\75\60\0\1\331\31\0\2\6\1\332"+
    "\2\333\1\104\2\0\1\6\3\0\2\6\4\0\15\6"+
    "\2\0\2\6\2\333\12\6\10\0\4\6\13\0\2\6"+
    "\4\0\1\316\110\0\1\320\164\0\1\334\34\0\1\323"+
    "\147\0\1\335\46\0\2\6\1\336\2\337\1\104\2\0"+
    "\1\6\3\0\2\6\4\0\15\6\2\0\2\6\2\337"+
    "\12\6\10\0\4\6\13\0\2\6\1\0\2\75\3\0"+
    "\1\160\2\0\1\340\3\0\2\75\4\0\15\75\2\0"+
    "\2\75\2\0\12\75\10\0\4\75\13\0\2\75\1\0"+
    "\2\75\3\0\1\160\2\0\1\75\3\0\2\75\4\0"+
    "\11\75\1\341\3\75\2\0\2\75\2\0\12\75\10\0"+
    "\4\75\13\0\2\75\1\0\2\75\3\0\1\160\2\0"+
    "\1\75\3\0\2\75\4\0\12\75\1\342\2\75\2\0"+
    "\2\75\2\0\12\75\10\0\4\75\13\0\2\75\4\0"+
    "\1\333\107\0\1\343\2\344\36\0\2\344\47\0\1\337"+
    "\105\0\2\75\3\0\1\160\2\0\1\75\3\0\2\75"+
    "\4\0\2\75\1\345\12\75\2\0\2\75\2\0\12\75"+
    "\10\0\4\75\13\0\2\75\1\0\2\75\3\0\1\160"+
    "\2\0\1\75\3\0\2\75\4\0\4\75\1\346\10\75"+
    "\2\0\2\75\2\0\12\75\10\0\4\75\13\0\2\75"+
    "\4\0\1\344\105\0\2\75\3\0\1\160\2\0\1\75"+
    "\3\0\2\75\4\0\6\75\1\347\6\75\2\0\2\75"+
    "\2\0\12\75\10\0\4\75\13\0\2\75\1\0\2\75"+
    "\3\0\1\160\2\0\1\75\3\0\2\75\4\0\2\75"+
    "\1\350\12\75\2\0\2\75\2\0\12\75\10\0\4\75"+
    "\13\0\2\75";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\2\1\1\11\1\1\3\11\1\1"+
    "\1\11\1\1\1\11\13\1\10\11\7\1\2\11\2\1"+
    "\3\11\2\1\1\11\7\1\1\11\1\1\1\11\4\1"+
    "\1\11\1\0\1\1\1\0\1\11\1\0\1\11\1\0"+
    "\13\1\1\0\4\1\11\11\2\1\1\11\3\1\5\0"+
    "\1\1\1\0\4\1\1\0\7\1\1\0\7\1\5\0"+
    "\13\1\1\0\5\1\5\0\11\1\1\0\5\1\1\0"+
    "\1\1\1\11\3\0\7\1\1\0\4\1\2\0\1\1"+
    "\1\11\1\0\4\1\1\0\3\1\1\11\1\1\1\11"+
    "\1\0\1\1\1\11\1\0\4\1\1\11\1\1\2\11"+
    "\1\0\1\1\1\11\4\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public _ParserLexer() {
      this((java.io.Reader) null);
    }

    public _ParserLexer(boolean highlightMode) {
      this((java.io.Reader) null);
    }


  public _ParserLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ParserLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 52: 
          { yybegin(YYINITIAL); return ParserTokenTypes.XOR;
          }
        case 81: break;
        case 63: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_TYPE_KEYWORD;
          }
        case 82: break;
        case 56: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITGT;
          }
        case 83: break;
        case 29: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DIV;
          }
        case 84: break;
        case 14: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DOLLAR;
          }
        case 85: break;
        case 79: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_PARAM_KEYWORD;
          }
        case 86: break;
        case 7: 
          { yybegin(YYINITIAL); return ParserTokenTypes.USELESS_CHAR;
          }
        case 87: break;
        case 51: 
          { yybegin(YYINITIAL); return ParserTokenTypes.NE;
          }
        case 88: break;
        case 24: 
          { yybegin(YYINITIAL); return ParserTokenTypes.MULT;
          }
        case 89: break;
        case 11: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RBRACE;
          }
        case 90: break;
        case 71: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DEFAULT_KEYWORD;
          }
        case 91: break;
        case 41: 
          { yybegin(YYINITIAL); return ParserTokenTypes.IS_KEYWORD;
          }
        case 92: break;
        case 47: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LE;
          }
        case 93: break;
        case 42: 
          { yybegin(YYINITIAL); return ParserTokenTypes.IF_KEYWORD;
          }
        case 94: break;
        case 9: 
          { yybegin(YYINITIAL); return ParserTokenTypes.PLUS;
          }
        case 95: break;
        case 8: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DOT;
          }
        case 96: break;
        case 50: 
          { yybegin(YYINITIAL); return ParserTokenTypes.EQEQ;
          }
        case 97: break;
        case 18: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LBRACKET;
          }
        case 98: break;
        case 74: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { yybegin(YYINITIAL); return ParserTokenTypes.CLASS_KEYWORD;
          }
        case 99: break;
        case 64: 
          { yybegin(YYINITIAL); return ParserTokenTypes.THROW_KEYWORD;
          }
        case 100: break;
        case 20: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LBRACE;
          }
        case 101: break;
        case 43: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITNE;
          }
        case 102: break;
        case 46: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LTLT;
          }
        case 103: break;
        case 23: 
          { yybegin(YYINITIAL); return ParserTokenTypes.EXCL;
          }
        case 104: break;
        case 49: 
          { yybegin(YYINITIAL); return ParserTokenTypes.GE;
          }
        case 105: break;
        case 61: 
          { yybegin(YYINITIAL); return ParserTokenTypes.CASE_KEYWORD;
          }
        case 106: break;
        case 44: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITLE;
          }
        case 107: break;
        case 48: 
          { yybegin(YYINITIAL); return ParserTokenTypes.GTGT;
          }
        case 108: break;
        case 3: 
          { yybegin(YYINITIAL); return ParserTokenTypes.IDENTIFIER;
          }
        case 109: break;
        case 75: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { yybegin(YYINITIAL); return ParserTokenTypes.PARTIAL_KEYWORD;
          }
        case 110: break;
        case 15: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SEMICOLON;
          }
        case 111: break;
        case 33: 
          { yybegin(YYINITIAL); return ParserTokenTypes.KEY_AT_SIGN;
          }
        case 112: break;
        case 77: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_OPTIONAL_KEYWORD;
          }
        case 113: break;
        case 2: 
          { yybegin(YYINITIAL); return ParserTokenTypes.BAD_CHARACTER;
          }
        case 114: break;
        case 55: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITGE;
          }
        case 115: break;
        case 39: 
          { yybegin(YYINITIAL); return ParserTokenTypes.ESCAPE;
          }
        case 116: break;
        case 53: 
          { yybegin(YYINITIAL); return ParserTokenTypes.ANDAND;
          }
        case 117: break;
        case 37: 
          { yybegin(PARSERDOC); return ParserTokenTypes.COMMA;
          }
        case 118: break;
        case 60: 
          { yybegin(YYINITIAL); return ParserTokenTypes.FOR_KEYWORD;
          }
        case 119: break;
        case 34: 
          { yybegin(PARSERDOC); return ParserTokenTypes.BAD_CHARACTER;
          }
        case 120: break;
        case 1: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SHARP_COMMENT;
          }
        case 121: break;
        case 38: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITEQ;
          }
        case 122: break;
        case 36: 
          { yybegin(PARSERDOC); return ParserTokenTypes.NEW_LINE_INDENT;
          }
        case 123: break;
        case 28: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TILDE;
          }
        case 124: break;
        case 67: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RESULT_KEYWORD;
          }
        case 125: break;
        case 4: 
          { yybegin(YYINITIAL); return ParserTokenTypes.NEW_LINE;
          }
        case 126: break;
        case 62: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SELF_KEYWORD;
          }
        case 127: break;
        case 78: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 8;
          { yybegin(YYINITIAL); return ParserTokenTypes.OPTIONS_KEYWORD;
          }
        case 128: break;
        case 25: 
          { yybegin(YYINITIAL); return ParserTokenTypes.PERC;
          }
        case 129: break;
        case 12: 
          { yybegin(YYINITIAL); return ParserTokenTypes.AT_SIGN;
          }
        case 130: break;
        case 17: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RPAR;
          }
        case 131: break;
        case 73: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { yybegin(YYINITIAL); return ParserTokenTypes.STATIC_KEYWORD;
          }
        case 132: break;
        case 30: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DIR;
          }
        case 133: break;
        case 21: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LT;
          }
        case 134: break;
        case 69: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SWITCH_KEYWORD;
          }
        case 135: break;
        case 26: 
          { yybegin(YYINITIAL); return ParserTokenTypes.AND;
          }
        case 136: break;
        case 58: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TRY_KEYWORD;
          }
        case 137: break;
        case 6: 
          { yybegin(YYINITIAL); return ParserTokenTypes.MINUS;
          }
        case 138: break;
        case 5: 
          { yybegin(YYINITIAL); return ParserTokenTypes.WHITE_SPACE;
          }
        case 139: break;
        case 68: 
          { yybegin(YYINITIAL); return ParserTokenTypes.CALLER_KEYWORD;
          }
        case 140: break;
        case 66: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { yybegin(YYINITIAL); return ParserTokenTypes.USE_KEYWORD;
          }
        case 141: break;
        case 59: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DEF_KEYWORD;
          }
        case 142: break;
        case 65: 
          { yybegin(YYINITIAL); return ParserTokenTypes.WHILE_KEYWORD;
          }
        case 143: break;
        case 16: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LPAR;
          }
        case 144: break;
        case 40: 
          { yybegin(YYINITIAL); return ParserTokenTypes.STRING_LITERAL;
          }
        case 145: break;
        case 32: 
          { yybegin(LINE_COMMENT); yypushback(1);
          }
        case 146: break;
        case 22: 
          { yybegin(YYINITIAL); return ParserTokenTypes.GT;
          }
        case 147: break;
        case 54: 
          { yybegin(YYINITIAL); return ParserTokenTypes.OROR;
          }
        case 148: break;
        case 45: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITLT;
          }
        case 149: break;
        case 70: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { yybegin(YYINITIAL); return ParserTokenTypes.BASE_KEYWORD;
          }
        case 150: break;
        case 76: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { yybegin(YYINITIAL); return ParserTokenTypes.DYNAMIC_KEYWORD;
          }
        case 151: break;
        case 72: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { yybegin(YYINITIAL); return ParserTokenTypes.LOCALS_KEYWORD;
          }
        case 152: break;
        case 27: 
          { yybegin(YYINITIAL); return ParserTokenTypes.OR;
          }
        case 153: break;
        case 80: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_CONSTRUCTOR_KEYWORD;
          }
        case 154: break;
        case 10: 
          { yybegin(YYINITIAL); return ParserTokenTypes.HAT_SIGN;
          }
        case 155: break;
        case 35: 
          { yybegin(PARSERDOC); return ParserTokenTypes.IDENTIFIER;
          }
        case 156: break;
        case 31: 
          { yybegin(YYINITIAL); return ParserTokenTypes.NEW_LINE_INDENT;
          }
        case 157: break;
        case 19: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RBRACKET;
          }
        case 158: break;
        case 13: 
          { yybegin(YYINITIAL); return ParserTokenTypes.COLON;
          }
        case 159: break;
        case 57: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_START;
          }
        case 160: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
