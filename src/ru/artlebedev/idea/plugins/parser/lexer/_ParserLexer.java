/* The following code was generated by JFlex 1.4.3 on 3/30/11 1:24 PM */

package ru.artlebedev.idea.plugins.parser.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.xml.XmlTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/30/11 1:24 PM from the specification file
 * <tt>src/ru/artlebedev/idea/plugins/parser/lexer/ParserLexer.flex</tt>
 */
public class _ParserLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ATTRIBUTE_VALUE_START = 4;
  public static final int PARSERDOC = 10;
  public static final int ATTRIBUTE_VALUE_SQ = 8;
  public static final int LINE_COMMENT = 12;
  public static final int YYINITIAL = 0;
  public static final int ATTRIBUTE_VALUE_DQ = 6;
  public static final int TAG_ATTRIBUTES = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\4\1\54\1\5\1\3\22\0\1\26\1\102\1\20"+
    "\1\7\1\67\1\104\1\105\1\21\1\71\1\72\1\103\1\12\1\44"+
    "\1\6\1\10\1\46\1\1\11\1\1\23\1\70\1\45\1\50\1\47"+
    "\1\24\1\51\1\57\1\60\1\55\1\100\1\17\1\15\2\16\1\64"+
    "\2\16\1\56\1\16\1\65\1\61\1\62\2\16\1\53\1\63\1\52"+
    "\5\16\1\73\1\110\1\74\1\13\1\2\1\0\1\30\1\2\1\41"+
    "\1\66\1\11\1\101\1\112\1\77\1\36\2\2\1\40\1\32\1\37"+
    "\1\35\1\27\1\111\1\31\1\42\1\33\1\43\1\2\1\76\1\2"+
    "\1\34\1\2\1\75\1\106\1\14\1\107\6\0\1\54\44\0\1\22"+
    "\12\0\1\22\4\0\1\22\5\0\27\22\1\0\1\25\17\22\1\25"+
    "\1\22\15\25\1\24\u013f\25\31\24\162\25\4\24\14\25\16\24\5\25"+
    "\11\24\1\25\213\24\1\25\13\24\1\25\1\24\3\25\1\24\1\25"+
    "\1\24\24\25\1\24\54\25\1\24\46\25\1\24\5\25\4\24\202\25"+
    "\10\24\105\25\1\24\46\25\2\24\2\25\6\24\20\25\41\24\46\25"+
    "\2\24\1\25\7\24\47\25\110\24\33\25\5\24\3\25\56\24\32\25"+
    "\5\24\13\25\43\24\2\25\1\24\143\25\1\24\1\25\17\24\2\25"+
    "\7\24\2\25\12\24\3\25\2\24\1\25\20\24\1\25\1\24\36\25"+
    "\35\24\3\25\60\24\46\25\13\24\1\25\u0152\24\66\25\3\24\1\25"+
    "\22\24\1\25\7\24\12\25\43\24\10\25\2\24\2\25\2\24\26\25"+
    "\1\24\7\25\1\24\1\25\3\24\4\25\3\24\1\25\36\24\2\25"+
    "\1\24\3\25\16\24\2\25\23\24\6\25\4\24\2\25\2\24\26\25"+
    "\1\24\7\25\1\24\2\25\1\24\2\25\1\24\2\25\37\24\4\25"+
    "\1\24\1\25\23\24\3\25\20\24\11\25\1\24\3\25\1\24\26\25"+
    "\1\24\7\25\1\24\2\25\1\24\5\25\3\24\1\25\22\24\1\25"+
    "\17\24\2\25\43\24\10\25\2\24\2\25\2\24\26\25\1\24\7\25"+
    "\1\24\2\25\1\24\5\25\3\24\1\25\36\24\2\25\1\24\3\25"+
    "\17\24\1\25\21\24\1\25\1\24\6\25\3\24\3\25\1\24\4\25"+
    "\3\24\2\25\1\24\1\25\1\24\2\25\3\24\2\25\3\24\3\25"+
    "\3\24\10\25\1\24\3\25\113\24\10\25\1\24\3\25\1\24\27\25"+
    "\1\24\12\25\1\24\5\25\46\24\2\25\43\24\10\25\1\24\3\25"+
    "\1\24\27\25\1\24\12\25\1\24\5\25\3\24\1\25\40\24\1\25"+
    "\1\24\2\25\43\24\10\25\1\24\3\25\1\24\27\25\1\24\20\25"+
    "\46\24\2\25\43\24\22\25\3\24\30\25\1\24\11\25\1\24\1\25"+
    "\2\24\7\25\72\24\60\25\1\24\2\25\14\24\7\25\72\24\2\25"+
    "\1\24\1\25\2\24\2\25\1\24\1\25\2\24\1\25\6\24\4\25"+
    "\1\24\7\25\1\24\3\25\1\24\1\25\1\24\1\25\2\24\2\25"+
    "\1\24\4\25\1\24\2\25\11\24\1\25\2\24\5\25\1\24\1\25"+
    "\25\24\2\25\42\24\1\25\77\24\10\25\1\24\42\25\35\24\4\25"+
    "\164\24\42\25\1\24\5\25\1\24\2\25\45\24\6\25\112\24\46\25"+
    "\12\24\51\25\7\24\132\25\5\24\104\25\5\24\122\25\6\24\7\25"+
    "\1\24\77\25\1\24\1\25\1\24\4\25\2\24\7\25\1\24\1\25"+
    "\1\24\4\25\2\24\47\25\1\24\1\25\1\24\4\25\2\24\37\25"+
    "\1\24\1\25\1\24\4\25\2\24\7\25\1\24\1\25\1\24\4\25"+
    "\2\24\7\25\1\24\7\25\1\24\27\25\1\24\37\25\1\24\1\25"+
    "\1\24\4\25\2\24\7\25\1\24\47\25\1\24\23\25\105\24\125\25"+
    "\14\24\u026c\25\2\24\10\25\12\24\32\25\5\24\113\25\25\24\15\25"+
    "\1\24\4\25\16\24\22\25\16\24\22\25\16\24\15\25\1\24\3\25"+
    "\17\24\64\25\43\24\1\25\4\24\1\25\103\24\130\25\10\24\51\25"+
    "\127\24\35\25\63\24\36\25\2\24\5\25\u038b\24\154\25\224\24\234\25"+
    "\4\24\132\25\6\24\26\25\2\24\6\25\2\24\46\25\2\24\6\25"+
    "\2\24\10\25\1\24\1\25\1\24\1\25\1\24\1\25\1\24\37\25"+
    "\2\24\65\25\1\24\7\25\1\24\1\25\3\24\3\25\1\24\7\25"+
    "\3\24\4\25\2\24\6\25\4\24\15\25\5\24\3\25\1\24\7\25"+
    "\27\24\24\0\2\54\107\0\1\22\15\0\1\22\202\0\1\22\4\0"+
    "\1\22\2\0\12\22\1\0\1\22\3\0\5\22\6\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\4\22\1\0\3\22\1\0\7\22\3\0"+
    "\3\22\5\0\5\22\u0ebb\0\2\22\52\0\5\22\5\0\2\22\4\0"+
    "\126\22\6\0\3\22\1\0\132\22\1\0\4\22\5\0\50\22\4\0"+
    "\136\22\21\0\30\22\70\0\20\22\u0200\0\u19b6\22\112\0\u51a6\22\132\0"+
    "\u048d\22\u0773\0\u2ba4\22\u215c\0\u012e\22\2\0\73\22\225\0\7\22\14\0"+
    "\5\22\5\0\1\22\1\0\12\22\1\0\15\22\1\0\5\22\1\0"+
    "\1\22\1\0\2\22\1\0\2\22\1\0\154\22\41\0\u016b\22\22\0"+
    "\100\22\2\0\66\22\50\0\14\22\164\0\5\22\1\0\207\22\44\0"+
    "\32\22\6\0\32\22\13\0\131\22\3\0\6\22\2\0\6\22\2\0"+
    "\6\22\2\0\3\22\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\3\1\11\1\12\1\13\2\7\1\14\7\3"+
    "\1\15\1\16\1\17\1\7\1\20\2\3\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\3\3\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\3\2\37\1\40"+
    "\1\37\3\3\1\41\1\3\4\42\3\2\1\43\1\44"+
    "\1\45\1\46\1\42\1\47\1\42\1\50\1\51\1\52"+
    "\4\51\1\53\1\0\1\54\1\0\1\55\1\0\1\56"+
    "\1\0\3\3\1\57\1\60\1\61\1\62\1\63\3\3"+
    "\1\47\1\64\1\0\1\65\1\66\1\67\1\70\5\3"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\3\3"+
    "\5\0\1\3\2\0\4\51\1\0\1\3\1\100\6\3"+
    "\1\101\2\3\1\102\3\3\5\0\1\3\1\0\4\51"+
    "\3\3\1\103\1\104\7\3\5\0\1\3\1\51\1\105"+
    "\2\51\1\3\1\106\2\3\1\107\1\110\4\3\1\0"+
    "\2\111\3\0\1\3\1\112\2\51\1\113\1\114\1\115"+
    "\4\3\2\0\2\116\1\0\1\3\2\51\1\117\1\3"+
    "\2\120\2\121\1\0\2\122\1\0\1\3\2\51\2\123"+
    "\1\41\1\0\2\124\1\125\1\51\2\126\2\51\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0258\0\u0339\0\u0258\0\u0258\0\u0258"+
    "\0\u0384\0\u0258\0\u03cf\0\u0258\0\u041a\0\u0465\0\u0258\0\u04b0"+
    "\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672\0\u06bd\0\u0258"+
    "\0\u0708\0\u0753\0\u0258\0\u079e\0\u07e9\0\u0258\0\u0258\0\u0258"+
    "\0\u0258\0\u0258\0\u0258\0\u0258\0\u0834\0\u087f\0\u08ca\0\u0915"+
    "\0\u0258\0\u0258\0\u0960\0\u09ab\0\u0258\0\u0258\0\u09f6\0\u0a41"+
    "\0\u0258\0\u0a8c\0\u0ad7\0\u0b22\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e"+
    "\0\u0c99\0\u0ce4\0\u0258\0\u0d2f\0\u0d7a\0\u0dc5\0\u0e10\0\u0258"+
    "\0\u0258\0\u0258\0\u0258\0\u0d7a\0\u0258\0\u0dc5\0\u0258\0\u0e5b"+
    "\0\u0258\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87\0\u0258\0\u02a3\0\u02a3"+
    "\0\u0fd2\0\u0258\0\u041a\0\u0258\0\u0465\0\u101d\0\u1068\0\u10b3"+
    "\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u10fe\0\u1149\0\u1194"+
    "\0\u11df\0\u0258\0\u122a\0\u0258\0\u0258\0\u0258\0\u0258\0\u1275"+
    "\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u0258\0\u0258\0\u0258\0\u0258"+
    "\0\u02a3\0\u02a3\0\u0258\0\u13ec\0\u1437\0\u1482\0\u14cd\0\u1518"+
    "\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u0e5b\0\u16da\0\u1725"+
    "\0\u1770\0\u17bb\0\u1806\0\u1851\0\u02a3\0\u189c\0\u18e7\0\u1932"+
    "\0\u197d\0\u19c8\0\u1a13\0\u02a3\0\u1a5e\0\u1aa9\0\u02a3\0\u1af4"+
    "\0\u1b3f\0\u1b8a\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c"+
    "\0\u1d97\0\u1de2\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4"+
    "\0\u02a3\0\u02a3\0\u1fef\0\u203a\0\u2085\0\u20d0\0\u211b\0\u2166"+
    "\0\u21b1\0\u21fc\0\u2247\0\u2292\0\u22dd\0\u2328\0\u2373\0\u23be"+
    "\0\u0e5b\0\u2409\0\u2454\0\u249f\0\u02a3\0\u24ea\0\u2535\0\u02a3"+
    "\0\u02a3\0\u2580\0\u25cb\0\u2616\0\u2661\0\u26ac\0\u26f7\0\u0258"+
    "\0\u2742\0\u278d\0\u27d8\0\u2823\0\u0e5b\0\u286e\0\u28b9\0\u02a3"+
    "\0\u02a3\0\u02a3\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30\0\u2a7b"+
    "\0\u2ac6\0\u0258\0\u2b11\0\u2b5c\0\u2ba7\0\u2bf2\0\u02a3\0\u2c3d"+
    "\0\u2c88\0\u0258\0\u2cd3\0\u0258\0\u2d1e\0\u2d69\0\u0258\0\u2db4"+
    "\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u0258\0\u0258\0\u2f2b\0\u2f76"+
    "\0\u0258\0\u0e5b\0\u2fc1\0\u300c\0\u0258\0\u3057\0\u30a2\0\u0e5b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\2\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\3\12\1\25\1\26\1\11"+
    "\1\27\2\17\1\15\2\12\1\30\1\12\1\31\2\12"+
    "\1\32\1\33\1\34\1\35\1\36\1\12\1\17\1\37"+
    "\1\40\1\41\1\42\1\43\2\12\1\11\1\44\10\12"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\12\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\12\1\67\1\11\2\12\1\70"+
    "\1\71\1\15\1\16\1\72\1\20\1\21\1\22\1\23"+
    "\1\24\3\12\1\25\1\26\1\11\1\27\2\17\1\73"+
    "\1\74\1\12\1\30\1\12\1\31\2\12\1\32\1\33"+
    "\1\75\1\35\1\76\1\12\1\17\1\37\1\40\1\41"+
    "\1\42\1\77\2\12\1\11\1\44\10\12\1\100\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\12"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\12\1\67\2\11\1\101\1\102\1\103\1\104"+
    "\3\11\1\101\1\11\1\105\1\11\3\101\2\11\2\101"+
    "\1\11\1\101\1\104\15\101\1\11\1\106\1\107\1\110"+
    "\1\111\1\11\2\101\1\11\12\101\7\11\4\101\7\11"+
    "\2\101\3\11\1\102\1\103\1\104\5\11\1\105\4\11"+
    "\1\112\1\113\4\11\1\104\16\11\1\106\1\107\1\110"+
    "\43\11\3\103\1\102\1\103\1\104\5\103\1\114\4\103"+
    "\1\115\5\103\1\104\16\103\1\116\50\103\1\102\1\103"+
    "\1\104\5\103\1\114\5\103\1\115\4\103\1\104\16\103"+
    "\1\116\45\103\1\117\2\120\1\13\1\14\4\117\1\120"+
    "\3\117\3\120\6\117\1\121\1\122\3\120\1\123\1\120"+
    "\1\124\3\120\1\125\2\120\1\126\5\117\2\120\1\117"+
    "\12\120\7\117\4\120\7\117\2\120\4\10\1\0\106\10"+
    "\114\0\2\12\3\0\1\127\2\0\1\12\3\0\3\12"+
    "\7\0\15\12\6\0\2\12\1\0\12\12\7\0\4\12"+
    "\7\0\2\12\4\0\1\14\113\0\1\15\20\0\1\15"+
    "\65\0\2\12\3\0\1\127\2\0\1\12\3\0\3\12"+
    "\7\0\15\12\6\0\2\12\1\0\12\12\7\0\4\12"+
    "\7\0\1\130\1\12\7\0\1\131\3\0\2\132\52\0"+
    "\7\132\15\0\3\133\2\0\13\133\1\134\72\133\3\135"+
    "\2\0\14\135\1\134\71\135\1\0\2\12\3\0\1\127"+
    "\2\0\1\136\3\0\3\12\7\0\15\12\6\0\2\12"+
    "\1\0\12\12\7\0\4\12\7\0\2\12\1\0\2\12"+
    "\3\0\1\127\2\0\1\12\3\0\3\12\7\0\2\12"+
    "\1\137\12\12\6\0\2\12\1\0\12\12\7\0\1\12"+
    "\1\140\2\12\7\0\2\12\1\0\2\12\3\0\1\127"+
    "\2\0\1\12\3\0\3\12\7\0\13\12\1\141\1\12"+
    "\6\0\2\12\1\0\12\12\7\0\3\12\1\142\7\0"+
    "\2\12\1\0\2\12\3\0\1\127\2\0\1\143\3\0"+
    "\3\12\7\0\15\12\6\0\2\12\1\0\12\12\7\0"+
    "\4\12\7\0\2\12\1\0\2\12\3\0\1\127\2\0"+
    "\1\144\3\0\3\12\7\0\4\12\1\145\10\12\6\0"+
    "\2\12\1\0\12\12\7\0\4\12\7\0\2\12\1\0"+
    "\2\12\3\0\1\127\2\0\1\12\3\0\3\12\7\0"+
    "\1\12\1\146\13\12\6\0\2\12\1\0\12\12\7\0"+
    "\4\12\7\0\2\12\1\0\2\12\3\0\1\127\2\0"+
    "\1\147\3\0\3\12\7\0\15\12\6\0\2\12\1\0"+
    "\12\12\7\0\1\150\3\12\7\0\2\12\2\0\1\151"+
    "\6\0\1\151\3\0\3\151\2\0\2\151\1\0\1\151"+
    "\1\0\15\151\1\0\1\152\1\153\1\0\1\154\1\0"+
    "\2\151\1\0\12\151\7\0\4\151\7\0\2\151\47\0"+
    "\1\155\1\156\112\0\1\157\43\0\2\12\3\0\1\127"+
    "\2\0\1\12\3\0\3\12\7\0\15\12\6\0\2\12"+
    "\1\0\1\12\1\160\10\12\7\0\4\12\7\0\2\12"+
    "\1\0\2\12\3\0\1\127\2\0\1\161\3\0\3\12"+
    "\7\0\15\12\6\0\2\12\1\0\12\12\7\0\4\12"+
    "\7\0\2\12\1\0\2\12\3\0\1\127\2\0\1\12"+
    "\3\0\3\12\7\0\15\12\6\0\2\12\1\0\12\12"+
    "\7\0\1\12\1\162\2\12\7\0\2\12\1\0\2\12"+
    "\3\0\1\127\2\0\1\12\3\0\2\12\1\163\7\0"+
    "\15\12\6\0\2\12\1\0\12\12\7\0\4\12\7\0"+
    "\2\12\1\0\2\12\3\0\1\127\2\0\1\12\3\0"+
    "\3\12\7\0\6\12\1\164\6\12\6\0\2\12\1\0"+
    "\12\12\7\0\4\12\7\0\2\12\50\0\1\165\35\0"+
    "\1\166\111\0\1\167\113\0\1\170\5\0\2\12\3\0"+
    "\1\127\2\0\1\171\3\0\3\12\7\0\4\12\1\172"+
    "\10\12\6\0\2\12\1\0\12\12\7\0\4\12\7\0"+
    "\2\12\4\0\1\71\131\0\1\173\74\0\1\15\20\0"+
    "\1\73\65\0\2\12\3\0\1\127\2\0\1\12\3\0"+
    "\3\12\7\0\1\12\1\174\13\12\6\0\2\12\1\0"+
    "\12\12\7\0\4\12\7\0\2\12\1\0\2\12\3\0"+
    "\1\127\2\0\1\144\3\0\3\12\7\0\4\12\1\145"+
    "\1\12\1\175\6\12\6\0\2\12\1\0\12\12\7\0"+
    "\4\12\7\0\2\12\1\0\2\12\3\0\1\127\2\0"+
    "\1\147\3\0\3\12\7\0\4\12\1\176\10\12\6\0"+
    "\2\12\1\0\12\12\7\0\1\150\3\12\7\0\2\12"+
    "\42\0\1\177\7\0\1\200\2\0\1\201\2\0\1\202"+
    "\1\203\32\0\2\12\3\0\1\127\2\0\1\161\3\0"+
    "\3\12\7\0\5\12\1\204\7\12\6\0\2\12\1\0"+
    "\12\12\7\0\4\12\7\0\2\12\1\0\2\101\3\0"+
    "\1\101\1\0\2\101\3\0\3\101\2\0\2\101\1\0"+
    "\1\101\1\0\15\101\6\0\2\101\1\0\12\101\7\0"+
    "\4\101\7\0\2\101\4\0\1\103\113\0\1\104\20\0"+
    "\1\104\73\0\1\205\3\0\2\103\52\0\7\103\17\0"+
    "\1\151\6\0\1\151\3\0\3\151\2\0\2\151\1\0"+
    "\1\151\1\0\15\151\2\0\1\153\3\0\2\151\1\0"+
    "\12\151\7\0\4\151\7\0\2\151\47\0\1\110\44\0"+
    "\2\120\3\0\1\206\2\0\1\120\3\0\3\120\7\0"+
    "\15\120\6\0\2\120\1\0\12\120\7\0\4\120\7\0"+
    "\2\120\1\0\2\120\3\0\1\206\2\0\1\120\3\0"+
    "\3\120\7\0\1\120\1\207\13\120\6\0\2\120\1\0"+
    "\12\120\7\0\4\120\7\0\2\120\1\0\2\120\3\0"+
    "\1\206\2\0\1\120\3\0\3\120\7\0\5\120\1\210"+
    "\7\120\6\0\2\120\1\0\12\120\7\0\4\120\7\0"+
    "\2\120\1\0\2\120\3\0\1\206\2\0\1\120\3\0"+
    "\3\120\7\0\1\211\14\120\6\0\2\120\1\0\12\120"+
    "\7\0\4\120\7\0\2\120\1\0\2\120\3\0\1\206"+
    "\2\0\1\120\3\0\3\120\7\0\6\120\1\212\6\120"+
    "\6\0\2\120\1\0\12\120\7\0\4\120\7\0\2\120"+
    "\1\0\1\213\13\0\3\213\32\0\2\213\1\0\11\213"+
    "\12\0\1\213\13\0\2\12\3\0\1\127\2\0\1\12"+
    "\3\0\3\12\7\0\13\12\1\214\1\12\6\0\2\12"+
    "\1\0\12\12\7\0\4\12\7\0\2\12\1\0\2\12"+
    "\3\0\1\127\2\0\1\12\3\0\3\12\7\0\5\12"+
    "\1\215\7\12\6\0\2\12\1\0\12\12\7\0\4\12"+
    "\7\0\2\12\1\0\2\12\3\0\1\127\2\0\1\12"+
    "\3\0\3\12\7\0\2\12\1\216\12\12\6\0\2\12"+
    "\1\0\12\12\7\0\4\12\7\0\2\12\1\0\2\12"+
    "\3\0\1\127\2\0\1\12\3\0\3\12\7\0\11\12"+
    "\1\217\1\12\1\220\1\12\6\0\2\12\1\0\12\12"+
    "\7\0\4\12\7\0\2\12\1\0\2\12\3\0\1\127"+
    "\2\0\1\12\3\0\3\12\7\0\11\12\1\221\3\12"+
    "\6\0\2\12\1\0\12\12\7\0\4\12\7\0\2\12"+
    "\1\0\2\12\3\0\1\127\2\0\1\12\3\0\3\12"+
    "\7\0\7\12\1\222\5\12\6\0\2\12\1\0\12\12"+
    "\7\0\4\12\7\0\2\12\1\0\2\151\3\0\1\151"+
    "\1\0\2\151\3\0\3\151\2\0\2\151\1\0\1\151"+
    "\1\0\15\151\6\0\2\151\1\0\12\151\7\0\4\151"+
    "\7\0\2\151\2\0\1\151\6\0\1\151\3\0\3\151"+
    "\2\0\2\151\1\0\1\151\1\0\15\151\6\0\2\151"+
    "\1\0\12\151\7\0\4\151\7\0\2\151\1\0\2\12"+
    "\3\0\1\127\2\0\1\12\3\0\3\12\7\0\15\12"+
    "\6\0\2\12\1\0\2\12\1\223\7\12\7\0\4\12"+
    "\7\0\2\12\1\0\2\12\3\0\1\127\2\0\1\12"+
    "\3\0\3\12\7\0\15\12\6\0\2\12\1\0\12\12"+
    "\7\0\3\12\1\224\7\0\2\12\1\0\2\12\3\0"+
    "\1\127\2\0\1\12\3\0\3\12\7\0\7\12\1\225"+
    "\5\12\6\0\2\12\1\0\12\12\7\0\4\12\7\0"+
    "\2\12\1\0\2\12\3\0\1\127\2\0\1\12\3\0"+
    "\1\226\2\12\7\0\15\12\6\0\2\12\1\0\12\12"+
    "\7\0\4\12\7\0\2\12\1\0\2\12\3\0\1\127"+
    "\2\0\1\12\3\0\3\12\7\0\2\12\1\227\12\12"+
    "\6\0\2\12\1\0\12\12\7\0\4\12\7\0\2\12"+
    "\1\0\2\12\3\0\1\127\2\0\1\12\3\0\3\12"+
    "\7\0\2\12\1\230\12\12\6\0\2\12\1\0\12\12"+
    "\7\0\4\12\7\0\2\12\1\0\2\12\3\0\1\127"+
    "\2\0\1\12\3\0\3\12\7\0\12\12\1\231\2\12"+
    "\6\0\2\12\1\0\12\12\7\0\4\12\7\0\2\12"+
    "\1\0\2\12\3\0\1\127\2\0\1\12\3\0\3\12"+
    "\7\0\1\12\1\232\13\12\6\0\2\12\1\0\12\12"+
    "\7\0\4\12\7\0\2\12\33\0\1\233\132\0\1\234"+
    "\115\0\1\235\113\0\1\236\115\0\1\237\31\0\2\12"+
    "\3\0\1\127\2\0\1\12\3\0\3\12\7\0\10\12"+
    "\1\240\4\12\6\0\2\12\1\0\12\12\7\0\4\12"+
    "\7\0\2\12\1\0\1\241\13\0\3\241\32\0\2\241"+
    "\1\0\11\241\12\0\1\241\13\0\2\120\3\0\1\206"+
    "\2\0\1\120\3\0\3\120\7\0\2\120\1\242\12\120"+
    "\6\0\2\120\1\0\12\120\7\0\4\120\7\0\2\120"+
    "\1\0\2\120\3\0\1\206\2\0\1\120\3\0\3\120"+
    "\7\0\1\243\14\120\6\0\2\120\1\0\12\120\7\0"+
    "\4\120\7\0\2\120\1\0\2\120\3\0\1\206\2\0"+
    "\1\120\3\0\3\120\7\0\4\120\1\244\10\120\6\0"+
    "\2\120\1\0\12\120\7\0\4\120\7\0\2\120\1\0"+
    "\2\120\3\0\1\206\2\0\1\120\3\0\3\120\7\0"+
    "\10\120\1\245\4\120\6\0\2\120\1\0\12\120\7\0"+
    "\4\120\7\0\2\120\1\0\1\132\13\0\3\132\32\0"+
    "\2\132\1\0\11\132\12\0\1\132\13\0\2\12\3\0"+
    "\1\127\2\0\1\12\3\0\3\12\7\0\14\12\1\246"+
    "\6\0\2\12\1\0\12\12\7\0\4\12\7\0\2\12"+
    "\1\0\2\12\3\0\1\127\2\0\1\12\3\0\3\12"+
    "\7\0\6\12\1\247\6\12\6\0\2\12\1\0\12\12"+
    "\7\0\4\12\7\0\2\12\1\0\2\12\3\0\1\127"+
    "\2\0\1\12\3\0\3\12\7\0\11\12\1\250\3\12"+
    "\6\0\2\12\1\0\12\12\7\0\4\12\7\0\2\12"+
    "\1\0\2\12\3\0\1\127\2\0\1\251\3\0\3\12"+
    "\7\0\15\12\6\0\2\12\1\0\12\12\7\0\4\12"+
    "\7\0\2\12\1\0\2\12\3\0\1\127\2\0\1\12"+
    "\3\0\3\12\7\0\15\12\6\0\2\12\1\0\12\12"+
    "\7\0\3\12\1\252\7\0\2\12\1\0\2\12\3\0"+
    "\1\127\2\0\1\12\3\0\3\12\7\0\4\12\1\253"+
    "\10\12\6\0\2\12\1\0\12\12\7\0\4\12\7\0"+
    "\2\12\1\0\2\12\3\0\1\127\2\0\1\12\3\0"+
    "\3\12\7\0\15\12\6\0\1\12\1\254\1\0\12\12"+
    "\7\0\4\12\7\0\2\12\1\0\2\12\3\0\1\127"+
    "\2\0\1\12\3\0\3\12\7\0\11\12\1\255\3\12"+
    "\6\0\2\12\1\0\12\12\7\0\4\12\7\0\2\12"+
    "\1\0\2\12\3\0\1\127\2\0\1\12\3\0\3\12"+
    "\7\0\15\12\6\0\2\12\1\0\2\12\1\256\7\12"+
    "\7\0\4\12\7\0\2\12\1\0\2\12\3\0\1\127"+
    "\2\0\1\12\3\0\3\12\7\0\4\12\1\257\10\12"+
    "\6\0\2\12\1\0\12\12\7\0\4\12\7\0\2\12"+
    "\1\0\2\12\3\0\1\127\2\0\1\12\3\0\3\12"+
    "\7\0\1\12\1\260\13\12\6\0\2\12\1\0\12\12"+
    "\7\0\4\12\7\0\2\12\1\0\2\12\3\0\1\127"+
    "\2\0\1\12\3\0\3\12\7\0\4\12\1\261\10\12"+
    "\6\0\2\12\1\0\12\12\7\0\4\12\7\0\2\12"+
    "\30\0\1\262\101\0\1\263\152\0\1\264\106\0\1\265"+
    "\122\0\1\266\30\0\2\12\3\0\1\127\2\0\1\12"+
    "\3\0\3\12\7\0\1\12\1\267\13\12\6\0\2\12"+
    "\1\0\12\12\7\0\4\12\7\0\2\12\1\0\1\103"+
    "\13\0\3\103\32\0\2\103\1\0\11\103\12\0\1\103"+
    "\13\0\2\120\3\0\1\206\2\0\1\120\3\0\3\120"+
    "\7\0\1\120\1\270\13\120\6\0\2\120\1\0\12\120"+
    "\7\0\4\120\7\0\2\120\1\0\2\120\3\0\1\206"+
    "\2\0\1\271\3\0\3\120\7\0\15\120\6\0\2\120"+
    "\1\0\12\120\7\0\4\120\7\0\2\120\1\0\2\120"+
    "\3\0\1\206\2\0\1\120\3\0\3\120\7\0\7\120"+
    "\1\272\5\120\6\0\2\120\1\0\12\120\7\0\4\120"+
    "\7\0\2\120\1\0\2\120\3\0\1\206\2\0\1\120"+
    "\3\0\3\120\7\0\13\120\1\273\1\120\6\0\2\120"+
    "\1\0\12\120\7\0\4\120\7\0\2\120\1\0\2\12"+
    "\3\0\1\127\2\0\1\12\3\0\3\12\7\0\11\12"+
    "\1\274\3\12\6\0\2\12\1\0\12\12\7\0\4\12"+
    "\7\0\2\12\1\0\2\12\3\0\1\127\2\0\1\12"+
    "\3\0\3\12\7\0\15\12\6\0\2\12\1\0\12\12"+
    "\7\0\1\275\3\12\7\0\2\12\1\0\2\12\3\0"+
    "\1\127\2\0\1\276\3\0\3\12\7\0\15\12\6\0"+
    "\2\12\1\0\12\12\7\0\4\12\7\0\2\12\1\0"+
    "\2\12\3\0\1\127\2\0\1\12\3\0\3\12\7\0"+
    "\12\12\1\277\2\12\6\0\2\12\1\0\12\12\7\0"+
    "\4\12\7\0\2\12\1\0\2\12\3\0\1\127\2\0"+
    "\1\12\3\0\3\12\7\0\15\12\6\0\1\12\1\300"+
    "\1\0\12\12\7\0\4\12\7\0\2\12\1\0\2\12"+
    "\3\0\1\127\2\0\1\301\3\0\3\12\7\0\15\12"+
    "\6\0\2\12\1\0\12\12\7\0\4\12\7\0\2\12"+
    "\1\0\2\12\3\0\1\127\2\0\1\12\3\0\3\12"+
    "\7\0\15\12\6\0\1\302\1\12\1\0\12\12\7\0"+
    "\4\12\7\0\2\12\1\0\2\12\3\0\1\127\2\0"+
    "\1\12\3\0\3\12\7\0\7\12\1\303\5\12\6\0"+
    "\2\12\1\0\12\12\7\0\4\12\7\0\2\12\1\0"+
    "\2\12\3\0\1\127\2\0\1\12\3\0\3\12\7\0"+
    "\11\12\1\304\3\12\6\0\2\12\1\0\12\12\7\0"+
    "\4\12\7\0\2\12\1\0\2\12\3\0\1\127\2\0"+
    "\1\12\3\0\3\12\7\0\7\12\1\305\5\12\6\0"+
    "\2\12\1\0\12\12\7\0\4\12\7\0\2\12\33\0"+
    "\1\306\62\0\1\307\2\310\46\0\1\310\111\0\1\311"+
    "\56\0\1\312\157\0\1\313\27\0\2\12\3\0\1\127"+
    "\2\0\1\12\3\0\3\12\7\0\3\12\1\314\11\12"+
    "\6\0\2\12\1\0\12\12\7\0\4\12\7\0\2\12"+
    "\1\0\2\120\3\0\1\206\2\0\1\120\3\0\3\120"+
    "\7\0\3\120\1\315\11\120\6\0\2\120\1\0\12\120"+
    "\7\0\4\120\7\0\2\120\1\0\2\120\3\0\1\206"+
    "\2\0\1\120\3\0\3\120\7\0\6\120\1\316\6\120"+
    "\6\0\2\120\1\0\12\120\7\0\4\120\7\0\2\120"+
    "\1\0\2\120\3\0\1\206\2\0\1\120\3\0\3\120"+
    "\7\0\4\120\1\317\10\120\6\0\2\120\1\0\12\120"+
    "\7\0\4\120\7\0\2\120\1\0\2\12\3\0\1\127"+
    "\2\0\1\12\3\0\3\12\7\0\4\12\1\320\10\12"+
    "\6\0\2\12\1\0\12\12\7\0\4\12\7\0\2\12"+
    "\1\0\2\12\3\0\1\127\2\0\1\12\3\0\3\12"+
    "\7\0\2\12\1\321\12\12\6\0\2\12\1\0\12\12"+
    "\7\0\4\12\7\0\2\12\1\0\2\12\3\0\1\127"+
    "\2\0\1\12\3\0\3\12\7\0\15\12\6\0\2\12"+
    "\1\0\12\12\7\0\1\12\1\322\2\12\7\0\2\12"+
    "\1\0\2\12\3\0\1\127\2\0\1\12\3\0\3\12"+
    "\7\0\15\12\6\0\2\12\1\0\1\12\1\323\10\12"+
    "\7\0\4\12\7\0\2\12\1\0\2\12\3\0\1\127"+
    "\2\0\1\12\3\0\3\12\7\0\1\12\1\324\13\12"+
    "\6\0\2\12\1\0\12\12\7\0\4\12\7\0\2\12"+
    "\1\0\2\12\3\0\1\127\2\0\1\12\3\0\3\12"+
    "\7\0\13\12\1\325\1\12\6\0\2\12\1\0\12\12"+
    "\7\0\4\12\7\0\2\12\1\0\2\12\3\0\1\127"+
    "\2\0\1\12\3\0\3\12\7\0\12\12\1\326\2\12"+
    "\6\0\2\12\1\0\12\12\7\0\4\12\7\0\2\12"+
    "\36\0\1\327\60\0\1\310\161\0\1\330\42\0\1\331"+
    "\2\332\46\0\1\332\117\0\1\333\32\0\2\12\3\0"+
    "\1\127\2\0\1\12\3\0\3\12\7\0\7\12\1\334"+
    "\5\12\6\0\2\12\1\0\12\12\7\0\4\12\7\0"+
    "\2\12\1\0\2\120\3\0\1\206\2\0\1\120\3\0"+
    "\3\120\7\0\10\120\1\335\4\120\6\0\2\120\1\0"+
    "\12\120\7\0\4\120\7\0\2\120\1\0\2\120\3\0"+
    "\1\206\2\0\1\120\3\0\3\120\7\0\2\120\1\336"+
    "\12\120\6\0\2\120\1\0\12\120\7\0\4\120\7\0"+
    "\2\120\1\0\2\12\3\0\1\127\2\0\1\12\3\0"+
    "\3\12\7\0\15\12\6\0\2\12\1\0\6\12\1\337"+
    "\3\12\7\0\4\12\7\0\2\12\1\0\2\12\3\0"+
    "\1\127\2\0\1\12\3\0\3\12\7\0\11\12\1\340"+
    "\3\12\6\0\2\12\1\0\12\12\7\0\4\12\7\0"+
    "\2\12\1\0\2\12\1\341\2\342\1\127\2\0\1\12"+
    "\3\0\3\12\7\0\15\12\6\0\2\12\1\342\12\12"+
    "\7\0\4\12\7\0\2\12\1\0\2\12\1\343\2\344"+
    "\1\127\2\0\1\12\3\0\3\12\7\0\15\12\6\0"+
    "\2\12\1\344\12\12\7\0\4\12\7\0\2\12\41\0"+
    "\1\345\54\0\1\346\2\347\46\0\1\347\42\0\1\332"+
    "\173\0\1\350\26\0\2\12\3\0\1\127\2\0\1\12"+
    "\3\0\3\12\7\0\12\12\1\351\2\12\6\0\2\12"+
    "\1\0\12\12\7\0\4\12\7\0\2\12\1\0\2\120"+
    "\3\0\1\206\2\0\1\120\3\0\3\120\7\0\1\120"+
    "\1\352\13\120\6\0\2\120\1\0\12\120\7\0\4\120"+
    "\7\0\2\120\1\0\2\120\3\0\1\206\2\0\1\120"+
    "\3\0\3\120\7\0\14\120\1\353\6\0\2\120\1\0"+
    "\12\120\7\0\4\120\7\0\2\120\1\0\2\12\1\354"+
    "\2\355\1\127\2\0\1\12\3\0\3\12\7\0\15\12"+
    "\6\0\2\12\1\355\12\12\7\0\4\12\7\0\2\12"+
    "\4\0\1\342\112\0\1\344\131\0\1\356\73\0\1\347"+
    "\161\0\1\357\40\0\2\12\1\360\2\361\1\127\2\0"+
    "\1\12\3\0\3\12\7\0\15\12\6\0\2\12\1\361"+
    "\12\12\7\0\4\12\7\0\2\12\1\0\2\120\3\0"+
    "\1\206\2\0\1\120\3\0\3\120\7\0\11\120\1\362"+
    "\3\120\6\0\2\120\1\0\12\120\7\0\4\120\7\0"+
    "\2\120\1\0\2\120\3\0\1\206\2\0\1\120\3\0"+
    "\3\120\7\0\12\120\1\363\2\120\6\0\2\120\1\0"+
    "\12\120\7\0\4\120\7\0\2\120\4\0\1\355\111\0"+
    "\1\364\2\365\46\0\1\365\42\0\1\361\107\0\2\120"+
    "\3\0\1\206\2\0\1\120\3\0\3\120\7\0\4\120"+
    "\1\366\10\120\6\0\2\120\1\0\12\120\7\0\4\120"+
    "\7\0\2\120\4\0\1\365\107\0\2\120\3\0\1\206"+
    "\2\0\1\120\3\0\3\120\7\0\6\120\1\367\6\120"+
    "\6\0\2\120\1\0\12\120\7\0\4\120\7\0\2\120"+
    "\1\0\2\120\3\0\1\206\2\0\1\120\3\0\3\120"+
    "\7\0\2\120\1\370\12\120\6\0\2\120\1\0\12\120"+
    "\7\0\4\120\7\0\2\120";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12525];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\1\1\11\2\1\1\11\1\1\3\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\11\10\1\1\11\2\1"+
    "\1\11\2\1\7\11\4\1\2\11\2\1\2\11\2\1"+
    "\1\11\11\1\1\11\4\1\4\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\4\1\1\11\1\0\1\1\1\0"+
    "\1\11\1\0\1\11\1\0\14\1\1\11\1\0\4\11"+
    "\5\1\4\11\2\1\1\11\3\1\5\0\1\1\2\0"+
    "\4\1\1\0\17\1\5\0\1\1\1\0\20\1\5\0"+
    "\17\1\1\0\1\1\1\11\3\0\13\1\2\0\1\1"+
    "\1\11\1\0\6\1\1\11\1\1\1\11\1\0\1\1"+
    "\1\11\1\0\4\1\2\11\1\0\1\1\1\11\3\1"+
    "\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public _ParserLexer() {
      this((java.io.Reader) null);
    }

    public _ParserLexer(boolean highlightMode) {
      this((java.io.Reader) null);
    }


  public _ParserLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ParserLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1288) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 58: 
          { yybegin(YYINITIAL); return ParserTokenTypes.XOR;
          }
        case 88: break;
        case 69: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_TYPE_KEYWORD;
          }
        case 89: break;
        case 62: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITGT;
          }
        case 90: break;
        case 14: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DIV;
          }
        case 91: break;
        case 17: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DOLLAR;
          }
        case 92: break;
        case 74: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_PARAM_KEYWORD;
          }
        case 93: break;
        case 71: 
          { yybegin(YYINITIAL); return ParserTokenTypes.CLASS_STATIC_KEYWORD;
          }
        case 94: break;
        case 7: 
          { yybegin(YYINITIAL); return ParserTokenTypes.USELESS_CHAR;
          }
        case 95: break;
        case 57: 
          { yybegin(YYINITIAL); return ParserTokenTypes.NE;
          }
        case 96: break;
        case 25: 
          { yybegin(YYINITIAL); return ParserTokenTypes.MULT;
          }
        case 97: break;
        case 11: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RBRACE;
          }
        case 98: break;
        case 79: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DEFAULT_KEYWORD;
          }
        case 99: break;
        case 47: 
          { yybegin(YYINITIAL); return ParserTokenTypes.IS_KEYWORD;
          }
        case 100: break;
        case 53: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LE;
          }
        case 101: break;
        case 48: 
          { yybegin(YYINITIAL); return ParserTokenTypes.IF_KEYWORD;
          }
        case 102: break;
        case 9: 
          { yybegin(YYINITIAL); return ParserTokenTypes.PLUS;
          }
        case 103: break;
        case 8: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DOT;
          }
        case 104: break;
        case 56: 
          { yybegin(YYINITIAL); return ParserTokenTypes.EQEQ;
          }
        case 105: break;
        case 21: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LBRACKET;
          }
        case 106: break;
        case 82: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { yybegin(YYINITIAL); return ParserTokenTypes.CLASS_KEYWORD;
          }
        case 107: break;
        case 70: 
          { yybegin(YYINITIAL); return ParserTokenTypes.THROW_KEYWORD;
          }
        case 108: break;
        case 23: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LBRACE;
          }
        case 109: break;
        case 49: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITNE;
          }
        case 110: break;
        case 52: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LTLT;
          }
        case 111: break;
        case 24: 
          { yybegin(YYINITIAL); return ParserTokenTypes.EXCL;
          }
        case 112: break;
        case 55: 
          { yybegin(YYINITIAL); return ParserTokenTypes.GE;
          }
        case 113: break;
        case 67: 
          { yybegin(YYINITIAL); return ParserTokenTypes.CASE_KEYWORD;
          }
        case 114: break;
        case 50: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITLE;
          }
        case 115: break;
        case 54: 
          { yybegin(YYINITIAL); return ParserTokenTypes.GTGT;
          }
        case 116: break;
        case 3: 
          { yybegin(YYINITIAL); return ParserTokenTypes.IDENTIFIER;
          }
        case 117: break;
        case 83: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { yybegin(YYINITIAL); return ParserTokenTypes.PARTIAL_KEYWORD;
          }
        case 118: break;
        case 18: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SEMICOLON;
          }
        case 119: break;
        case 33: 
          { yybegin(YYINITIAL); return ParserTokenTypes.KEY_AT_SIGN;
          }
        case 120: break;
        case 39: 
          { yybegin(TAG_ATTRIBUTES); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 121: break;
        case 85: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_OPTIONAL_KEYWORD;
          }
        case 122: break;
        case 2: 
          { yybegin(YYINITIAL); return ParserTokenTypes.BAD_CHARACTER;
          }
        case 123: break;
        case 61: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITGE;
          }
        case 124: break;
        case 45: 
          { yybegin(YYINITIAL); return ParserTokenTypes.ESCAPE;
          }
        case 125: break;
        case 59: 
          { yybegin(YYINITIAL); return ParserTokenTypes.ANDAND;
          }
        case 126: break;
        case 43: 
          { yybegin(PARSERDOC); return ParserTokenTypes.COMMA;
          }
        case 127: break;
        case 66: 
          { yybegin(YYINITIAL); return ParserTokenTypes.FOR_KEYWORD;
          }
        case 128: break;
        case 40: 
          { yybegin(PARSERDOC); return ParserTokenTypes.BAD_CHARACTER;
          }
        case 129: break;
        case 1: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SHARP_COMMENT;
          }
        case 130: break;
        case 38: 
          { yybegin(ATTRIBUTE_VALUE_SQ); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 131: break;
        case 44: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITEQ;
          }
        case 132: break;
        case 42: 
          { yybegin(PARSERDOC); return ParserTokenTypes.NEW_LINE_INDENT;
          }
        case 133: break;
        case 29: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TILDE;
          }
        case 134: break;
        case 75: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RESULT_KEYWORD;
          }
        case 135: break;
        case 4: 
          { yybegin(YYINITIAL); return ParserTokenTypes.NEW_LINE;
          }
        case 136: break;
        case 68: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SELF_KEYWORD;
          }
        case 137: break;
        case 86: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 8;
          { yybegin(YYINITIAL); return ParserTokenTypes.OPTIONS_KEYWORD;
          }
        case 138: break;
        case 26: 
          { yybegin(YYINITIAL); return ParserTokenTypes.PERC;
          }
        case 139: break;
        case 16: 
          { yybegin(YYINITIAL); return ParserTokenTypes.AT_SIGN;
          }
        case 140: break;
        case 20: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RPAR;
          }
        case 141: break;
        case 81: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { yybegin(YYINITIAL); return ParserTokenTypes.STATIC_KEYWORD;
          }
        case 142: break;
        case 30: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DIR;
          }
        case 143: break;
        case 13: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LT;
          }
        case 144: break;
        case 77: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SWITCH_KEYWORD;
          }
        case 145: break;
        case 36: 
          { yybegin(ATTRIBUTE_VALUE_START); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 146: break;
        case 27: 
          { yybegin(YYINITIAL); return ParserTokenTypes.AND;
          }
        case 147: break;
        case 64: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TRY_KEYWORD;
          }
        case 148: break;
        case 6: 
          { yybegin(YYINITIAL); return ParserTokenTypes.MINUS;
          }
        case 149: break;
        case 37: 
          { yybegin(ATTRIBUTE_VALUE_DQ); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 150: break;
        case 5: 
          { yybegin(YYINITIAL); return ParserTokenTypes.WHITE_SPACE;
          }
        case 151: break;
        case 76: 
          { yybegin(YYINITIAL); return ParserTokenTypes.CALLER_KEYWORD;
          }
        case 152: break;
        case 73: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { yybegin(YYINITIAL); return ParserTokenTypes.USE_KEYWORD;
          }
        case 153: break;
        case 65: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DEF_KEYWORD;
          }
        case 154: break;
        case 72: 
          { yybegin(YYINITIAL); return ParserTokenTypes.WHILE_KEYWORD;
          }
        case 155: break;
        case 19: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LPAR;
          }
        case 156: break;
        case 46: 
          { yybegin(YYINITIAL); return ParserTokenTypes.STRING_LITERAL;
          }
        case 157: break;
        case 32: 
          { yybegin(LINE_COMMENT); yypushback(1);
          }
        case 158: break;
        case 15: 
          { yybegin(YYINITIAL); return ParserTokenTypes.GT;
          }
        case 159: break;
        case 60: 
          { yybegin(YYINITIAL); return ParserTokenTypes.OROR;
          }
        case 160: break;
        case 51: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITLT;
          }
        case 161: break;
        case 34: 
          { return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 162: break;
        case 78: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { yybegin(YYINITIAL); return ParserTokenTypes.BASE_KEYWORD;
          }
        case 163: break;
        case 84: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { yybegin(YYINITIAL); return ParserTokenTypes.DYNAMIC_KEYWORD;
          }
        case 164: break;
        case 80: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { yybegin(YYINITIAL); return ParserTokenTypes.LOCALS_KEYWORD;
          }
        case 165: break;
        case 28: 
          { yybegin(YYINITIAL); return ParserTokenTypes.OR;
          }
        case 166: break;
        case 35: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 167: break;
        case 87: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_CONSTRUCTOR_KEYWORD;
          }
        case 168: break;
        case 10: 
          { yybegin(YYINITIAL); return ParserTokenTypes.HAT_SIGN;
          }
        case 169: break;
        case 41: 
          { yybegin(PARSERDOC); return ParserTokenTypes.IDENTIFIER;
          }
        case 170: break;
        case 31: 
          { yybegin(YYINITIAL); return ParserTokenTypes.NEW_LINE_INDENT;
          }
        case 171: break;
        case 22: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RBRACKET;
          }
        case 172: break;
        case 12: 
          { yybegin(YYINITIAL); return ParserTokenTypes.COLON;
          }
        case 173: break;
        case 63: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_START;
          }
        case 174: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
