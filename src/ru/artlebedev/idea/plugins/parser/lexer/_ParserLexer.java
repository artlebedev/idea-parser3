/* The following code was generated by JFlex 1.4.3 on 4/3/11 5:28 PM */

package ru.artlebedev.idea.plugins.parser.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.xml.XmlTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/3/11 5:28 PM from the specification file
 * <tt>src/ru/artlebedev/idea/plugins/parser/lexer/ParserLexer.flex</tt>
 */
public class _ParserLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ATTRIBUTE_VALUE_START = 6;
  public static final int PARSERDOC = 12;
  public static final int ATTRIBUTE_VALUE_SQ = 10;
  public static final int LINE_COMMENT = 14;
  public static final int YYINITIAL = 0;
  public static final int ATTRIBUTE_VALUE_DQ = 8;
  public static final int DOC_TYPE = 2;
  public static final int TAG_ATTRIBUTES = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\61\1\4\1\74\1\5\1\3\22\0\1\61\1\30\1\21"+
    "\1\10\1\77\1\110\1\111\1\22\1\101\1\102\1\107\1\13\1\66"+
    "\1\7\1\11\1\70\1\1\11\1\1\24\1\100\1\27\1\71\1\67"+
    "\1\25\1\72\1\75\1\55\1\35\1\31\1\20\1\16\1\17\1\45"+
    "\1\57\2\17\1\51\1\47\1\76\1\33\1\43\2\17\1\73\1\37"+
    "\1\53\3\17\1\41\1\17\1\103\1\114\1\104\1\14\1\6\1\0"+
    "\1\62\1\56\1\36\1\32\1\12\1\2\1\116\1\46\1\60\2\6"+
    "\1\52\1\50\1\64\1\34\1\44\1\115\1\63\1\65\1\40\1\54"+
    "\1\6\1\106\1\6\1\42\1\6\1\105\1\112\1\15\1\113\6\0"+
    "\1\74\44\0\1\23\12\0\1\23\4\0\1\23\5\0\27\23\1\0"+
    "\1\26\17\23\1\26\1\23\15\26\1\25\u013f\26\31\25\162\26\4\25"+
    "\14\26\16\25\5\26\11\25\1\26\213\25\1\26\13\25\1\26\1\25"+
    "\3\26\1\25\1\26\1\25\24\26\1\25\54\26\1\25\46\26\1\25"+
    "\5\26\4\25\202\26\10\25\105\26\1\25\46\26\2\25\2\26\6\25"+
    "\20\26\41\25\46\26\2\25\1\26\7\25\47\26\110\25\33\26\5\25"+
    "\3\26\56\25\32\26\5\25\13\26\43\25\2\26\1\25\143\26\1\25"+
    "\1\26\17\25\2\26\7\25\2\26\12\25\3\26\2\25\1\26\20\25"+
    "\1\26\1\25\36\26\35\25\3\26\60\25\46\26\13\25\1\26\u0152\25"+
    "\66\26\3\25\1\26\22\25\1\26\7\25\12\26\43\25\10\26\2\25"+
    "\2\26\2\25\26\26\1\25\7\26\1\25\1\26\3\25\4\26\3\25"+
    "\1\26\36\25\2\26\1\25\3\26\16\25\2\26\23\25\6\26\4\25"+
    "\2\26\2\25\26\26\1\25\7\26\1\25\2\26\1\25\2\26\1\25"+
    "\2\26\37\25\4\26\1\25\1\26\23\25\3\26\20\25\11\26\1\25"+
    "\3\26\1\25\26\26\1\25\7\26\1\25\2\26\1\25\5\26\3\25"+
    "\1\26\22\25\1\26\17\25\2\26\43\25\10\26\2\25\2\26\2\25"+
    "\26\26\1\25\7\26\1\25\2\26\1\25\5\26\3\25\1\26\36\25"+
    "\2\26\1\25\3\26\17\25\1\26\21\25\1\26\1\25\6\26\3\25"+
    "\3\26\1\25\4\26\3\25\2\26\1\25\1\26\1\25\2\26\3\25"+
    "\2\26\3\25\3\26\3\25\10\26\1\25\3\26\113\25\10\26\1\25"+
    "\3\26\1\25\27\26\1\25\12\26\1\25\5\26\46\25\2\26\43\25"+
    "\10\26\1\25\3\26\1\25\27\26\1\25\12\26\1\25\5\26\3\25"+
    "\1\26\40\25\1\26\1\25\2\26\43\25\10\26\1\25\3\26\1\25"+
    "\27\26\1\25\20\26\46\25\2\26\43\25\22\26\3\25\30\26\1\25"+
    "\11\26\1\25\1\26\2\25\7\26\72\25\60\26\1\25\2\26\14\25"+
    "\7\26\72\25\2\26\1\25\1\26\2\25\2\26\1\25\1\26\2\25"+
    "\1\26\6\25\4\26\1\25\7\26\1\25\3\26\1\25\1\26\1\25"+
    "\1\26\2\25\2\26\1\25\4\26\1\25\2\26\11\25\1\26\2\25"+
    "\5\26\1\25\1\26\25\25\2\26\42\25\1\26\77\25\10\26\1\25"+
    "\42\26\35\25\4\26\164\25\42\26\1\25\5\26\1\25\2\26\45\25"+
    "\6\26\112\25\46\26\12\25\51\26\7\25\132\26\5\25\104\26\5\25"+
    "\122\26\6\25\7\26\1\25\77\26\1\25\1\26\1\25\4\26\2\25"+
    "\7\26\1\25\1\26\1\25\4\26\2\25\47\26\1\25\1\26\1\25"+
    "\4\26\2\25\37\26\1\25\1\26\1\25\4\26\2\25\7\26\1\25"+
    "\1\26\1\25\4\26\2\25\7\26\1\25\7\26\1\25\27\26\1\25"+
    "\37\26\1\25\1\26\1\25\4\26\2\25\7\26\1\25\47\26\1\25"+
    "\23\26\105\25\125\26\14\25\u026c\26\2\25\10\26\12\25\32\26\5\25"+
    "\113\26\25\25\15\26\1\25\4\26\16\25\22\26\16\25\22\26\16\25"+
    "\15\26\1\25\3\26\17\25\64\26\43\25\1\26\4\25\1\26\103\25"+
    "\130\26\10\25\51\26\127\25\35\26\63\25\36\26\2\25\5\26\u038b\25"+
    "\154\26\224\25\234\26\4\25\132\26\6\25\26\26\2\25\6\26\2\25"+
    "\46\26\2\25\6\26\2\25\10\26\1\25\1\26\1\25\1\26\1\25"+
    "\1\26\1\25\37\26\2\25\65\26\1\25\7\26\1\25\1\26\3\25"+
    "\3\26\1\25\7\26\3\25\4\26\2\25\6\26\4\25\15\26\5\25"+
    "\3\26\1\25\7\26\27\25\24\0\2\74\107\0\1\23\15\0\1\23"+
    "\202\0\1\23\4\0\1\23\2\0\12\23\1\0\1\23\3\0\5\23"+
    "\6\0\1\23\1\0\1\23\1\0\1\23\1\0\4\23\1\0\3\23"+
    "\1\0\7\23\3\0\3\23\5\0\5\23\u0ebb\0\2\23\52\0\5\23"+
    "\5\0\2\23\4\0\126\23\6\0\3\23\1\0\132\23\1\0\4\23"+
    "\5\0\50\23\4\0\136\23\21\0\30\23\70\0\20\23\u0200\0\u19b6\23"+
    "\112\0\u51a6\23\132\0\u048d\23\u0773\0\u2ba4\23\u215c\0\u012e\23\2\0\73\23"+
    "\225\0\7\23\14\0\5\23\5\0\1\23\1\0\12\23\1\0\15\23"+
    "\1\0\5\23\1\0\1\23\1\0\2\23\1\0\2\23\1\0\154\23"+
    "\41\0\u016b\23\22\0\100\23\2\0\66\23\50\0\14\23\164\0\5\23"+
    "\1\0\207\23\44\0\32\23\6\0\32\23\13\0\131\23\3\0\6\23"+
    "\2\0\6\23\2\0\6\23\2\0\3\23\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\2\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\3\1\11\1\12\1\13\2\7\1\14\1\15"+
    "\1\16\12\3\1\17\1\20\1\7\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\3\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\3\2\37\1\40\3\3"+
    "\1\37\1\3\1\41\1\42\4\2\1\43\3\42\3\2"+
    "\1\44\1\45\1\46\1\42\1\47\1\42\1\50\5\51"+
    "\1\52\1\53\1\0\1\3\1\54\1\0\1\55\1\0"+
    "\1\56\1\0\1\47\1\57\2\0\1\60\1\61\1\62"+
    "\6\3\1\63\1\64\1\65\1\66\1\3\1\67\2\3"+
    "\1\70\1\71\1\72\1\3\1\73\1\74\1\75\1\76"+
    "\1\77\4\3\13\0\4\51\1\100\2\0\1\3\1\101"+
    "\4\3\1\102\10\3\10\0\4\51\1\0\3\3\1\103"+
    "\2\3\1\104\6\3\6\0\2\51\1\105\1\51\1\0"+
    "\1\3\1\106\1\3\1\107\2\3\1\110\4\3\2\0"+
    "\2\111\3\0\2\51\1\112\1\0\1\3\1\113\1\114"+
    "\1\115\4\3\2\0\2\116\1\0\2\51\1\0\1\117"+
    "\2\3\2\120\2\121\1\0\2\122\1\0\2\51\1\0"+
    "\2\123\2\124\1\0\1\41\1\125\1\51\1\126\2\127"+
    "\2\51\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u02c7\0\u0403\0\u02c7"+
    "\0\u02c7\0\u02c7\0\u0452\0\u02c7\0\u04a1\0\u02c7\0\u04f0\0\u053f"+
    "\0\u02c7\0\u058e\0\u05dd\0\u062c\0\u067b\0\u06ca\0\u0719\0\u0768"+
    "\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u08f3\0\u0942\0\u02c7\0\u0991"+
    "\0\u02c7\0\u02c7\0\u02c7\0\u02c7\0\u02c7\0\u02c7\0\u02c7\0\u02c7"+
    "\0\u09e0\0\u02c7\0\u02c7\0\u0a2f\0\u0a7e\0\u02c7\0\u02c7\0\u0acd"+
    "\0\u0b1c\0\u02c7\0\u0b6b\0\u0bba\0\u0c09\0\u0c58\0\u0ca7\0\u0cf6"+
    "\0\u0d45\0\u02c7\0\u0d94\0\u0de3\0\u0e32\0\u0e81\0\u02c7\0\u0ed0"+
    "\0\u0f1f\0\u0f6e\0\u0fbd\0\u100c\0\u105b\0\u02c7\0\u02c7\0\u02c7"+
    "\0\u0fbd\0\u02c7\0\u100c\0\u02c7\0\u10aa\0\u10f9\0\u1148\0\u1197"+
    "\0\u11e6\0\u02c7\0\u02c7\0\u0316\0\u1235\0\u0316\0\u1284\0\u02c7"+
    "\0\u04f0\0\u02c7\0\u053f\0\u12d3\0\u02c7\0\u1322\0\u1371\0\u02c7"+
    "\0\u02c7\0\u02c7\0\u13c0\0\u140f\0\u145e\0\u14ad\0\u14fc\0\u154b"+
    "\0\u0316\0\u0316\0\u0316\0\u0316\0\u159a\0\u0316\0\u15e9\0\u1638"+
    "\0\u02c7\0\u02c7\0\u02c7\0\u1687\0\u02c7\0\u02c7\0\u0316\0\u0316"+
    "\0\u02c7\0\u16d6\0\u1725\0\u1774\0\u17c3\0\u1812\0\u1861\0\u18b0"+
    "\0\u18ff\0\u194e\0\u0d94\0\u0de3\0\u199d\0\u19ec\0\u1a3b\0\u10aa"+
    "\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77\0\u0316\0\u1bc6\0\u1c15\0\u1c64"+
    "\0\u0316\0\u1cb3\0\u1d02\0\u1d51\0\u1da0\0\u0316\0\u1def\0\u1e3e"+
    "\0\u1e8d\0\u1edc\0\u1f2b\0\u1f7a\0\u1fc9\0\u2018\0\u2067\0\u20b6"+
    "\0\u2105\0\u2154\0\u21a3\0\u21f2\0\u2241\0\u2290\0\u22df\0\u232e"+
    "\0\u237d\0\u23cc\0\u241b\0\u246a\0\u24b9\0\u2508\0\u0316\0\u2557"+
    "\0\u25a6\0\u0316\0\u25f5\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780"+
    "\0\u27cf\0\u281e\0\u286d\0\u28bc\0\u290b\0\u295a\0\u29a9\0\u29f8"+
    "\0\u10aa\0\u2a47\0\u2a96\0\u2ae5\0\u0316\0\u2b34\0\u0316\0\u2b83"+
    "\0\u2bd2\0\u0316\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d\0\u2dac"+
    "\0\u2dfb\0\u02c7\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37\0\u2f86\0\u10aa"+
    "\0\u2fd5\0\u3024\0\u0316\0\u0316\0\u0316\0\u3073\0\u30c2\0\u3111"+
    "\0\u3160\0\u31af\0\u31fe\0\u324d\0\u02c7\0\u329c\0\u32eb\0\u333a"+
    "\0\u3389\0\u0316\0\u33d8\0\u3427\0\u3476\0\u02c7\0\u34c5\0\u02c7"+
    "\0\u3514\0\u3563\0\u02c7\0\u35b2\0\u3601\0\u3650\0\u369f\0\u36ee"+
    "\0\u02c7\0\u373d\0\u02c7\0\u378c\0\u02c7\0\u10aa\0\u37db\0\u02c7"+
    "\0\u382a\0\u02c7\0\u3879\0\u38c8\0\u10aa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\13\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\3\13\1\27"+
    "\1\30\1\12\1\31\2\21\1\32\1\33\1\34\1\35"+
    "\2\13\1\36\1\37\1\13\1\40\11\13\1\41\5\13"+
    "\1\42\1\17\1\13\1\43\1\44\1\45\1\21\1\46"+
    "\1\47\1\50\1\51\1\13\1\12\2\13\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\13\1\70\1\12\1\13"+
    "\1\14\1\71\1\72\1\17\1\13\1\20\1\73\1\22"+
    "\1\23\1\24\1\25\1\26\3\13\1\27\1\30\1\12"+
    "\1\31\2\21\1\32\1\33\1\34\1\74\2\13\1\36"+
    "\1\37\1\13\1\40\3\13\1\75\5\13\1\76\5\13"+
    "\1\42\1\77\1\13\1\43\1\44\1\100\1\21\1\46"+
    "\1\47\1\50\1\101\1\13\1\12\2\13\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\13\1\70\4\12\1\0"+
    "\1\102\13\12\1\103\1\104\20\12\2\105\2\106\12\12"+
    "\1\102\5\12\1\107\31\12\1\110\1\111\1\102\1\112"+
    "\1\110\3\12\1\110\1\12\1\113\1\12\3\110\2\12"+
    "\2\110\1\12\1\110\1\114\1\12\30\110\1\112\4\110"+
    "\1\12\1\107\1\115\1\116\1\12\1\110\1\12\2\110"+
    "\7\12\1\110\6\12\2\110\3\12\1\111\1\102\1\112"+
    "\6\12\1\113\4\12\1\117\1\120\4\12\1\114\31\12"+
    "\1\112\5\12\1\107\1\115\26\12\3\102\1\111\1\102"+
    "\1\112\6\102\1\121\4\102\1\122\5\102\1\123\31\102"+
    "\1\112\40\102\1\111\1\102\1\112\6\102\1\121\5\102"+
    "\1\122\4\102\1\123\31\102\1\112\35\102\1\124\2\125"+
    "\1\15\1\16\1\124\1\125\3\124\1\125\3\124\3\125"+
    "\10\124\3\125\1\126\1\125\1\127\1\125\1\130\3\125"+
    "\1\131\14\125\1\132\4\125\1\133\4\124\1\125\1\124"+
    "\2\125\7\124\1\125\6\124\2\125\4\11\1\0\112\11"+
    "\120\0\2\13\3\0\1\13\1\134\2\0\1\13\3\0"+
    "\3\13\10\0\30\13\1\0\4\13\5\0\1\13\1\0"+
    "\2\13\7\0\1\13\6\0\2\13\1\0\2\13\3\0"+
    "\1\13\1\134\2\0\1\13\3\0\3\13\10\0\3\13"+
    "\1\135\24\13\1\0\4\13\5\0\1\13\1\0\2\13"+
    "\7\0\1\13\6\0\2\13\4\0\1\16\117\0\1\17"+
    "\53\0\1\17\36\0\2\13\3\0\1\13\1\134\2\0"+
    "\1\13\3\0\3\13\10\0\30\13\1\0\4\13\5\0"+
    "\1\13\1\0\2\13\7\0\1\13\6\0\1\136\1\13"+
    "\10\0\1\137\3\0\2\140\61\0\7\140\11\0\3\141"+
    "\2\0\14\141\1\142\75\141\3\143\2\0\15\143\1\142"+
    "\74\143\2\0\1\144\3\0\1\144\3\0\1\144\3\0"+
    "\3\144\2\0\2\144\1\0\1\144\1\145\1\146\30\144"+
    "\1\0\4\144\2\0\1\147\1\150\1\0\1\144\1\0"+
    "\2\144\7\0\1\144\6\0\2\144\71\0\1\151\20\0"+
    "\1\152\5\0\2\13\3\0\1\13\1\134\2\0\1\13"+
    "\3\0\2\13\1\153\10\0\30\13\1\0\4\13\5\0"+
    "\1\13\1\0\2\13\7\0\1\13\6\0\2\13\1\0"+
    "\2\13\3\0\1\13\1\134\2\0\1\154\3\0\3\13"+
    "\10\0\30\13\1\0\4\13\5\0\1\13\1\0\2\13"+
    "\7\0\1\13\6\0\2\13\1\0\2\13\3\0\1\13"+
    "\1\134\2\0\1\13\3\0\3\13\10\0\20\13\1\155"+
    "\7\13\1\0\4\13\5\0\1\13\1\0\2\13\7\0"+
    "\1\13\6\0\2\13\1\0\2\13\3\0\1\13\1\134"+
    "\2\0\1\13\3\0\3\13\10\0\30\13\1\0\1\156"+
    "\3\13\5\0\1\13\1\0\2\13\7\0\1\13\6\0"+
    "\2\13\1\0\2\13\3\0\1\13\1\134\2\0\1\13"+
    "\3\0\3\13\10\0\15\13\1\157\12\13\1\0\1\13"+
    "\1\160\2\13\5\0\1\13\1\0\2\13\7\0\1\13"+
    "\6\0\2\13\1\0\2\13\3\0\1\13\1\134\2\0"+
    "\1\161\3\0\3\13\10\0\7\13\1\162\20\13\1\0"+
    "\4\13\5\0\1\13\1\0\2\13\7\0\1\13\6\0"+
    "\2\13\1\0\1\13\1\163\3\0\1\13\1\134\2\0"+
    "\1\13\3\0\3\13\10\0\30\13\1\0\3\13\1\164"+
    "\5\0\1\13\1\0\2\13\7\0\1\13\6\0\2\13"+
    "\1\0\2\13\3\0\1\13\1\134\2\0\1\165\3\0"+
    "\3\13\10\0\30\13\1\0\4\13\5\0\1\13\1\0"+
    "\2\13\7\0\1\13\6\0\2\13\1\0\2\13\3\0"+
    "\1\13\1\134\2\0\1\166\3\0\3\13\10\0\30\13"+
    "\1\0\4\13\5\0\1\13\1\0\2\13\7\0\1\13"+
    "\6\0\2\13\1\0\2\13\3\0\1\13\1\134\2\0"+
    "\1\167\3\0\3\13\10\0\30\13\1\0\4\13\5\0"+
    "\1\13\1\0\2\13\7\0\1\170\6\0\2\13\67\0"+
    "\1\171\1\0\1\172\116\0\1\173\26\0\2\13\3\0"+
    "\1\13\1\134\2\0\1\13\3\0\3\13\10\0\15\13"+
    "\1\174\12\13\1\0\4\13\5\0\1\13\1\0\2\13"+
    "\7\0\1\13\6\0\2\13\111\0\1\175\117\0\1\176"+
    "\5\0\2\13\3\0\1\13\1\134\2\0\1\177\3\0"+
    "\3\13\10\0\7\13\1\200\20\13\1\0\4\13\5\0"+
    "\1\13\1\0\2\13\7\0\1\13\6\0\2\13\4\0"+
    "\1\72\136\0\1\201\73\0\2\13\3\0\1\13\1\134"+
    "\2\0\1\154\3\0\3\13\10\0\11\13\1\202\16\13"+
    "\1\0\4\13\5\0\1\13\1\0\2\13\7\0\1\13"+
    "\6\0\2\13\1\0\2\13\3\0\1\13\1\134\2\0"+
    "\1\13\3\0\3\13\10\0\30\13\1\0\1\203\3\13"+
    "\5\0\1\13\1\0\2\13\7\0\1\13\6\0\2\13"+
    "\1\0\2\13\3\0\1\13\1\134\2\0\1\161\3\0"+
    "\3\13\10\0\3\13\1\204\3\13\1\162\20\13\1\0"+
    "\4\13\5\0\1\13\1\0\2\13\7\0\1\13\6\0"+
    "\2\13\5\0\1\17\53\0\1\77\36\0\2\13\3\0"+
    "\1\13\1\134\2\0\1\167\3\0\3\13\10\0\7\13"+
    "\1\205\20\13\1\0\4\13\5\0\1\13\1\0\2\13"+
    "\7\0\1\170\6\0\2\13\33\0\1\206\1\0\1\207"+
    "\15\0\1\210\1\0\1\211\7\0\1\212\31\0\21\213"+
    "\1\102\75\213\22\214\1\102\74\214\53\0\2\215\101\0"+
    "\2\216\57\0\2\110\3\0\2\110\1\0\2\110\3\0"+
    "\3\110\2\0\2\110\1\0\1\110\2\0\30\110\1\0"+
    "\4\110\5\0\1\110\1\0\2\110\7\0\1\110\6\0"+
    "\2\110\4\0\1\102\117\0\1\112\53\0\1\112\45\0"+
    "\1\217\3\0\2\102\61\0\7\102\13\0\1\144\3\0"+
    "\1\144\3\0\1\144\3\0\3\144\2\0\2\144\1\0"+
    "\1\144\2\0\30\144\1\0\4\144\2\0\1\147\2\0"+
    "\1\144\1\0\2\144\7\0\1\144\6\0\2\144\67\0"+
    "\1\107\30\0\2\125\3\0\1\125\1\220\2\0\1\125"+
    "\3\0\3\125\10\0\30\125\1\0\4\125\5\0\1\125"+
    "\1\0\2\125\7\0\1\125\6\0\2\125\1\0\2\125"+
    "\3\0\1\125\1\220\2\0\1\125\3\0\3\125\10\0"+
    "\13\125\1\221\14\125\1\0\4\125\5\0\1\125\1\0"+
    "\2\125\7\0\1\125\6\0\2\125\1\0\2\125\3\0"+
    "\1\125\1\220\2\0\1\125\3\0\3\125\10\0\3\125"+
    "\1\222\24\125\1\0\4\125\5\0\1\125\1\0\2\125"+
    "\7\0\1\125\6\0\2\125\1\0\2\125\3\0\1\125"+
    "\1\220\2\0\1\125\3\0\3\125\10\0\11\125\1\223"+
    "\16\125\1\0\4\125\5\0\1\125\1\0\2\125\7\0"+
    "\1\125\6\0\2\125\1\0\2\125\3\0\1\125\1\220"+
    "\2\0\1\125\3\0\3\125\10\0\30\125\1\0\1\224"+
    "\3\125\5\0\1\125\1\0\2\125\7\0\1\125\6\0"+
    "\2\125\1\0\2\13\3\0\1\13\1\134\2\0\1\13"+
    "\3\0\3\13\10\0\30\13\1\0\1\13\1\225\2\13"+
    "\5\0\1\13\1\0\2\13\7\0\1\13\6\0\2\13"+
    "\1\0\1\226\14\0\3\226\10\0\1\226\1\0\1\226"+
    "\1\0\1\226\1\0\1\226\1\0\1\226\1\0\1\226"+
    "\1\0\1\226\1\0\1\226\1\0\1\226\1\0\1\226"+
    "\1\0\1\226\1\0\1\226\13\0\1\226\1\0\2\226"+
    "\21\0\2\144\3\0\2\144\1\0\2\144\3\0\3\144"+
    "\2\0\2\144\1\0\1\144\2\0\30\144\1\0\4\144"+
    "\5\0\1\144\1\0\2\144\7\0\1\144\6\0\2\144"+
    "\31\0\2\227\66\0\1\144\3\0\1\144\3\0\1\144"+
    "\3\0\3\144\2\0\2\144\1\0\1\144\2\0\30\144"+
    "\1\0\4\144\5\0\1\144\1\0\2\144\7\0\1\144"+
    "\6\0\2\144\1\0\2\13\3\0\1\13\1\134\2\0"+
    "\1\13\3\0\1\230\2\13\10\0\30\13\1\0\4\13"+
    "\5\0\1\13\1\0\2\13\7\0\1\13\6\0\2\13"+
    "\1\0\1\13\1\231\3\0\1\13\1\134\2\0\1\13"+
    "\3\0\3\13\10\0\30\13\1\0\4\13\5\0\1\13"+
    "\1\0\2\13\7\0\1\13\6\0\2\13\1\0\2\13"+
    "\3\0\1\13\1\134\2\0\1\13\3\0\3\13\10\0"+
    "\30\13\1\0\4\13\5\0\1\13\1\0\1\232\1\13"+
    "\7\0\1\13\6\0\2\13\1\0\2\13\3\0\1\13"+
    "\1\134\2\0\1\13\3\0\3\13\10\0\21\13\1\233"+
    "\6\13\1\0\3\13\1\234\5\0\1\13\1\0\2\13"+
    "\7\0\1\13\6\0\2\13\1\0\2\13\3\0\1\13"+
    "\1\134\2\0\1\13\3\0\3\13\10\0\30\13\1\0"+
    "\1\13\1\235\2\13\5\0\1\13\1\0\2\13\7\0"+
    "\1\13\6\0\2\13\1\0\2\13\3\0\1\13\1\134"+
    "\2\0\1\13\3\0\3\13\10\0\11\13\1\236\16\13"+
    "\1\0\4\13\5\0\1\13\1\0\2\13\7\0\1\13"+
    "\6\0\2\13\1\0\2\13\3\0\1\13\1\134\2\0"+
    "\1\13\3\0\3\13\10\0\30\13\1\0\3\13\1\237"+
    "\5\0\1\13\1\0\2\13\7\0\1\13\6\0\2\13"+
    "\1\0\2\13\3\0\1\13\1\134\2\0\1\13\3\0"+
    "\3\13\10\0\21\13\1\240\6\13\1\0\4\13\5\0"+
    "\1\13\1\0\2\13\7\0\1\13\6\0\2\13\1\0"+
    "\2\13\3\0\1\13\1\134\2\0\1\13\3\0\3\13"+
    "\10\0\27\13\1\241\1\0\4\13\5\0\1\13\1\0"+
    "\2\13\7\0\1\13\6\0\2\13\1\0\2\13\3\0"+
    "\1\13\1\134\2\0\1\13\3\0\3\13\10\0\27\13"+
    "\1\242\1\0\4\13\5\0\1\13\1\0\2\13\7\0"+
    "\1\13\6\0\2\13\1\0\2\13\3\0\1\13\1\134"+
    "\2\0\1\13\3\0\3\13\10\0\30\13\1\0\2\13"+
    "\1\243\1\13\5\0\1\13\1\0\2\13\7\0\1\13"+
    "\6\0\2\13\1\0\2\13\3\0\1\13\1\134\2\0"+
    "\1\13\3\0\3\13\10\0\30\13\1\0\1\13\1\244"+
    "\2\13\5\0\1\13\1\0\2\13\7\0\1\13\6\0"+
    "\2\13\1\0\2\13\3\0\1\13\1\134\2\0\1\13"+
    "\3\0\3\13\10\0\5\13\1\245\22\13\1\0\4\13"+
    "\5\0\1\13\1\0\2\13\7\0\1\13\6\0\2\13"+
    "\1\0\2\13\3\0\1\13\1\134\2\0\1\13\3\0"+
    "\3\13\10\0\30\13\1\0\1\246\3\13\5\0\1\13"+
    "\1\0\2\13\7\0\1\13\6\0\2\13\43\0\1\247"+
    "\124\0\1\250\140\0\1\251\120\0\1\252\61\0\1\253"+
    "\133\0\2\254\107\0\2\255\47\0\1\256\14\0\3\256"+
    "\10\0\1\256\1\0\1\256\1\0\1\256\1\0\1\256"+
    "\1\0\1\256\1\0\1\256\1\0\1\256\1\0\1\256"+
    "\1\0\1\256\1\0\1\256\1\0\1\256\1\0\1\256"+
    "\13\0\1\256\1\0\2\256\21\0\2\125\3\0\1\125"+
    "\1\220\2\0\1\125\3\0\3\125\10\0\7\125\1\257"+
    "\20\125\1\0\4\125\5\0\1\125\1\0\2\125\7\0"+
    "\1\125\6\0\2\125\1\0\2\125\3\0\1\125\1\220"+
    "\2\0\1\125\3\0\3\125\10\0\30\125\1\0\2\125"+
    "\1\260\1\125\5\0\1\125\1\0\2\125\7\0\1\125"+
    "\6\0\2\125\1\0\2\125\3\0\1\125\1\220\2\0"+
    "\1\125\3\0\3\125\10\0\13\125\1\261\14\125\1\0"+
    "\4\125\5\0\1\125\1\0\2\125\7\0\1\125\6\0"+
    "\2\125\1\0\2\125\3\0\1\125\1\220\2\0\1\125"+
    "\3\0\3\125\10\0\30\125\1\0\1\125\1\262\2\125"+
    "\5\0\1\125\1\0\2\125\7\0\1\125\6\0\2\125"+
    "\1\0\1\140\14\0\3\140\10\0\1\140\1\0\1\140"+
    "\1\0\1\140\1\0\1\140\1\0\1\140\1\0\1\140"+
    "\1\0\1\140\1\0\1\140\1\0\1\140\1\0\1\140"+
    "\1\0\1\140\1\0\1\140\13\0\1\140\1\0\2\140"+
    "\53\0\2\263\63\0\2\13\3\0\1\13\1\134\2\0"+
    "\1\13\3\0\3\13\10\0\30\13\1\0\4\13\5\0"+
    "\1\13\1\0\1\264\1\13\7\0\1\13\6\0\2\13"+
    "\1\0\2\13\3\0\1\13\1\134\2\0\1\13\3\0"+
    "\3\13\10\0\30\13\1\0\4\13\5\0\1\265\1\0"+
    "\2\13\7\0\1\13\6\0\2\13\1\0\2\13\3\0"+
    "\1\13\1\134\2\0\1\13\3\0\3\13\10\0\21\13"+
    "\1\266\6\13\1\0\4\13\5\0\1\13\1\0\2\13"+
    "\7\0\1\13\6\0\2\13\1\0\2\13\3\0\1\13"+
    "\1\134\2\0\1\267\3\0\3\13\10\0\30\13\1\0"+
    "\4\13\5\0\1\13\1\0\2\13\7\0\1\13\6\0"+
    "\2\13\1\0\2\13\3\0\1\13\1\134\2\0\1\13"+
    "\3\0\3\13\10\0\3\13\1\270\24\13\1\0\4\13"+
    "\5\0\1\13\1\0\2\13\7\0\1\13\6\0\2\13"+
    "\1\0\2\13\3\0\1\13\1\134\2\0\1\13\3\0"+
    "\3\13\10\0\23\13\1\271\4\13\1\0\4\13\5\0"+
    "\1\13\1\0\2\13\7\0\1\13\6\0\2\13\1\0"+
    "\1\13\1\272\3\0\1\13\1\134\2\0\1\13\3\0"+
    "\3\13\10\0\30\13\1\0\4\13\5\0\1\13\1\0"+
    "\2\13\7\0\1\13\6\0\2\13\1\0\2\13\3\0"+
    "\1\13\1\134\2\0\1\13\3\0\3\13\10\0\7\13"+
    "\1\273\20\13\1\0\4\13\5\0\1\13\1\0\2\13"+
    "\7\0\1\13\6\0\2\13\1\0\2\13\3\0\1\13"+
    "\1\134\2\0\1\13\3\0\3\13\10\0\21\13\1\274"+
    "\6\13\1\0\4\13\5\0\1\13\1\0\2\13\7\0"+
    "\1\13\6\0\2\13\1\0\2\13\3\0\1\13\1\134"+
    "\2\0\1\13\3\0\3\13\10\0\30\13\1\0\1\275"+
    "\3\13\5\0\1\13\1\0\2\13\7\0\1\13\6\0"+
    "\2\13\1\0\2\13\3\0\1\13\1\134\2\0\1\13"+
    "\3\0\3\13\10\0\7\13\1\276\20\13\1\0\4\13"+
    "\5\0\1\13\1\0\2\13\7\0\1\13\6\0\2\13"+
    "\1\0\2\13\3\0\1\13\1\134\2\0\1\13\3\0"+
    "\3\13\10\0\30\13\1\0\1\277\3\13\5\0\1\13"+
    "\1\0\2\13\7\0\1\13\6\0\2\13\1\0\2\13"+
    "\3\0\1\13\1\134\2\0\1\13\3\0\3\13\10\0"+
    "\7\13\1\300\20\13\1\0\4\13\5\0\1\13\1\0"+
    "\2\13\7\0\1\13\6\0\2\13\37\0\1\301\154\0"+
    "\1\302\41\0\1\303\171\0\1\304\105\0\1\305\105\0"+
    "\2\306\115\0\2\102\45\0\1\102\14\0\3\102\10\0"+
    "\1\102\1\0\1\102\1\0\1\102\1\0\1\102\1\0"+
    "\1\102\1\0\1\102\1\0\1\102\1\0\1\102\1\0"+
    "\1\102\1\0\1\102\1\0\1\102\1\0\1\102\13\0"+
    "\1\102\1\0\2\102\21\0\2\125\3\0\1\125\1\220"+
    "\2\0\1\125\3\0\3\125\10\0\27\125\1\307\1\0"+
    "\4\125\5\0\1\125\1\0\2\125\7\0\1\125\6\0"+
    "\2\125\1\0\2\125\3\0\1\125\1\220\2\0\1\125"+
    "\3\0\3\125\10\0\30\125\1\0\3\125\1\310\5\0"+
    "\1\125\1\0\2\125\7\0\1\125\6\0\2\125\1\0"+
    "\2\125\3\0\1\125\1\220\2\0\1\311\3\0\3\125"+
    "\10\0\30\125\1\0\4\125\5\0\1\125\1\0\2\125"+
    "\7\0\1\125\6\0\2\125\1\0\2\125\3\0\1\125"+
    "\1\220\2\0\1\125\3\0\3\125\10\0\30\125\1\0"+
    "\1\312\3\125\5\0\1\125\1\0\2\125\7\0\1\125"+
    "\6\0\2\125\35\0\2\313\61\0\2\13\3\0\1\13"+
    "\1\134\2\0\1\13\3\0\3\13\10\0\22\13\1\314"+
    "\5\13\1\0\4\13\5\0\1\13\1\0\2\13\7\0"+
    "\1\13\6\0\2\13\1\0\2\13\3\0\1\13\1\134"+
    "\2\0\1\13\3\0\3\13\10\0\30\13\1\0\4\13"+
    "\5\0\1\315\1\0\2\13\7\0\1\13\6\0\2\13"+
    "\1\0\2\13\3\0\1\13\1\134\2\0\1\316\3\0"+
    "\3\13\10\0\30\13\1\0\4\13\5\0\1\13\1\0"+
    "\2\13\7\0\1\13\6\0\2\13\1\0\2\13\3\0"+
    "\1\13\1\134\2\0\1\13\3\0\3\13\10\0\30\13"+
    "\1\0\4\13\5\0\1\13\1\0\2\13\7\0\1\317"+
    "\6\0\2\13\1\0\2\13\3\0\1\13\1\134\2\0"+
    "\1\13\3\0\3\13\10\0\21\13\1\320\6\13\1\0"+
    "\4\13\5\0\1\13\1\0\2\13\7\0\1\13\6\0"+
    "\2\13\1\0\2\13\3\0\1\13\1\134\2\0\1\13"+
    "\3\0\3\13\10\0\5\13\1\321\22\13\1\0\4\13"+
    "\5\0\1\13\1\0\2\13\7\0\1\13\6\0\2\13"+
    "\1\0\2\13\3\0\1\13\1\134\2\0\1\322\3\0"+
    "\3\13\10\0\30\13\1\0\4\13\5\0\1\13\1\0"+
    "\2\13\7\0\1\13\6\0\2\13\1\0\2\13\3\0"+
    "\1\13\1\134\2\0\1\13\3\0\3\13\10\0\17\13"+
    "\1\323\10\13\1\0\4\13\5\0\1\13\1\0\2\13"+
    "\7\0\1\13\6\0\2\13\1\0\2\13\3\0\1\13"+
    "\1\134\2\0\1\13\3\0\3\13\10\0\27\13\1\324"+
    "\1\0\4\13\5\0\1\13\1\0\2\13\7\0\1\13"+
    "\6\0\2\13\1\0\2\13\3\0\1\13\1\134\2\0"+
    "\1\13\3\0\3\13\10\0\21\13\1\325\6\13\1\0"+
    "\4\13\5\0\1\13\1\0\2\13\7\0\1\13\6\0"+
    "\2\13\1\0\2\13\3\0\1\13\1\134\2\0\1\13"+
    "\3\0\3\13\10\0\27\13\1\326\1\0\4\13\5\0"+
    "\1\13\1\0\2\13\7\0\1\13\6\0\2\13\57\0"+
    "\1\327\132\0\1\330\26\0\1\331\2\332\66\0\1\332"+
    "\42\0\1\333\136\0\1\334\135\0\2\335\37\0\2\125"+
    "\3\0\1\125\1\220\2\0\1\125\3\0\3\125\10\0"+
    "\3\125\1\336\24\125\1\0\4\125\5\0\1\125\1\0"+
    "\2\125\7\0\1\125\6\0\2\125\1\0\2\125\3\0"+
    "\1\125\1\220\2\0\1\125\3\0\3\125\10\0\7\125"+
    "\1\337\20\125\1\0\4\125\5\0\1\125\1\0\2\125"+
    "\7\0\1\125\6\0\2\125\1\0\2\125\3\0\1\125"+
    "\1\220\2\0\1\125\3\0\3\125\10\0\17\125\1\340"+
    "\10\125\1\0\4\125\5\0\1\125\1\0\2\125\7\0"+
    "\1\125\6\0\2\125\37\0\2\341\57\0\2\13\3\0"+
    "\1\13\1\134\2\0\1\13\3\0\3\13\10\0\20\13"+
    "\1\342\7\13\1\0\4\13\5\0\1\13\1\0\2\13"+
    "\7\0\1\13\6\0\2\13\1\0\2\13\3\0\1\13"+
    "\1\134\2\0\1\13\3\0\3\13\10\0\30\13\1\0"+
    "\1\13\1\343\2\13\5\0\1\13\1\0\2\13\7\0"+
    "\1\13\6\0\2\13\1\0\2\13\3\0\1\13\1\134"+
    "\2\0\1\13\3\0\3\13\10\0\7\13\1\344\20\13"+
    "\1\0\4\13\5\0\1\13\1\0\2\13\7\0\1\13"+
    "\6\0\2\13\1\0\2\13\3\0\1\13\1\134\2\0"+
    "\1\13\3\0\3\13\10\0\15\13\1\345\12\13\1\0"+
    "\4\13\5\0\1\13\1\0\2\13\7\0\1\13\6\0"+
    "\2\13\1\0\2\13\3\0\1\13\1\134\2\0\1\13"+
    "\3\0\3\13\10\0\27\13\1\346\1\0\4\13\5\0"+
    "\1\13\1\0\2\13\7\0\1\13\6\0\2\13\1\0"+
    "\2\13\3\0\1\13\1\134\2\0\1\13\3\0\3\13"+
    "\10\0\30\13\1\0\1\347\3\13\5\0\1\13\1\0"+
    "\2\13\7\0\1\13\6\0\2\13\1\0\2\13\3\0"+
    "\1\13\1\134\2\0\1\13\3\0\3\13\10\0\30\13"+
    "\1\0\3\13\1\350\5\0\1\13\1\0\2\13\7\0"+
    "\1\13\6\0\2\13\1\0\2\13\3\0\1\13\1\134"+
    "\2\0\1\13\3\0\3\13\10\0\5\13\1\351\22\13"+
    "\1\0\4\13\5\0\1\13\1\0\2\13\7\0\1\13"+
    "\6\0\2\13\33\0\1\352\156\0\1\353\27\0\1\332"+
    "\115\0\1\354\2\355\66\0\1\355\102\0\1\356\73\0"+
    "\2\102\61\0\2\125\3\0\1\125\1\220\2\0\1\125"+
    "\3\0\3\125\10\0\30\125\1\0\2\125\1\357\1\125"+
    "\5\0\1\125\1\0\2\125\7\0\1\125\6\0\2\125"+
    "\1\0\2\125\3\0\1\125\1\220\2\0\1\125\3\0"+
    "\3\125\10\0\30\125\1\0\1\125\1\360\2\125\5\0"+
    "\1\125\1\0\2\125\7\0\1\125\6\0\2\125\41\0"+
    "\2\361\55\0\2\13\3\0\1\13\1\134\2\0\1\13"+
    "\3\0\3\13\10\0\6\13\1\362\21\13\1\0\4\13"+
    "\5\0\1\13\1\0\2\13\7\0\1\13\6\0\2\13"+
    "\1\0\2\13\3\0\1\13\1\134\2\0\1\13\3\0"+
    "\3\13\10\0\5\13\1\363\22\13\1\0\4\13\5\0"+
    "\1\13\1\0\2\13\7\0\1\13\6\0\2\13\1\0"+
    "\2\13\3\0\1\13\1\134\2\0\1\13\3\0\3\13"+
    "\10\0\21\13\1\364\6\13\1\0\4\13\5\0\1\13"+
    "\1\0\2\13\7\0\1\13\6\0\2\13\1\0\2\13"+
    "\1\365\2\366\1\13\1\134\2\0\1\13\3\0\3\13"+
    "\10\0\30\13\1\0\4\13\5\0\1\13\1\366\2\13"+
    "\7\0\1\13\6\0\2\13\1\0\2\13\1\367\2\370"+
    "\1\13\1\134\2\0\1\13\3\0\3\13\10\0\30\13"+
    "\1\0\4\13\5\0\1\13\1\370\2\13\7\0\1\13"+
    "\6\0\2\13\76\0\1\371\23\0\1\372\2\373\66\0"+
    "\1\373\26\0\1\355\150\0\1\374\61\0\2\125\3\0"+
    "\1\125\1\220\2\0\1\125\3\0\3\125\10\0\30\125"+
    "\1\0\1\375\3\125\5\0\1\125\1\0\2\125\7\0"+
    "\1\125\6\0\2\125\1\0\2\125\3\0\1\125\1\220"+
    "\2\0\1\125\3\0\3\125\10\0\23\125\1\376\4\125"+
    "\1\0\4\125\5\0\1\125\1\0\2\125\7\0\1\125"+
    "\6\0\2\125\43\0\2\377\53\0\2\13\1\u0100\2\u0101"+
    "\1\13\1\134\2\0\1\13\3\0\3\13\10\0\30\13"+
    "\1\0\4\13\5\0\1\13\1\u0101\2\13\7\0\1\13"+
    "\6\0\2\13\1\0\2\13\1\u0102\2\u0103\1\13\1\134"+
    "\2\0\1\13\3\0\3\13\10\0\30\13\1\0\4\13"+
    "\5\0\1\13\1\u0103\2\13\7\0\1\13\6\0\2\13"+
    "\4\0\1\366\116\0\1\370\205\0\1\u0104\27\0\1\373"+
    "\136\0\1\u0105\73\0\2\125\3\0\1\125\1\220\2\0"+
    "\1\125\3\0\3\125\10\0\21\125\1\u0106\6\125\1\0"+
    "\4\125\5\0\1\125\1\0\2\125\7\0\1\125\6\0"+
    "\2\125\1\0\2\125\3\0\1\125\1\220\2\0\1\125"+
    "\3\0\3\125\10\0\5\125\1\u0107\22\125\1\0\4\125"+
    "\5\0\1\125\1\0\2\125\7\0\1\125\6\0\2\125"+
    "\12\0\1\u0108\5\0\1\u0108\102\0\1\u0101\116\0\1\u0103"+
    "\115\0\1\u0109\2\u010a\66\0\1\u010a\23\0\2\125\3\0"+
    "\1\125\1\220\2\0\1\125\3\0\3\125\10\0\7\125"+
    "\1\u010b\20\125\1\0\4\125\5\0\1\125\1\0\2\125"+
    "\7\0\1\125\6\0\2\125\4\0\1\u010a\113\0\2\125"+
    "\3\0\1\125\1\220\2\0\1\125\3\0\3\125\10\0"+
    "\3\125\1\u010c\24\125\1\0\4\125\5\0\1\125\1\0"+
    "\2\125\7\0\1\125\6\0\2\125\1\0\2\125\3\0"+
    "\1\125\1\220\2\0\1\125\3\0\3\125\10\0\30\125"+
    "\1\0\1\125\1\u010d\2\125\5\0\1\125\1\0\2\125"+
    "\7\0\1\125\6\0\2\125";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14615];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\1\1\11\3\1\1\11\1\1\3\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\11\15\1\1\11\1\1"+
    "\10\11\1\1\2\11\2\1\2\11\2\1\1\11\7\1"+
    "\1\11\4\1\1\11\6\1\3\11\1\1\1\11\1\1"+
    "\1\11\5\1\2\11\1\0\2\1\1\0\1\11\1\0"+
    "\1\11\1\0\1\1\1\11\2\0\3\11\16\1\3\11"+
    "\1\1\2\11\2\1\1\11\4\1\13\0\5\1\2\0"+
    "\17\1\10\0\4\1\1\0\15\1\6\0\4\1\1\0"+
    "\13\1\2\0\1\1\1\11\3\0\3\1\1\0\10\1"+
    "\2\0\1\1\1\11\1\0\2\1\1\0\4\1\1\11"+
    "\1\1\1\11\1\0\1\1\1\11\1\0\2\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\0\1\11\2\1\1\11"+
    "\1\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public _ParserLexer() {
      this((java.io.Reader) null);
    }

    public _ParserLexer(boolean highlightMode) {
      this((java.io.Reader) null);
    }


  public _ParserLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ParserLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1294) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 50: 
          { yybegin(YYINITIAL); return ParserTokenTypes.XOR;
          }
        case 89: break;
        case 69: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_TYPE_KEYWORD;
          }
        case 90: break;
        case 62: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITGT;
          }
        case 91: break;
        case 16: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DIV;
          }
        case 92: break;
        case 18: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DOLLAR;
          }
        case 93: break;
        case 74: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_PARAM_KEYWORD;
          }
        case 94: break;
        case 70: 
          { yybegin(YYINITIAL); return ParserTokenTypes.CLASS_STATIC_KEYWORD;
          }
        case 95: break;
        case 7: 
          { yybegin(YYINITIAL); return ParserTokenTypes.USELESS_CHAR;
          }
        case 96: break;
        case 49: 
          { yybegin(YYINITIAL); return ParserTokenTypes.NE;
          }
        case 97: break;
        case 25: 
          { yybegin(YYINITIAL); return ParserTokenTypes.MULT;
          }
        case 98: break;
        case 11: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RBRACE;
          }
        case 99: break;
        case 79: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DEFAULT_KEYWORD;
          }
        case 100: break;
        case 54: 
          { yybegin(YYINITIAL); return ParserTokenTypes.IS_KEYWORD;
          }
        case 101: break;
        case 48: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LE;
          }
        case 102: break;
        case 53: 
          { yybegin(YYINITIAL); return ParserTokenTypes.IF_KEYWORD;
          }
        case 103: break;
        case 9: 
          { yybegin(YYINITIAL); return ParserTokenTypes.PLUS;
          }
        case 104: break;
        case 8: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DOT;
          }
        case 105: break;
        case 58: 
          { yybegin(YYINITIAL); return ParserTokenTypes.EQEQ;
          }
        case 106: break;
        case 22: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LBRACKET;
          }
        case 107: break;
        case 82: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { yybegin(YYINITIAL); return ParserTokenTypes.CLASS_KEYWORD;
          }
        case 108: break;
        case 71: 
          { yybegin(YYINITIAL); return ParserTokenTypes.THROW_KEYWORD;
          }
        case 109: break;
        case 24: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LBRACE;
          }
        case 110: break;
        case 55: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITNE;
          }
        case 111: break;
        case 47: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LTLT;
          }
        case 112: break;
        case 14: 
          { yybegin(YYINITIAL); return ParserTokenTypes.EXCL;
          }
        case 113: break;
        case 57: 
          { yybegin(YYINITIAL); return ParserTokenTypes.GE;
          }
        case 114: break;
        case 67: 
          { yybegin(YYINITIAL); return ParserTokenTypes.CASE_KEYWORD;
          }
        case 115: break;
        case 51: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITLE;
          }
        case 116: break;
        case 56: 
          { yybegin(YYINITIAL); return ParserTokenTypes.GTGT;
          }
        case 117: break;
        case 3: 
          { yybegin(YYINITIAL); return ParserTokenTypes.IDENTIFIER;
          }
        case 118: break;
        case 84: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { yybegin(YYINITIAL); return ParserTokenTypes.PARTIAL_KEYWORD;
          }
        case 119: break;
        case 19: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SEMICOLON;
          }
        case 120: break;
        case 33: 
          { yybegin(YYINITIAL); return ParserTokenTypes.KEY_AT_SIGN;
          }
        case 121: break;
        case 39: 
          { yybegin(TAG_ATTRIBUTES); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 122: break;
        case 85: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_OPTIONAL_KEYWORD;
          }
        case 123: break;
        case 2: 
          { yybegin(YYINITIAL); return ParserTokenTypes.BAD_CHARACTER;
          }
        case 124: break;
        case 61: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITGE;
          }
        case 125: break;
        case 45: 
          { yybegin(YYINITIAL); return ParserTokenTypes.ESCAPE;
          }
        case 126: break;
        case 59: 
          { yybegin(YYINITIAL); return ParserTokenTypes.ANDAND;
          }
        case 127: break;
        case 43: 
          { yybegin(PARSERDOC); return ParserTokenTypes.COMMA;
          }
        case 128: break;
        case 64: 
          { yybegin(YYINITIAL); return ParserTokenTypes.FOR_KEYWORD;
          }
        case 129: break;
        case 40: 
          { yybegin(PARSERDOC); return ParserTokenTypes.BAD_CHARACTER;
          }
        case 130: break;
        case 1: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SHARP_COMMENT;
          }
        case 131: break;
        case 38: 
          { yybegin(ATTRIBUTE_VALUE_SQ); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 132: break;
        case 44: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITEQ;
          }
        case 133: break;
        case 42: 
          { yybegin(PARSERDOC); return ParserTokenTypes.NEW_LINE_INDENT;
          }
        case 134: break;
        case 29: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TILDE;
          }
        case 135: break;
        case 76: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RESULT_KEYWORD;
          }
        case 136: break;
        case 4: 
          { yybegin(YYINITIAL); return ParserTokenTypes.NEW_LINE;
          }
        case 137: break;
        case 68: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SELF_KEYWORD;
          }
        case 138: break;
        case 87: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 8;
          { yybegin(YYINITIAL); return ParserTokenTypes.OPTIONS_KEYWORD;
          }
        case 139: break;
        case 26: 
          { yybegin(YYINITIAL); return ParserTokenTypes.PERC;
          }
        case 140: break;
        case 17: 
          { yybegin(YYINITIAL); return ParserTokenTypes.AT_SIGN;
          }
        case 141: break;
        case 21: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RPAR;
          }
        case 142: break;
        case 81: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { yybegin(YYINITIAL); return ParserTokenTypes.STATIC_KEYWORD;
          }
        case 143: break;
        case 30: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DIR;
          }
        case 144: break;
        case 13: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LT;
          }
        case 145: break;
        case 77: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SWITCH_KEYWORD;
          }
        case 146: break;
        case 36: 
          { yybegin(ATTRIBUTE_VALUE_START); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 147: break;
        case 27: 
          { yybegin(YYINITIAL); return ParserTokenTypes.AND;
          }
        case 148: break;
        case 66: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TRY_KEYWORD;
          }
        case 149: break;
        case 6: 
          { yybegin(YYINITIAL); return ParserTokenTypes.MINUS;
          }
        case 150: break;
        case 37: 
          { yybegin(ATTRIBUTE_VALUE_DQ); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 151: break;
        case 5: 
          { yybegin(YYINITIAL); return ParserTokenTypes.WHITE_SPACE;
          }
        case 152: break;
        case 75: 
          { yybegin(YYINITIAL); return ParserTokenTypes.CALLER_KEYWORD;
          }
        case 153: break;
        case 73: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { yybegin(YYINITIAL); return ParserTokenTypes.USE_KEYWORD;
          }
        case 154: break;
        case 65: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DEF_KEYWORD;
          }
        case 155: break;
        case 72: 
          { yybegin(YYINITIAL); return ParserTokenTypes.WHILE_KEYWORD;
          }
        case 156: break;
        case 20: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LPAR;
          }
        case 157: break;
        case 46: 
          { yybegin(YYINITIAL); return ParserTokenTypes.STRING_LITERAL;
          }
        case 158: break;
        case 86: 
          { yybegin(DOC_TYPE); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 159: break;
        case 32: 
          { yybegin(LINE_COMMENT); yypushback(1);
          }
        case 160: break;
        case 15: 
          { yybegin(YYINITIAL); return ParserTokenTypes.GT;
          }
        case 161: break;
        case 60: 
          { yybegin(YYINITIAL); return ParserTokenTypes.OROR;
          }
        case 162: break;
        case 52: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITLT;
          }
        case 163: break;
        case 34: 
          { return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 164: break;
        case 78: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { yybegin(YYINITIAL); return ParserTokenTypes.BASE_KEYWORD;
          }
        case 165: break;
        case 83: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { yybegin(YYINITIAL); return ParserTokenTypes.DYNAMIC_KEYWORD;
          }
        case 166: break;
        case 80: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { yybegin(YYINITIAL); return ParserTokenTypes.LOCALS_KEYWORD;
          }
        case 167: break;
        case 28: 
          { yybegin(YYINITIAL); return ParserTokenTypes.OR;
          }
        case 168: break;
        case 35: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 169: break;
        case 88: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_CONSTRUCTOR_KEYWORD;
          }
        case 170: break;
        case 10: 
          { yybegin(YYINITIAL); return ParserTokenTypes.HAT_SIGN;
          }
        case 171: break;
        case 41: 
          { yybegin(PARSERDOC); return ParserTokenTypes.IDENTIFIER;
          }
        case 172: break;
        case 31: 
          { yybegin(YYINITIAL); return ParserTokenTypes.NEW_LINE_INDENT;
          }
        case 173: break;
        case 23: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RBRACKET;
          }
        case 174: break;
        case 12: 
          { yybegin(YYINITIAL); return ParserTokenTypes.COLON;
          }
        case 175: break;
        case 63: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_START;
          }
        case 176: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
