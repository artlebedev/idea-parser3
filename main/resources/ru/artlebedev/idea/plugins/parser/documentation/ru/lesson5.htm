<html>
<head>
    
    
    <title>Урок 5. Пользовательские классы Parser</title><meta content="text/html; charset=utf-8" http-equiv="Content-Type">

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span class="h1"><b>Урок 5. Пользовательские классы Parser
<br />
</b></span>
    </td>
  </tr>
  <tr><td><div class="greenline"></div></td></tr>
</table>
<br />



<span>Во всех предыдущих уроках мы оперировали классами и объектами, предопределенными в Parser. Например, есть уже хорошо знакомый нам класс table, у него существуют свои методы, которые мы широко использовали. Полный список всех методов этого класса можно посмотреть в <a href="tableclass.htm">справочнике</a>. Однако ограничение разработчиков рамками только базовых классов в какой-то момент может стать сдерживающим фактором. «Неспособность не есть благодетель, а есть бессилие…», поэтому для удовлетворения всех потребностей пользователей необходимо иметь возможность создавать собственные (пользовательские) классы объектов со своими методами. На этом уроке мы и создадим средствами Parser новый класс объектов со своими собственными методами. 
<br />

<br />
Объектом, в принципе, может быть все что угодно: форум, гостевая книга, различные разделы и даже целый сайт. Здесь мы подошли к очередному уровню структуризации - на уровне объектов, а не методов. Как мы поступали раньше? Мы выделяли отдельные куски кода в методы и вызывали их, когда они были необходимы. Но в качестве отдельных блоков сайта было бы намного удобнее использовать собственные объекты: для получения форума создаем объект класса «форум», после чего используем его методы, например «удалить сообщение», «показать все сообщения» и поля, например, «количество сообщений». При этом обеспечивается модульный подход на качественно ином уровне, чем простое использование функций. В единую сущность собираются код и данные (методы и поля). Разрозненные ранее методы и переменные объединяются воедино и используются применительно к конкретному объекту - «форуму». В терминах объектно-ориентированного программирования это называется инкапсуляцией.  Кроме того, один раз создав класс форум, его объекты можно использовать в различных проектах, абсолютно ничего не меняя.
<br />

<br />
Работу с пользовательским классом мы покажем на примере гостевой книги, а для начала еще раз напомним порядок работы с объектами в Parser. Сначала необходимо создать объект определенного класса с помощью конструктора, после чего можно вызывать методы объектов этого класса и использовать поля созданного объекта. В случае пользовательского класса ничего не меняется, порядок тот же.
<br />

<br />
Как всегда начнем с определения того, что нам нужно сделать. Правильная постановка задачи - уже половина успеха. Перед началом создания класса нужно точно определить, что будет делать объект класса, то есть решить, какие у него будут методы. Предположим, что нашими методами будут: показ сообщений гостевой книги, показ формы для добавления записи, а также метод, добавляющий сообщение в гостевую книгу. Хранить сообщения будем в базе данных, так же как и новости. 
<br />

<br />
Если с методами класса все более или менее ясно, то некоторая неясность остается с конструктором класса, что же он будет делать? Опираясь на прошлые уроки, мы помним, что для того, чтобы начать работать с объектом класса, его необходимо создать, или проинициализировать. Давайте с помощью конструктора будем получать таблицу с сообщениями, а затем в методе показа сообщений будем пользоваться данными этой таблицы. 
<br />

<br />
С целями определились, займемся реализацией. Прежде всего, создадим таблицу <span class="mono"><b>gbook</b></span><span> в базе данных </span><span class="mono"><b>p3test</b></span><span>:</span><span class="mono">
<br />
<b>
<br />
<table border="1" cellpadding="1"><tr><td align="left" valign="top" width="95">
<span class="mono"><b>id</b>
<br />
</span></td><td align="left" valign="top" width="415">
<span class="mono"><b>int not null auto_increment primary key</b>
<br />
</span></td></tr><tr><td align="left" valign="top" width="95">
<span class="mono"><b>author</b>
<br />
</span></td><td align="left" valign="top" width="415">
<span class="mono"><b>varchar(255)</b>
<br />
</span></td></tr><tr><td align="left" valign="top" width="95">
<span class="mono"><b>email</b>
<br />
</span></td><td align="left" valign="top" width="415">
<span class="mono"><b>varchar(255)</b>
<br />
</span></td></tr><tr><td align="left" valign="top" width="95">
<span class="mono"><b>date</b>
<br />
</span></td><td align="left" valign="top" width="415">
<span class="mono"><b>date</b>
<br />
</span></td></tr><tr><td align="left" valign="top" width="95">
<span class="mono"><b>body</b>
<br />
</span></td><td align="left" valign="top" width="415">
<span class="mono"><b>t</b><b>ext</b>
<br />
</span></td></tr></table>
<br />
</b></span><span>
<br />
Теперь необходимо познакомиться еще с несколькими понятиями Parser  - классом </span><span class="mono"><b><a href="mainclass.htm">MAIN</a></b></span><span> и наследованием. Как уже говорилось, класс является объединяющим понятием для объектов, их методов и полей. Класс </span><span class="mono"><b>MAIN</b></span><span> объединяет в себя методы и переменные, описанные пользователями в файлах </span><span class="mono"><b>auto.p</b></span><span> и запрашиваемом документе (например, </span><span class="mono"><b>index.html</b></span><span>). Каждый следующий уровень вложенности наследует методы, описанные в </span><span class="mono"><b>auto.p</b></span><span> предыдущих уровней каталога. Эти методы, а также методы, описанные в запрашиваемом документе, становятся статическими функциями класса </span><span class="mono"><b>MAIN</b></span><span>, а все переменные, созданные в </span><span class="mono"><b>auto.p</b></span><span> вверх по каталогам и в коде запрошенной страницы, - статическими полями класса </span><span class="mono"><b>MAIN</b></span><span>. 
<br />

<br />
Для пояснения рассмотрим следующую структуру каталогов:
<br />

<br />
</span><span class="mono">&nbsp;&nbsp;&nbsp;/
<br />
&nbsp;&nbsp;&nbsp;|__&nbsp;auto.p
<br />
&nbsp;&nbsp;&nbsp;|__&nbsp;news/
<br />
&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;|___auto.p
<br />
&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;|___index.html
<br />
&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;|___details/
<br />
&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|_______&nbsp;auto.p
<br />
&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|_______index.html
<br />
&nbsp;&nbsp;&nbsp;|__contacts/&nbsp;|
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|_______auto.p
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|_______index.html
<br />
</span><span>
<br />
&nbsp;&nbsp;&nbsp;  
<br />

<br />
При загрузке страницы </span><span class="mono">index.html</span><span> из каталога </span><span class="mono">/news/details/</span><span> класс </span><span class="mono"><b>MAIN</b></span><span> будет динамически «собран» из методов, описанных в корневом файле </span><span class="mono">auto.p</span><span>, а также в файлах </span><span class="mono">auto.p</span><span> разделов </span><span class="mono">/news/</span><span> и </span><span class="mono">/news/details/</span><span>. Методы, описанные в </span><span class="mono">auto.p</span><span> раздела </span><span class="mono">/contacts/</span><span>, будут недоступны для страниц из раздела </span><span class="mono">/news/details/</span><span>.
<br />

<br />
Как «собирается» класс </span><span class="mono"><b>MAIN</b></span><span> теперь понятно, но, прежде чем приступить к созданию собственного класса, необходимо также выяснить, как из <i>пользовательского</i> класса вызывать методы и получать значения переменных класса </span><span class="mono"><b>MAIN</b></span><span>. Методы класса  </span><span class="mono"><b>MAIN</b></span><span> вызываются как статические функции:
<br />

<br />
</span><span class="mono"><b>^MAIN:метод[]</b></span><span>,</span><span class="mono"><b>
<br />
</b></span><span>
<br />
а переменные являются статическими полями класса </span><span class="mono"><b>MAIN</b></span><span>. К ним можно получить доступ так же, как к любым другим статическим полям:
<br />

<br />
</span><span class="mono"><b>$MAIN:поле
<br />
</b></span><span>
<br />
Теперь переходим к практике. В корневой </span><span class="mono"><b>auto.p</b></span><span> добавляем еще один метод, с помощью которого можно будет не только соединяться с БД, но и передавать ей произвольный SQL-запрос:
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>@dbconnect[code]
<br />
^</b></span></span><span class="mono"><span class="monoblue"><b><a href="opconnect.htm">connect</a></b></span></span><span class="mono"><span class="monoblue"><b>[$connect_string]{$code}
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>#&nbsp;connect_string&nbsp;определяется&nbsp;в&nbsp;методе&nbsp;@auto[]
<br />
#&nbsp;$connect_string[</b></span></span><span class="mono"><span class="monoblue"><b><a href="app3mysql.htm">mysql://root@localhost/p3test</a></b></span></span><span class="mono"><span class="monoblue"><b>]</b></span></span><span class="mono"><b>
<br />
</b></span><span>
<br />
Метод вынесен в корневой </span><span class="mono"><b>auto.p</b></span><span> для того, чтобы впоследствии можно было бы легко подключаться к серверу баз данных с любой страницы, поскольку методы из корневого </span><span class="mono"><b>auto.p</b></span><span> будут наследоваться всегда. Обратите внимание на то, что здесь используется передача методу параметра. В нашем случае он один - </span><span class="mono"><b>code</b></span><span>, с его помощью мы и будем передавать код, выполняющий SQL-запросы. Параметров может быть и несколько, в этом случае они указываются через точку с запятой.
<br />

<br />
Дальше в каталоге нашего сайта создаем подкаталог, в которой будем хранить файл с нашим классом, например, </span><span class="mono"><b>classes</b></span><span>. Далее в этом каталоге создаем файл </span><span class="mono">gbook.p</span><span> (пользовательские файлы мы предлагаем хранить в файлах с расширением имени </span><span class="mono">.p</span><span>) и в него заносим следующий код:
<br />

<br />
</span><span class="mono"><span class="monoblue"><b><a href="defineclass.htm">@CLASS</a></b></span></span><span class="mono"><span class="monoblue"><b>
<br />
gbook
<br />

<br />
@load[]
<br />
^MAIN:dbconnect{
<br />
&nbsp;&nbsp;&nbsp;$messages[^</b></span></span><span class="mono"><span class="monoblue"><b><a href="tableclass.htm">table</a></b></span></span><span class="mono"><span class="monoblue"><b>::</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablesql.htm">sql</a></b></span></span><span class="mono"><span class="monoblue"><b>{</b></span></span><span class="mono"><b>select&nbsp;author,&nbsp;email,&nbsp;date,&nbsp;body&nbsp;from&nbsp;gbook</b><span class="monoblue"><b>}]
<br />
}
<br />

<br />
@show_messages[]
<br />
^if($messages){
<br />
&nbsp;&nbsp;&nbsp;^messages.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablemenu.htm">menu</a></b></span></span><span class="mono"><span class="monoblue"><b>{
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;table&nbsp;width="100%"&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;
<br />
</b><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;align=</b><b>"left"</b><b>&gt;&lt;b&gt;</b><span class="monoblue"><b>$messages.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablefields.htm">author</a></b></span></span><span class="mono"><span class="monoblue"><b>
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^if(def&nbsp;$messages.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablefields.htm">email</a></b></span></span><span class="mono"><span class="monoblue"><b>){
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$messages.email
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}{
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Нет&nbsp;электронного&nbsp;адреса
<br />
</b><span class="monoblue"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</b></span></span><span class="mono"><b>&lt;/b&gt;</b><span class="monoblue"><b>
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><b>&lt;/td&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;align=</b><b>"right"</b><b>&gt;</b><span class="monoblue"><b>$messages.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablefields.htm">date</a></b></span></span><span class="mono"><b>&lt;/td&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/table&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;table&nbsp;width="100%"&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;</b><span class="monoblue"><b>$messages.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablefields.htm">body</a></b></span></span><span class="mono"><b>&lt;/td&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/table&gt;
<br />
&nbsp;&nbsp;&nbsp;</b><span class="monoblue"><b>}[</b></span></span><span class="mono"><b>&lt;table&nbsp;wi</b><b>dth="100%"&nbsp;border="0"&nbsp;bgcolor="000000"&nbsp;cellspacing="0"&gt;&nbsp;
<br />
</b><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;&lt;td&gt;&amp;nbsp^;&lt;/td&gt;&lt;/tr&gt;
<br />
&nbsp;&nbsp;&nbsp;&lt;/table&gt;</b><span class="monoblue"><b>]</b></span></span><span class="mono"><b>
<br />
</b><span class="monoblue"><b>}{
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;Гостевая&nbsp;книга&nbsp;пуста.
<br />
</b><span class="monoblue"><b>}
<br />

<br />
@show_form[]
<br />
</b></span></span><span class="mono"><b>&lt;hr&nbsp;/&gt;
<br />
&lt;br&nbsp;/&gt;
<br />

<br />
</b><span class="monoblue"><b>$date[^</b></span></span><span class="mono"><span class="monoblue"><b><a href="datenow.htm">date::now</a></b></span></span><span class="mono"><span class="monoblue"><b>[]]
<br />
</b></span></span><span class="mono"><b>&lt;center&gt;
<br />
&lt;form&nbsp;method=</b><span class="monoblue"><b>"POST"</b></span></span><span class="mono"><b>&gt;
<br />
&lt;p&gt;
<br />
Author&lt;sup&gt;*&lt;/sup&gt;&lt;input&nbsp;name="author"</b><b>&nbsp;/</b><b>&gt;&lt;br&nbsp;/&gt;
<br />
E-mail&amp;nbsp;&amp;nbsp;&lt;input&nbsp;name="email"</b><b>&nbsp;/</b><b>&gt;&lt;br&nbsp;/&gt;</b><b>
<br />
T</b><b>ext&lt;br&nbsp;/&gt;&lt;textarea&nbsp;cols=</b><b>"50"&nbsp;name="text"&nbsp;rows="5"&gt;</b><b>&lt;/textarea&gt;
<br />
&lt;/p&gt;
<br />
&lt;p&gt;
<br />
&lt;input&nbsp;type=</b><b>"submit"&nbsp;value</b><b>="Send"&nbsp;name="post"</b><b>&nbsp;/</b><b>&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
<br />
&lt;input&nbsp;type=</b><b>"reset"&nbsp;value=</b><b>"Cancel"</b><b>&nbsp;/</b><b>&gt;
<br />
&lt;/p&gt;
<br />
&lt;/form&gt;
<br />
&lt;/center&gt;
<br />

<br />
</b><span class="monoblue"><b>@test_and_post_message[]
<br />
^if(</b></span></span><span class="mono"><span class="monoblue"><b><a href="opdef.htm">def</a></b></span></span><span class="mono"><span class="monoblue"><b>&nbsp;$form:post){
<br />
&nbsp;&nbsp;&nbsp;^if(def&nbsp;$form:author){
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^MAIN:dbconnect{
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^</b></span></span><span class="mono"><span class="monoblue"><b><a href="voidsql.htm">void:sql</a></b></span></span><span class="mono"><span class="monoblue"><b>{</b></span></span><span class="mono"><b>insert&nbsp;into&nbsp;gbook
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(author,&nbsp;email,&nbsp;date,&nbsp;body)
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;values&nbsp;(
<br />
</b><span class="monoblue"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'$form:author',
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'$form:email',
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'${date.year}-${date.month}-${date.day}',
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'$form:text'
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><b>)</b><span class="monoblue"><b>}
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$</b></span></span><span class="mono"><span class="monoblue"><b><a href="responsefields.htm">response:location</a></b></span></span><span class="mono"><span class="monoblue"><b>[$</b></span></span><span class="mono"><span class="monoblue"><b><a href="requesturi.htm">request:uri</a></b></span></span><span class="mono"><span class="monoblue"><b>]
<br />
&nbsp;&nbsp;&nbsp;}{
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;center&gt;Поле&nbsp;автор&nbsp;обязательно&nbsp;для&nbsp;заполнения&lt;/center&gt;
<br />
</b><span class="monoblue"><b>&nbsp;&nbsp;&nbsp;}
<br />
}
<br />
</b></span></span><span>
<br />
Посмотрите на код. В первой строке мы говорим, что в этом файле будем хранить пользовательский класс:
<br />

<br />
</span><span class="mono"><b>@CLASS
<br />
</b></span><span><i>
<br />
В том случае если в качестве родительского выступает другой пользовательский класс, его необходимо подключить, а также объявить базовым. Получится такая конструкция:
<br />
</i></span><span class="mono"><b>
<br />
@CLASS
<br />
</b></span><span><i>имя класса  
<br />
</i></span><span class="mono"><b>
<br />
@USE
<br />
</b></span><span><i>файл родительского класса     
<br />

<br />
</i></span><span class="mono"><b>@BASE&nbsp;
<br />
</b></span><span><i>имя родительского класса  &nbsp;&nbsp;&nbsp;
<br />
</i>
<br />
Следующей строкой пишем имя нашего класса </span><span class="mono"><b>gbook</b></span><span>. Необходимо помнить, что Parser чувствителен к регистру букв в именах, поэтому классы </span><span class="mono"><b>gbook</b></span><span> и </span><span class="mono"><b>Gbook</b></span><span> являются разными. При этом имя не обязательно должно совпадать с именем файла, в котором храниться пользовательский класс, более того, может быть набрано русскими буквами. &nbsp;&nbsp;&nbsp;
<br />

<br />
Дальше определяются методы нашего нового класса. Делается это точно так же, как и определение обычных методов, которые мы создавали на предыдущих уроках. 
<br />

<br />
Первый метод </span><span class="mono"><b>load</b></span><span> будет конструктором нашего класса. При этом надо иметь в виду, что задача конструктора - создать объект. Кроме этого, он может объявить переменные и присвоить им значения. Эти переменные станут полями объекта пользовательского класса. В нашем случае мы при помощи конструктора <b>sql</b> класса </span><span class="mono"><b>table</b></span><span> создаем нужную таблицу. Обратите внимание, что в методах нового класса мы свободно пользуемся методами системных классов и методом </span><span class="mono"><b>dbconnect</b></span><span> класса </span><span class="mono"><b>MAIN</b></span><span>:
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>@load[]
<br />
^MAIN:dbconnect{
<br />
&nbsp;&nbsp;&nbsp;$messages[^table::sql{</b></span></span><span class="mono"><b>select&nbsp;author,&nbsp;email,&nbsp;date,&nbsp;body&nbsp;from&nbsp;gbook</b><span class="monoblue"><b>}]
<br />
}
<br />
</b></span></span><span>
<br />
Как уже говорилось выше, поскольку мы находимся за пределами класса </span><span class="mono"><b>MAIN</b></span><span>, для использования методов этого класса перед именем необходимо указать класс, к которому эти методы/поля относятся. Делается это таким образом:
<br />

<br />
</span><span class="mono"><b>^имя_класса:метод[параметры]
<br />
$имя_класса:переменная
<br />
</b></span><span>
<br />
В случае, если мы захотим использовать методы/поля другого пользовательского класса, а не класса </span><span class="mono"><b>MAIN</b></span><span>, необходимо в начале кода выполнять инструкцию:
<br />

<br />
</span><span class="mono"><b>@USE
<br />
путь&nbsp;к&nbsp;файлу,&nbsp;описывающему&nbsp;класс
<br />
</b></span><span>
<br />
Она позволяет использовать модуль, определенный в другом файле. О работе Parser с путями к файлам, рассказано в <a href="app1pathclass.htm">приложении 1</a>.
<br />

<br />
Итак, наш новый конструктор будет создавать таблицу с сообщениями, подключаясь к указанной БД. С конструктором разобрались, начинаем описание собственно методов нового класса. Метод </span><span class="mono"><b>show_messages</b></span><span> нашего класса выводит на экран сообщения из таблицы </span><span class="mono"><b>gb</b></span><span>, созданной в методе </span><span class="mono"><b>load</b></span><span>. Строки перебираются при помощи метода </span><span class="mono"><b>menu</b></span><span> класса </span><span class="mono"><b>table</b></span><span>. Все знакомо, ничего нового нет и в других методах:
<br />

<br />
</span><span class="mono"><b>show_form</b></span><span>  - выводит на экран форму для добавления нового сообщения гостевой книги
<br />

<br />
</span><span class="mono"><b>test_and_post_message</b></span><span> - проверяет, нажата ли кнопка </span><span class="mono"><b>post</b></span><span>, заполнено ли поле author и, если все условия выполнены, заносит сообщение в базу данных, используя все тот же метод </span><span class="mono"><b>dbconnect</b></span><span>, определенный в классе </span><span class="mono"><b>MAIN</b></span><span>
<br />

<br />
На этом создание пользовательского класса, описывающего методы объектов класса </span><span class="mono"><b>gbook</b></span><span>, завершено. Его осталось только подключить для использования на нашем сайте. Перед нами стоит задача сообщить Parser, что на некоторой странице мы собираемся использовать свой класс. Для этого в файле </span><span class="mono"><b>index.html</b></span><span> каталога </span><span class="mono"><b>gbook</b></span><span> в первой строке напишем следующее:
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>@USE
<br />
/classes/gbook.p
<br />
</b></span></span><span>
<br />
Теперь на этой странице можно создать объект класса </span><span class="mono"><b>gbook</b></span><span> и использовать затем его методы. Сделаем это в основной информационной части:
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>@body_main[]
<br />
</b></span></span><span class="mono"><b>Гостевая&nbsp;книга&nbsp;тестового&nbsp;сайта&lt;br&nbsp;/&gt;
<br />
&lt;hr&nbsp;/&gt;
<br />
</b><span class="monoblue"><b>
<br />
$gb[^gbook::load[]]
<br />
^gb.show_messages[]
<br />
^gb.show_form[]
<br />
^gb.test_and_post_message[]
<br />

<br />
</b></span></span><span class="mono"><b>#&nbsp;и&nbsp;конечно&nbsp;же&nbsp;не&nbsp;забываем&nbsp;про&nbsp;остальные&nbsp;части&nbsp;
<br />
</b><span class="monoblue"><b>@greeting[]
<br />
</b></span></span><span class="mono"><b>Оставьте&nbsp;свой&nbsp;след:
<br />
</b><span class="monoblue"><b>
<br />
@body_additional[]
<br />
</b></span></span><span class="mono"><b>Нам&nbsp;пишут…
<br />
</b></span><span>
<br />
Здесь мы уже работаем с объектом созданного пользовательского класса, как с любым другим объектом: создаем его при помощи конструктора класса и вызываем методы, определенные в новом классе. Посмотрите, насколько изящным получилось наше решение. Читабельность кода очевидна и, глядя на этот фрагмент, сразу понятно, что он делает. Все, что относится к гостевой книге, находится в отдельном файле, где описано все, что можно с ней сделать. Если нам понадобится новый метод для работы с гостевой книгой, нужно просто дописать его в файл </span><span class="mono">gbook.p</span><span>. Все очень легко модернизируется, к тому же сразу понятно, где необходимо вносить изменения, если они вдруг понадобились. 
<br />

<br />
В заключение хочется заметить, что изящнее было бы вынести методы вроде </span><span class="mono"><b>dbconnect</b></span><span> из класса </span><span class="mono"><b>MAIN</b></span><span> в отдельный класс. Это позволило бы не перегружать класс </span><span class="mono"><b>MAIN</b></span><span>, улучшилась бы читаемость кода, а также легче стало бы ориентироваться в проекте. Там, где эти нужны методы этого класса, его можно было бы подключать с помощью </span><span class="mono"><b>@USE</b></span><span>.</span><span class="mono"><b>
<br />
</b></span><span>
<br />
Подведем итоги пятого урока. 
<br />

<br />
</span><span class="h1"><b>Что мы сделали:</b></span><span> создали свой собственный класс и на основе объекта этого класса создали гостевую книгу на нашем сайте.
<br />

<br />
</span><span class="h1"><b>Что узнали:
<br />
</b></span><span>
<br />
<table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></span></td><td><span>класс </span><span class="mono"><b><a href="mainclass.htm">MAIN</a></b></span><span>
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span>создание пользовательского класса
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span>как передавать параметры методам 
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td><span></span></td><td></td></tr></table><span>
<br />
</span><span class="h1"><b>Что надо запомнить:</b></span><span> класс является «высшей формой» структуризации, поэтому необходимо стремиться к выделению в отдельные классы кубиков, из которых вы будете строить ваши сайты. Это позволяет достичь максимальной понятности логики работы проектов и дает невероятные удобства в дальнейшей работе.
<br />

<br />
</span><span class="h1"><b>Что делать дальше:</b></span><span> на этом создание нашего учебного сайта можно считать завершенным. Конечно, он далек от идеала и использовать его в таком виде не стоит. Для реального использования необходимо выполнить целый ряд доработок: модифицировать календарь в разделе новостей, в гостевой книге организовать проверку введенных данных на корректность и т.д. Но мы и не ставили задачу сделать полнофункциональный проект. Мы просто хотели показать, что работать с Parser совсем не сложно, а производительность от его использования возрастает существенно. Теперь вы сами обладаете всеми необходимыми базовыми знаниями для полноценной работы с Parser, остается только совершенствовать их и приобретать опыт. 
<br />

<br />
Удачи!
<br />
</span></span><br />




</body>
</html>