<html>
<head>
    
    
    <title>Урок 2. Меню навигации и структура страниц</title><meta content="text/html; charset=utf-8" http-equiv="Content-Type">

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span class="h1"><b>Урок 2. Меню навигации и структура страниц
<br />
</b></span>
    </td>
  </tr>
  <tr><td><div class="greenline"></div></td></tr>
</table>
<br />



<span>Предыдущий урок мы закончили тем, что определили недостатки в реализации меню. Давайте займемся их устранением. Наше меню выводит лишнюю ссылку на текущую страницу, что нисколько не украшает будущий сайт. Чтобы этого избежать, необходимо проверить, не является ли раздел, на который мы выводим ссылку, текущим. Иными словами, нам нужно сравнить URI раздела, на который собираемся ставить ссылку, с текущим URI. В случае если они совпадают, ссылку на раздел ставить не надо. Дополнительно для удобства пользователей мы изменим в меню навигации цвет столбца текущего раздела.
<br />

<br />
Открываем файл <span class="mono">auto.p</span><span> и меняем его содержимое на:
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>@navigation[]
<br />
$sections[^</b></span></span><span class="mono"><span class="monoblue"><b><a href="tableload.htm">table::load</a></b></span></span><span class="mono"><span class="monoblue"><b>[/sections.cfg]]
<br />
</b></span></span><span class="mono"><b>&lt;table&nbsp;width="100%"&nbsp;border="0"&nbsp;bgcolor="#000000"&nbsp;cellspacing="1"&gt;
<br />
&nbsp;&nbsp;&nbsp;&lt;tr&nbsp;&nbsp;bgcolor="#FFFFFF"&gt;</b><b>
<br />
</b><span class="monoblue"><b>&nbsp;&nbsp;&nbsp;^sections.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablemenu.htm">menu</a></b></span></span><span class="mono"><span class="monoblue"><b>{
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^navigation_cell[]
<br />
&nbsp;&nbsp;&nbsp;}
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
<br />
&lt;/table&gt;
<br />
&lt;br&nbsp;/&gt;
<br />

<br />
</b><span class="monoblue"><b>@navigation_cell[]
<br />
$cell_width[^</b></span></span><span class="mono"><span class="monoblue"><b><a href="opeval.htm">eval</a></b></span></span><span class="mono"><span class="monoblue"><b>(100\$sections)%]
<br />
^if($sections.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablefields.htm">uri</a></b></span></span><span class="mono"><span class="monoblue"><b>&nbsp;eq&nbsp;$</b></span></span><span class="mono"><span class="monoblue"><b><a href="requesturi.htm">request:uri</a></b></span></span><span class="mono"><span class="monoblue"><b>){
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&lt;td&nbsp;width="</b><span class="monoblue"><b>$cell_width</b></span></span><span class="mono"><b>"&nbsp;align="center"&nbsp;bgcolor="#A2D0F2"&gt;&nbsp;
<br />
&nbsp;&nbsp;&nbsp;&lt;nobr&gt;</b><span class="monoblue"><b>$sections.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablefields.htm">name</a></b></span></span><span class="mono"><b>&lt;/nobr&gt;
<br />
&nbsp;&nbsp;&nbsp;&lt;/td&gt;</b><b>
<br />
</b><span class="monoblue"><b>}{
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&lt;td&nbsp;width="</b><span class="monoblue"><b>$cell_width</b></span></span><span class="mono"><b>"&nbsp;align="center"&gt;&nbsp;
<br />
&nbsp;&nbsp;&nbsp;&lt;a&nbsp;href="</b><span class="monoblue"><b>$sections.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablefields.htm">uri</a></b></span></span><span class="mono"><b>"&gt;&lt;nobr&gt;</b><span class="monoblue"><b>$sections.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablefields.htm">name</a></b></span></span><span class="mono"><b>&lt;/nobr&gt;&lt;/a&gt;
<br />
&nbsp;&nbsp;&nbsp;&lt;/td&gt;</b><b>
<br />
</b><span class="monoblue"><b>}</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
</b></span></span><span>
<br />
Что изменилось? На первый взгляд не так уж и много, но функциональность нашего модуля существенно возросла. Мы описали еще один метод - </span><span class="mono"><b>navigation_cell</b></span><span>, который вызывается из метода </span><span class="mono"><b>navigation</b></span><span>. В нем появилась новая структура: 
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>^</b></span></span><span class="mono"><span class="monoblue"><b><a href="opif.htm">if</a></b></span></span><span class="mono"><span class="monoblue"><b>(условие){код&nbsp;если&nbsp;условие&nbsp;"истина"}{код&nbsp;если&nbsp;условие&nbsp;"ложь"}</b></span></span><span>
<br />

<br />
Что она делает, понять не сложно. В круглых скобках задается условие, в зависимости от того, какое значение возвращает условие, "ложь" или "истина", можно получить разный результат. Также, если в условии записано выражение, значение которого равно нулю, то результат - "ложь", иначе - "истина". Мы используем оператор </span><span class="mono"><b>if</b></span><span> для того, чтобы в одном случае поставить ссылку на раздел, а другом нет. Осталось только разобраться с условием. Будем сравнивать на равенство две текстовых строки, в одной из которых - значение URI раздела из таблицы </span><span class="mono"><b>sections</b></span><span>, в другой -  текущий URI (</span><span class="mono"><b>$request:uri</b></span><span> возвращает строку, содержащую URI текущей страницы). Тут возникает вопрос о том, какие же строки равны между собой? Несомненно, только те, которые полностью совпадают и по длине, и по символьному содержанию. 
<br />

<br />
Для сравнения двух строк в Parser  предусмотрены следующие <a href="exprops.htm">операторы</a>:
<br />

<br />
</span><span class="mono"><b>eq</b></span><span> - строки равны (<b><i>equal</i></b>): </span><span class="mono"><b>parser&nbsp;eq&nbsp;parser</b>
<br />
<b>ne</b></span><span> - строки не равны (<b><i>not equal</i></b>): </span><span class="mono"><b>parser&nbsp;ne&nbsp;parser3
<br />
lt</b></span><span> - первая строка меньше второй (<b><i>less than</i></b>): </span><span class="mono"><b>parser&nbsp;lt&nbsp;parser3</b></span><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span><span class="mono"><b>gt</b></span><span> - первая строка больше второй (<b><i>greater than</i></b>): </span><span class="mono"><b>parser3&nbsp;gt&nbsp;parser&nbsp;
<br />
le</b></span><span> - первая строка меньше или равна второй (<b><i>less or equal</i></b>)
<br />
</span><span class="mono"><b>ge</b></span><span> - первая строка больше или равна второй (<b><i>greater or equal</i></b>)
<br />

<br />
С условием разобрались: если </span><span class="mono"><b>$sections.uri</b></span><span> и </span><span class="mono"><b>$request:uri</b></span><span> совпадают, ссылку не ставим (а заодно красим столбец в другой цвет - подумаем о наших пользователях, так им будет удобнее), если нет - ставим. 
<br />

<br />
Идем дальше. Меню из первого урока выводило столбцы разной ширины. Ничего страшного, но некрасиво. Проблема решается очень просто: всю ширину меню (100%) делим на количество разделов, которое равно количеству строк в таблице </span><span class="mono"><b>sections</b></span><span>. Для этого воспользуемся оператором </span><span class="mono"><b>^</b><b><a href="opeval.htm">eval</a></b><b>()</b></span><span> и тем, что можно использовать объекты класса </span><span class="mono"><b>table</b></span><span> в математических выражениях. При этом их числовое значение равно числу записей в таблице. Обратите внимание также на то, что мы пользуемся целочисленным делением, используя обратный слеш вместо прямого.
<br />

<br />
На </span><span class="mono"><b>^eval()</b></span><span> остановимся чуть подробнее. Он позволяет получить результат математического выражения без введения дополнительных переменных, иными словами, хотим что-то посчитать - пишем:
<br />

<br />
</span><span class="mono"><b>^eval(выражение)[формат]
<br />
</b></span><span>
<br />
<i>Использование [формат] дает возможность вывода результата выражения в том  виде, который нужен. Форматная строка [%d] отбрасывает дробную часть, [%.2f] дает два знака после запятой, а [%04d] отводит 4 знака под целую часть, дополняя недостающие символы нулями слева.  Форматированный вывод нужен, когда необходимо представить число в определенном виде (скажем, 12.44 $ смотрится куда лучше 12.44373434501 $). 
<br />
</i>
<br />
Вот, собственно, и все, что касается меню. Теперь оно функционально и готово к использованию. 
<br />

<br />
Наш первый кирпичик для будущего сайта готов. Теперь займемся структурой страниц. Давайте разобьем  их на следующие блоки: </span><span class="mono"><b>header</b></span><span> - верхняя часть страницы, </span><span class="mono"><b>body</b></span><span> - основной информационный блок, включающий также наше меню и </span><span class="mono"><b>footer</b></span><span> - нижняя часть страницы. Многие сайты имеют похожую структуру. 
<br />

<br />
</span><span class="mono"><b>Footer</b></span><span> будет для всех страниц одинаковым, </span><span class="mono"><b>header</b></span><span> - для всех страниц одинаковый по стилю, но с разными текстовыми строками - заголовками страницы, а </span><span class="mono"><b>body</b></span><span> будет разный у всех страниц, сохраняя только общую структуру (предположим, два вертикальных информационных блока, соотносящихся по ширине как 3:7). К </span><span class="mono"><b>body</b></span><span> отнесем и наше меню. 
<br />

<br />
Каждая из страниц будет иметь следующую структуру:
<br />

<br />
<table border="1" cellpadding="1"><tr><td align="left" valign="top" width="502" colspan="2">
<span> header
<br />
</span></td></tr><tr><td align="left" valign="top" width="140">
<span>
<br />
 navigation
<br />

<br />
 body_additional
<br />
 (30%)
<br />

<br />
</span></td><td align="left" valign="top" width="361">
<span>
<br />

<br />

<br />
 body_main
<br />
 (70%)
<br />
</span></td></tr><tr><td align="left" valign="top" width="502" colspan="2">
<span> footer
<br />
</span></td></tr></table>
<br />

<br />
Также, как в случае с меню, опишем каждый из этих блоков методом (функцией) на Parser. Давайте подробно разберемся с каждым блоком. 
<br />

<br />
С </span><span class="mono">footer</span><span>все очень просто - в </span><span class="mono">auto.p</span><span> добавляем код: 
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>@footer[]
<br />
</b></span></span><span class="mono"><b>&lt;table&nbsp;width="100%"&nbsp;border="0"&nbsp;bgcolor="#000000"&nbsp;cellspacing="0"&gt;
<br />
&nbsp;&nbsp;&nbsp;&lt;tr&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;/td&gt;
<br />
&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
<br />
&lt;/table&gt;
<br />
</b><span class="monoblue"><b>$now[^</b></span></span><span class="mono"><span class="monoblue"><b><a href="datenow.htm">date::now</a></b></span></span><span class="mono"><span class="monoblue"><b>[]]
<br />
</b></span></span><span class="mono"><b>&lt;font&nbsp;size="-3"&gt;
<br />
&lt;center&gt;Powered&nbsp;by&nbsp;Parser3&lt;br&nbsp;/&gt;</b><span class="monoblue"><b>1997-$now.</b></span></span><span class="mono"><span class="monoblue"><b><a href="datefields.htm">year</a></b></span></span><span class="mono"><b>&lt;/center&gt;
<br />
&lt;/font&gt;
<br />
&lt;/body&gt;
<br />
&lt;/html&gt;</b><b>
<br />
</b></span><span>
<br />
Никаких новых идей здесь нет, разве что мы впервые использовали класс </span><span class="mono"><b><a href="dateclass.htm">date</a></b></span><span> с конструктором </span><span class="mono"><b><a href="datenow.htm">now</a></b></span><span> для получения текущей даты, а затем из объекта класса </span><span class="mono"><b>date</b></span><span> взяли поле </span><span class="mono"><b><a href="datefields.htm">year</a></b></span><span> (год). Если это кажется вам непонятным, обязательно вернитесь к первому уроку, где рассказано о работе с объектами на примере класса </span><span class="mono"><b>table</b></span><span>. Все идентично, только теперь мы имеем дело с объектом другого класса.
<br />

<br />
Немного сложнее с модулем </span><span class="mono"><b>header</b></span><span>. С одной  стороны, нам нужно формировать уникальный заголовок-приветствие для каждой страницы. В то же время он будет одинаковым с точки зрения внешнего вида, различие только в тексте, который будет выводиться. Как же быть? Мы предлагаем сделать следующее: определить в нашем </span><span class="mono">auto.p</span><span> новую функцию </span><span class="mono"><b>header</b></span><span>, внутри которой будет вызываться другая функция - </span><span class="mono"><b>greeting</b></span><span>. А функция </span><span class="mono"><b>greeting</b></span><span>, в свою очередь, будет определяться на самих страницах сайта и содержать только то, чем отличаются заголовки страниц (в нашем случае строку-приветствие). 
<br />

<br />
Дополняем </span><span class="mono">auto.p</span><span> следующим кодом:
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>@header[]
<br />
</b></span></span><span class="mono"><b>&lt;html&gt;
<br />
&lt;head&gt;
<br />
&lt;title&gt;Тестовый&nbsp;сайт&nbsp;Parser3&lt;/title&gt;
<br />
&lt;/head&gt;
<br />
&lt;body&nbsp;bgcolor="#FAEBD7"&gt;
<br />
&lt;table&nbsp;width="100%"&nbsp;border="0"&nbsp;bgcolor="#000000"&nbsp;cellspacing="1"&gt;
<br />
&nbsp;&nbsp;&nbsp;&lt;tr&nbsp;&nbsp;bgcolor="#FFFFFF"&nbsp;height="60"&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;align="center"&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;font&nbsp;size="+2"&gt;&nbsp;&lt;b&gt;</b><span class="monoblue"><b>^greeting[]</b></span></span><span class="mono"><b>&lt;/b&gt;&lt;/font&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/td&gt;
<br />
&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
<br />
&lt;/table&gt;
<br />
&lt;br&nbsp;/&gt;</b><b>
<br />
</b></span><span>
<br />
Теперь внимание, кульминация. Parser позволяет сделать очень интересный финт: определить один раз общую структуру страниц в файле </span><span class="mono">auto.p</span><span>, создать каркас, а затем, используя функции, подобные </span><span class="mono"><b>greeting</b></span><span>, в тексте самих страниц, получать разные по содержанию страницы одинаковой структуры. Как это работает? 
<br />

<br />
В самом начале файла </span><span class="mono">auto.p</span><span> мы определим функцию </span><span class="mono"><b>@main[]</b></span><span>, которая всегда, причем автоматически, исполняется первой. В нее включим вызовы функций, формирующих части страниц. 
<br />

<br />
В начале </span><span class="mono">auto.p</span><span> пишем:</span><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>@main[]
<br />
^header[]
<br />
^body[]
<br />
^footer[]
<br />
</b></span></span><span>
<br />
А для получения уникального заголовка страниц в каждой из них определим функцию </span><span class="mono"><b>greeting</b></span><span>, которая вызывается из </span><span class="mono"><b>header</b></span><span>:
<br />

<br />
для главной страницы:</span><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span><span class="mono"><span class="monoblue"><b>@greeting[]
<br />
</b></span></span><span class="mono"><b>Добро&nbsp;пожаловать!
<br />
</b></span><span>
<br />
для гостевой книги:
<br />
</span><span class="mono"><span class="monoblue"><b>@greeting[]
<br />
</b></span></span><span class="mono"><b>Оставьте&nbsp;свой&nbsp;след…
<br />
</b></span><span>
<br />
и т.д.
<br />

<br />
Теперь при загрузке, например, главной страницы произойдет следующее:
<br />

<br />
1. Из файла </span><span class="mono">auto.p</span><span> автоматически начнет выполняться </span><span class="mono"><b>main</b></span><span>.
<br />
2. Первой вызывается функция </span><span class="mono"><b>header</b></span><span>, из которой вызывается функция </span><span class="mono"><b>greeting</b></span><span>.
<br />
3. Поскольку функция </span><span class="mono"><b>greeting</b></span><span> определена в коде самой страницы, будет выполнена именно она, вне зависимости от того, определяется она в </span><span class="mono">auto.p</span><span> или нет (происходит переопределение функции). 
<br />
4. Затем выполняются функции </span><span class="mono"><b>body</b></span><span> и </span><span class="mono"><b>footer</b></span><span> из </span><span class="mono"><b>main</b></span><span>.
<br />

<br />
В результате мы получаем страницу, у которой будут все необходимые элементы, а в верхней части дополнительно появится наше уникальное приветствие. Переопределяемые функции носят название  виртуальных. Мы из файла </span><span class="mono">auto.p</span><span> вызываем функцию, которая может быть переопределена на любой из страниц и для каждой из них выполнит свой код. При этом общая структура страниц будет абсолютно одинаковой, и сохранится стилистическое и логическое единство.
<br />

<br />
Осталось описать только основной блок - </span><span class="mono"><b>body</b></span><span>. Как мы договорились, он будет состоять из двух частей, каждую из которых будем создавать своей функцией, например, </span><span class="mono"><b>body_main</b></span><span> и </span><span class="mono"><b>body_additional</b></span><span>, а поскольку навигационное меню, по логике, относится к основной части страниц, вызовем </span><span class="mono"><b>navigation</b></span><span> также из </span><span class="mono"><b>body</b></span><span>. Снова воспользуемся механизмом виртуальных функций. Редактируем </span><span class="mono">auto.p</span><span> - дополняем:
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>@body[]
<br />
^navigation[]
<br />
</b></span></span><span class="mono"><b>&lt;table&nbsp;width="100%"&nbsp;height="65%"&nbsp;border="0"&nbsp;bgcolor="#000000"&nbsp;cellspacing="1"&gt;
<br />
&nbsp;&nbsp;&nbsp;&lt;tr&nbsp;&nbsp;bgcolor="#ffffff"&nbsp;height="100%"&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;width="30%"&nbsp;valign="top"&nbsp;bgcolor="#EFEFEF"&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;b&gt;</b><span class="monoblue"><b>^body_additional[]</b></span></span><span class="mono"><b>&lt;/b&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/td&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;width="70%"&nbsp;valign="top"&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b><span class="monoblue"><b>^body_main[]
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/td&gt;
<br />
&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
<br />
&lt;/table&gt;
<br />
&lt;br&nbsp;/&gt;
<br />
</b></span><span>
<br />
Определение функций  </span><span class="mono"><b>body_main</b></span><span> и </span><span class="mono"><b>body_additional</b></span><span>, также как и в случае с </span><span class="mono"><b>greeting</b></span><span> вставим в страницы:</span><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>@body_additional[]
<br />
</b></span></span><span class="mono"><b>Главная&nbsp;страница&nbsp;сайта
<br />
</b></span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>@body_main[]
<br />
</b></span></span><span class="mono"><b>Основное&nbsp;содержание
<br />
</b></span><span>
<br />
Этот текст приводится как образец для </span><span class="mono">index.html</span><span>. Отлично! Структура окончательно сформирована. Мы описали все необходимые модули в файле </span><span class="mono">auto.p</span><span>, сформировали общую структуру и теперь можем запросто генерировать страницы. Больше не нужно помногу писать одни и те же куски HTML кода. Привычные HTML-страницы трансформируются примерно в следующее (примерное содержание </span><span class="mono">index.html</span><span> файла для главной страницы):
<br />
</span><span class="mono"><b>
<br />
</b><span class="monoblue"><b>@greeting[]
<br />
</b></span></span><span class="mono"><b>Добро&nbsp;пожаловать!
<br />
</b></span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>@body_additional[]
<br />
</b></span></span><span class="mono"><b>Главная&nbsp;страница&nbsp;сайта
<br />
</b></span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>@body_main[]
<br />
</b></span></span><span class="mono"><b>Основное&nbsp;содержание
<br />
</b></span><span>
<br />
Просто и понятно, не правда ли? Все разложено по полочкам и легко доступно. При этом после обработки подобного кода Parser создаст HTML-код страницы, у которой будет уникальный заголовок, меню, основной информационный блок заданной структуры и </span><span class="mono"><b>footer</b></span><span>, одинаковый для каждой страницы. Фактически, мы уже создали готовый сайт, который осталось только наполнить информацией. Это готовое решение для изящного сайта-визитки, который можно создать прямо на глазах. Естественно, это не единственное решение, но такой подход дает отличную структуризацию нашего сайта. Некоторые умственные усилия при разработке структуры с лихвой окупятся легкостью последующей поддержки и модернизации. Каркас хранится в </span><span class="mono">auto.p</span><span>, а все, что относится непосредственно к странице, - в ней самой.
<br />

<br />
Дальше открываются безграничные просторы для фантазии. Допустим, вам понадобилось поменять внешний вид заголовка страниц на сайте. Мы открываем </span><span class="mono">auto.p</span><span>, редактируем один единственный раз функцию </span><span class="mono"><b>@header[]</b></span><span> и на каждой из страниц получаем новый заголовок, по стилю идентичный всем остальным. Для обычного HTML нам пришлось бы вручную переписывать код для каждой страницы. Та же самая ситуация и с остальными модулями. Если возникло желание или необходимость изменить общую структуру страниц, например, добавить какой-то блок, достаточно определить его новой функцией и дополнить функцию </span><span class="mono"><b>main</b></span><span> в </span><span class="mono">auto.p</span><span> ее вызовом.
<br />

<br />
Подобная организация страниц сайта дополняет проект еще одним мощным средством. Предположим, на одной из страниц нам понадобилось получить </span><span class="mono"><b>footer</b></span><span>, отличный от других страниц (напомним, изначально мы предполагали, что </span><span class="mono"><b>footer</b></span><span> везде одинаковый). Единственное, что нужно сделать, это переопределить функцию </span><span class="mono"><b>footer</b></span><span> на нужной странице. Например, такое наполнение </span><span class="mono">/contacts/index.html<b>:
<br />
</b></span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>@greeting[]
<br />
</b></span></span><span class="mono"><b>Наша&nbsp;контактная&nbsp;информация
<br />
</b></span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>@body_additional[]
<br />
</b></span></span><span class="mono"><b>Главная&nbsp;страница&nbsp;тестового&nbsp;сайта
<br />
</b></span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>@body_main[]
<br />
</b></span></span><span class="mono"><b>Основное&nbsp;содержание
<br />
</b></span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>@footer[]
<br />
</b></span></span><span class="mono"><b>Здесь&nbsp;у&nbsp;нас&nbsp;контакты
<br />
</b></span><span>
<br />
изменит привычный </span><span class="mono"><b>footer</b></span><span> на обозначенный выше, т.е. если Parser находит в тексте страницы код для функции, вызываемой из </span><span class="mono">auto.p</span><span>, он выполнит именно его, даже если функция определена в самом </span><span class="mono">auto.p</span><span>. Если же функция не переопределена на странице, то будет использован код из </span><span class="mono">auto.p</span><span>.
<br />

<br />
<i>В заключение немного теории для любознательных. Мы будем давать подобную информацию для тех, кто хочет глубже понимать логику работы Parser. 
<br />

<br />
Помните, мы использовали в нашем коде конструкцию </i></span><span class="mono"><b>$request:uri</b></span><span><i>? Она  отличается по синтаксису от всего того, с чем мы имели дело раньше. Что же это такое? Внешне похоже на </i></span><span class="mono"><b>$объект.свойство</b></span><span><i> (</i><i><a href="lesson1.htm">урок 1</a></i><i>) - значение полей объекта, только вместо точки использовано двоеточие. На самом деле, это тоже значение поля, только не объекта, а самого класса </i></span><span class="mono"><b><a href="requestclass.htm">request</a></b></span><span><i>. В Parser не предусматриваются конструкторы для создания объектов этого класса.  Поля подобных классов формируются самим Parser, а мы можем сразу напрямую обращаться к ним. Техническим языком это называется статическая переменная (поле) </i></span><span class="mono"><b><a href="requesturi.htm">uri</a></b></span><span><i> класса </i></span><span class="mono"><b>request</b></span><span><i>. Она хранит в себе URI текущей страницы. Также, наряду со статическими переменными, существуют статические методы, с которыми мы столкнемся уже в следующем уроке. При этом можно сразу же вызывать их также без создания каких-либо объектов с помощью конструкторов. Запомните, что в синтаксисе статических полей и методов всегда присутствует двоеточие. Если встречается конструкция вида </i></span><span class="mono"><b>$класс:поле</b></span><span><i> - мы получаем значение поля самого класса, а запись </i></span><span class="mono"><b>^класс:метод</b></span><span><i> является вызовом статического метода класса. Например, для работы с математическими функциями в Parser существует класс </i></span><span class="mono"><b><a href="mathclass.htm">math</a></b></span><span><i>. В нем используются только статические методы и переменные:
<br />
</i></span><span style="font-family:Times New Roman; font-size:12pt; color:#000000"><i>
<br />
</i></span><span class="mono"><b>$</b><b><a href="mathstats.htm">math:PI</a></b><b>&nbsp;-&nbsp;</b></span><span><i> возвращает число </i></span><span><i>. Это статическая переменная класса </i></span><span class="mono"><b>math</b></span><span><i>. 
<br />
</i>
<br />
</span><span class="mono"><b>^</b><b><a href="mathrandom.htm">math:random</a></b><b>(100)&nbsp;-&nbsp;</b></span><span><i>возвращает псевдослучайное число из диапазона от 0 до 100. Это статический метод класса </i></span><span class="mono"><b>math</b></span><span><i>.
<br />

<br />
Отличие от записи методов и полей объектов состоит только в двоеточии.
<br />
</i>
<br />
Давайте подведем итоги второго урока. 
<br />

<br />
</span><span class="h1"><b>Что мы сделали:</b></span><span> исправили недостатки в меню навигации, созданном на предыдущем уроке, а также описали новые блоки </span><span class="mono"><b>header</b></span><span>, </span><span class="mono"><b>footer</b></span><span> и </span><span class="mono"><b>body</b></span><span>, формирующие внешний вид страниц нашего сайта. Теперь мы имеем готовое решение для быстрого создания сайта начального уровня.
<br />

<br />
</span><span class="h1"><b>Что узнали:</b></span><span> познакомились с ветвлением кода, научились вставлять в текст страниц результаты математических вычислений, сравнивать строки и получать URI текущей страницы. Также мы узнали новые методы объектов класса table и класса date и познакомились с мощным механизмом виртуальных функций Parser.
<br />

<br />
</span><span class="h1"><b>Что надо запомнить: </b></span><span>первым методом в файле </span><span class="mono">auto.p</span><span> можно определить функцию </span><span class="mono"><b>main</b></span><span>, которая выполняется автоматически. Любая из функций может содержать вызовы других функций. Все вызываемые из </span><span class="mono"><b>main</b></span><span> функции обязательно должны быть определены или в </span><span class="mono">auto.p</span><span>, или в тексте страниц. В случае если функция будет определена и там и там, то больший приоритет имеет функция, определенная в тексте страницы. Она переопределяет одноименную функцию из main (т.н. виртуальная функция) и выполняется вместо нее.
<br />

<br />
</span><span class="h1"><b>Что будем делать дальше:</b></span><span> нет предела совершенству! От создания сайта начального уровня мы переходим к более сложным вещам, таким как работа с формами и базами данных для создания по-настоящему интерактивного сайта. Параллельно с этим познакомимся с новыми возможностями, предоставляемыми Parser для облегчения жизни создателям сайтов.
<br />
</span></span><br />




</body>
</html>