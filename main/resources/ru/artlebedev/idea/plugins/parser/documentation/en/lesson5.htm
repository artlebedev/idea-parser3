<html>
<head>
    
    
    <title>Lesson 5. User-defined classes in Parser</title><meta content="text/html; charset=utf-8" http-equiv="Content-Type">

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span class="h1"><b>Lesson 5. User-defined classes in Parser
<br />
</b></span>
    </td>
  </tr>
  <tr><td><div class="greenline"></div></td></tr>
</table>
<br />



<span>In all previous lessons we manipulated classes and objects predefined in Parser, such as class <span class="mono"><b><a href="tableclass.htm">table</a></b></span><span>. This class has its own methods, which we have widely used. The list of all its methods can be found in the reference. Still, if a language doesn't extend beyond basic classes, it may finally become a serious limitation. To satisfy all users' needs we allow them to create their own (user-defined) classes with methods and fields. In this lesson we will create a new class of objects.
<br />

<br />
Actually, anything may be an object: forum, guestbook, different sections or even entire site. Here we have approached the next stage of structuring-structuring at the level of objects, not methods. What did we do in previous lessons? We just divided separate code pieces into methods and called them when necessary. However, our script could be greatly improved if we included our own objects. For instance, we could create a class </span><span class="mono"><b>forum</b></span><span> and use its methods: "delete message," or "show all messages" and fields, such as "number of messages". By this we provide a modular approach, which is significantly better than just using multiple scattered and unrelated functions: all code and data (methods and fields) are assembled into one whole and used with one certain object, which is "forum". In terminology used by document-oriented programming such an approach is called 'encapsulation.' Moreover, having once created class </span><span class="mono"><b>forum</b></span><span> for one project, we can use it for different projects without changing anything in it.
<br />

<br />
Before we start explaining user-defined classes by the example of guestbook, which we are going to create during this lesson, we would like to remind you of the logic of working with objects. First, we must create an object of a certain class with the help of constructor and then call methods of an object of the class or the fields of the object we have created. When working with user-defined classes, we do just the same, keeping to the same sequence.
<br />

<br />
Let's again start with determining what we're going to do, since, as we'd say, clearly indicated target is half the battle. Thus, before creating a class we must understand exactly what an object of the class will do (in other words, what <i>methods</i> it will have). Let's assume our methods will: a) display messages in guestbook; b) output a form, which a visitor will need to fill to add a new message; and c) process new message and add it to guestbook. We will store our messages in DB-the same way we did with our news.
<br />

<br />
While it seems quite clear with methods of a class is quite clear, the essence of constructor remains rather vague. As we know from our previous lessons, to start working with an object we must first create it. Let's use a constructor to create a table with messages which will be further used by the method responsible for showing them.
<br />

<br />
The task is now clear. Let's now implement it. The first thing we need to do is create table </span><span class="mono"><b>gbook</b></span><span> in DB </span><span class="mono"><b>p3test</b></span><span>:</span><span class="h1">
<br />
</span><span class="mono"><b>
<br />
<table border="1" cellpadding="1"><tr><td align="left" valign="top" width="95">
<span class="mono"><b>id</b>
<br />
</span></td><td align="left" valign="top" width="415">
<span class="mono"><b>int not null auto_increment primary key</b>
<br />
</span></td></tr><tr><td align="left" valign="top" width="95">
<span class="mono"><b>author</b>
<br />
</span></td><td align="left" valign="top" width="415">
<span class="mono"><b>varchar(255)</b>
<br />
</span></td></tr><tr><td align="left" valign="top" width="95">
<span class="mono"><b>email</b>
<br />
</span></td><td align="left" valign="top" width="415">
<span class="mono"><b>varchar(255)</b>
<br />
</span></td></tr><tr><td align="left" valign="top" width="95">
<span class="mono"><b>date</b>
<br />
</span></td><td align="left" valign="top" width="415">
<span class="mono"><b>date</b>
<br />
</span></td></tr><tr><td align="left" valign="top" width="95">
<span class="mono"><b>body</b>
<br />
</span></td><td align="left" valign="top" width="415">
<span class="mono"><b>t</b><b>ext</b>
<br />
</span></td></tr></table>
<br />
</b></span><span>
<br />
Now we should get the idea behind such things in Parser as class </span><span class="mono"><b><a href="mainclass.htm">MAIN</a></b></span><span> and inheritance. As it has been already said, a class is a unity containing all objects, their methods and fields. Class </span><span class="mono"><b>MAIN</b></span><span> combines methods and fields given in </span><span class="mono"><b>auto.p</b></span><span> and the requested document (for example, </span><span class="mono"><b>index.html</b></span><span>). Each level in directory tree inherits methods given in </span><span class="mono"><b>auto.p</b></span><span> files located in parent directories. All these methods, including those given in requested HTML document become static functions of class </span><span class="mono"><b>MAIN</b></span><span> while all variables in </span><span class="mono"><b>auto.p</b></span><span> files and the requested HTML document become static fields of class </span><span class="mono"><b>MAIN</b></span><span>.</span><span class="h1">
<br />
</span><span>
<br />
</span><span class="mono">&nbsp;&nbsp;&nbsp;/
<br />
&nbsp;&nbsp;&nbsp;|__&nbsp;auto.p
<br />
&nbsp;&nbsp;&nbsp;|__&nbsp;news/
<br />
&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;|___auto.p
<br />
&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;|___index.html
<br />
&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;|___details/
<br />
&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|_______&nbsp;auto.p
<br />
&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|_______index.html
<br />
&nbsp;&nbsp;&nbsp;|__contacts/&nbsp;|
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|_______auto.p
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|_______index.html
<br />
</span><span>
<br />
&nbsp;&nbsp;&nbsp;  
<br />

<br />
As a user loads </span><span class="mono"><b>/news/details/index.html</b></span><span>, class </span><span class="mono"><b>MAIN</b></span><span> will be dynamically combined from of methods given in root directory's </span><span class="mono"><b>auto.p</b></span><span>, as well as </span><span class="mono"><b>auto.p</b></span><span> files located in </span><span class="mono"><b>/news/</b></span><span> and </span><span class="mono"><b>/news/details/</b></span><span>. Methods given in </span><span class="mono"><b>/contacts/auto.p</b></span><span> will not be accessible for pages in </span><span class="mono"><b>/news/</b></span><span> and its subdirectories.
<br />

<br />
It is now clear with </span><span class="mono"><b>MAIN</b></span><span>, but, prior to creating a user-defined class, we should first learn how we can call methods and refer to variables contained in class </span><span class="mono"><b>MAIN</b></span><span> from within a user-defined class. Methods of class </span><span class="mono"><b>MAIN</b></span><span> are called as static functions:
<br />

<br />
</span><span class="mono"><b>^MAIN:method[]
<br />
</b></span><span>
<br />
while variables, which are fields of class </span><span class="mono"><b>MAIN</b></span><span>, are referred to as static fields:
<br />

<br />
</span><span class="mono"><b>$MAIN:field
<br />
</b></span><span>
<br />
Let's get to practice now. We add to root directory's </span><span class="mono"><b>auto.p</b></span><span> another method which we can use to connect to DB and send an SQL query.</span><span class="h1">
<br />
</span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>@dbconnect[code]
<br />
^</b></span></span><span class="mono"><span class="monoblue"><b><a href="opconnect.htm">connect</a></b></span></span><span class="mono"><span class="monoblue"><b>[$connect_string]{$code}
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>#&nbsp;connect_string&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>is&nbsp;defined&nbsp;in&nbsp;method&nbsp;@auto[]&nbsp;and&nbsp;is</b></span></span><span class="mono"><span class="monoblue"><b>#&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>$connect_string[</b></span></span><span class="mono"><span class="monoblue"><b><a href="app3mysql.htm">mysql://root@localhost/p3test</a></b></span></span><span class="mono"><span class="monoblue"><b>]</b></span></span><span class="mono"><b>
<br />
</b></span><span>
<br />
We put this method to root auto.p so that the DB server could be easily accessible from any page-methods located in root auto.p will always be inherited. Note: we reserve place for an argument. In our case the argument is one-code, with which we will submit SQL-queries. We can declare more arguments for a method. In this case, we will separate them with semicolon.
<br />

<br />
Further, we create directory-for instance, </span><span class="mono"><b>classes-</b></span><span>in which we will store our user-defined classes. In this directory we create file </span><span class="mono">gbook.p</span><span> (we advise you to store user-defined classes in files with name extension </span><span class="mono">.p</span><span>) and put into it to it the following code:</span><span class="h1">
<br />
</span><span>
<br />
</span><span class="mono"><span class="monoblue"><b><a href="defineclass.htm">@CLASS</a></b></span></span><span class="mono"><span class="monoblue"><b>
<br />
gbook
<br />

<br />
@load[]
<br />
^MAIN:dbconnect{
<br />
&nbsp;&nbsp;&nbsp;$messages[^</b></span></span><span class="mono"><span class="monoblue"><b><a href="tableclass.htm">table</a></b></span></span><span class="mono"><span class="monoblue"><b>::</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablesql.htm">sql</a></b></span></span><span class="mono"><span class="monoblue"><b>{</b></span></span><span class="mono"><b>select&nbsp;author,&nbsp;email,&nbsp;date,&nbsp;body&nbsp;from&nbsp;gbook</b><span class="monoblue"><b>}]
<br />
}
<br />

<br />
@show_messages[]
<br />
^if($messages){
<br />
&nbsp;&nbsp;&nbsp;^messages.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablemenu.htm">menu</a></b></span></span><span class="mono"><span class="monoblue"><b>{
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;table&nbsp;width="100%"&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;
<br />
</b><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;align=</b><b>"left"</b><b>&gt;&lt;b&gt;</b><span class="monoblue"><b>$messages.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablefields.htm">author</a></b></span></span><span class="mono"><span class="monoblue"><b>
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^if(def&nbsp;$messages.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablefields.htm">email</a></b></span></span><span class="mono"><span class="monoblue"><b>){
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$messages.email
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}{
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b><b>No&nbsp;e-mail&nbsp;address
<br />
</b><span class="monoblue"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</b></span></span><span class="mono"><b>&lt;/b&gt;</b><span class="monoblue"><b>
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><b>&lt;/td&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;align=</b><b>"right"</b><b>&gt;</b><span class="monoblue"><b>$messages.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablefields.htm">date</a></b></span></span><span class="mono"><b>&lt;/td&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/table&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;table&nbsp;width="100%"&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;</b><span class="monoblue"><b>$messages.</b></span></span><span class="mono"><span class="monoblue"><b><a href="tablefields.htm">body</a></b></span></span><span class="mono"><b>&lt;/td&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/table&gt;
<br />
&nbsp;&nbsp;&nbsp;</b><span class="monoblue"><b>}[</b></span></span><span class="mono"><b>&lt;table&nbsp;wi</b><b>dth="100%"&nbsp;border="0"&nbsp;bgcolor="000000"&nbsp;cellspacing="0"&gt;&nbsp;
<br />
</b><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;&lt;td&gt;&amp;nbsp^;&lt;/td&gt;&lt;/tr&gt;
<br />
&nbsp;&nbsp;&nbsp;&lt;/table&gt;</b><span class="monoblue"><b>]</b></span></span><span class="mono"><b>
<br />
</b><span class="monoblue"><b>}{
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;</b><b>Guestbook&nbsp;is&nbsp;empty.
<br />
</b><span class="monoblue"><b>}
<br />

<br />
@show_form[]
<br />
</b></span></span><span class="mono"><b>&lt;hr&nbsp;/&gt;
<br />
&lt;br&nbsp;/&gt;
<br />

<br />
</b><span class="monoblue"><b>$date[^</b></span></span><span class="mono"><span class="monoblue"><b><a href="datenow.htm">date::now</a></b></span></span><span class="mono"><span class="monoblue"><b>[]]
<br />
</b></span></span><span class="mono"><b>&lt;center&gt;
<br />
&lt;form&nbsp;method=</b><span class="monoblue"><b>"POST"</b></span></span><span class="mono"><b>&gt;
<br />
&lt;p&gt;
<br />
Author&lt;sup&gt;*&lt;/sup&gt;&lt;input&nbsp;name="author"&gt;&lt;br</b><b>&nbsp;/</b><b>&gt;
<br />
E-mail&amp;nbsp;&amp;nbsp;&lt;input&nbsp;name="email"&gt;&lt;br</b><b>&nbsp;/</b><b>&gt;</b><b>
<br />
</b><b>Text&lt;br</b><b>&nbsp;/</b><b>&gt;</b><b>
<br />
</b><b>&lt;textarea&nbsp;cols=</b><b>"50"&nbsp;name="text"&nbsp;rows="5"&gt;</b><b>&lt;/textarea&gt;
<br />
&lt;/p&gt;
<br />
&lt;p&gt;
<br />
&lt;input&nbsp;type=</b><b>"submit"&nbsp;value</b><b>="Send"&nbsp;name="post"</b><b>&nbsp;/</b><b>&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
<br />
&lt;input&nbsp;type=</b><b>"reset"&nbsp;value=</b><b>"Cancel"</b><b>&nbsp;/</b><b>&gt;
<br />
&lt;/p&gt;
<br />
&lt;/form&gt;
<br />
&lt;/center&gt;
<br />

<br />
</b><span class="monoblue"><b>@test_and_post_message[]
<br />
^if(</b></span></span><span class="mono"><span class="monoblue"><b><a href="opdef.htm">def</a></b></span></span><span class="mono"><span class="monoblue"><b>&nbsp;$form:post){
<br />
&nbsp;&nbsp;&nbsp;^if(def&nbsp;$form:author){
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^MAIN:dbconnect{
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^</b></span></span><span class="mono"><span class="monoblue"><b><a href="voidsql.htm">void:sql</a></b></span></span><span class="mono"><span class="monoblue"><b>{</b></span></span><span class="mono"><b>insert&nbsp;into&nbsp;gbook
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(author,&nbsp;email,&nbsp;date,&nbsp;body)
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;values&nbsp;(
<br />
</b><span class="monoblue"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'$form:author',
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'$form:email',
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'${date.year}-${date.month}-${date.day}',
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'$form:text'
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><b>)</b><span class="monoblue"><b>}
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$</b></span></span><span class="mono"><span class="monoblue"><b><a href="responsefields.htm">response:location</a></b></span></span><span class="mono"><span class="monoblue"><b>[$</b></span></span><span class="mono"><span class="monoblue"><b><a href="requesturi.htm">request:uri</a></b></span></span><span class="mono"><span class="monoblue"><b>]
<br />
&nbsp;&nbsp;&nbsp;}{
<br />
</b></span></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;center&gt;</b><b>Field&nbsp;'author'&nbsp;must&nbsp;be&nbsp;filled&nbsp;in</b><b>&lt;/center&gt;
<br />
</b><span class="monoblue"><b>&nbsp;&nbsp;&nbsp;}
<br />
}
<br />
</b></span></span><span>
<br />
Look at the code. In first line we indicate that this is a file with user-defined class:
<br />

<br />
</span><span class="mono"><b>@CLASS
<br />
</b></span><span><i>
<br />
</i><i>If you need to use some other user-defined class as a parent class</i></span><span class="mono"><b><i>,</i></b></span><span><i> you should connect to it and declare it as a base class. In this case, you will have such a construction:</i></span><span class="h1"><i>
<br />
</i></span><span class="mono"><b>
<br />
@CLASS
<br />
</b><b>name&nbsp;of&nbsp;the&nbsp;class</b></span><span><i>  
<br />
</i></span><span class="mono"><b>
<br />
@USE
<br />
</b><b>file&nbsp;of&nbsp;parent&nbsp;class</b></span><span><i>
<br />

<br />
</i></span><span class="mono"><b>@BASE&nbsp;
<br />
</b><b>name&nbsp;of&nbsp;parent&nbsp;class</b></span><span><i>&nbsp;&nbsp;&nbsp;
<br />
</i>
<br />
In the line following </span><span class="mono"><b>@CLASS</b></span><span> we write the name of our class-</span><span class="mono"><b>gbook</b></span><span>. You should remember that Parser is case-sensitive, so </span><span class="mono"><b>gbook</b></span><span> and </span><span class="mono"><b>Gbook</b></span><span> are different names. The name of the class doesn't have to be the same as the name of the file it is stored in. Moreover, you can use any non-Latin characters for your names (for example, Cyrillic).
<br />

<br />
Further in the code, we define methods of the class. We do it the same way we defined usual methods in previous lessons.
<br />

<br />
The first method, </span><span class="mono"><b>load</b></span><span>, will be constructor of our class. We should remember that the purpose of a constructor is to create an object. Moreover, it can also declare variables and assign values to them. These variables are fields of an object of user-defined class. In our case, by using constructor </span><span class="mono"><b>sql</b></span><span> of class </span><span class="mono"><b>table</b></span><span>, we create a table. Note: in the methods of the new class we freely use methods of system classes and method </span><span class="mono"><b>dbconnect</b></span><span> of class MAIN:</span><span class="h1">
<br />
</span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>@load[]
<br />
^MAIN:dbconnect{
<br />
&nbsp;&nbsp;&nbsp;$messages[^table::sql{select&nbsp;author,&nbsp;email,&nbsp;date,&nbsp;body&nbsp;from&nbsp;gbook}]
<br />
}
<br />
</b></span></span><span>
<br />
As it has already been mentioned, if we want to use methods of a class beyond it, we should specify what class we use:
<br />

<br />
</span><span class="mono"><b>^class_name:method[properties]
<br />
$class_name:variable
<br />
</b></span><span>
<br />
and if the class we use is yet another user-defined class, we should add the following construction to the beginning of the code:
<br />

<br />
</span><span class="mono"><b>@USE
<br />
file&nbsp;of&nbsp;parent&nbsp;class
<br />
</b></span><span>
<br />
Such a construction allows us to use module stored in another file. The description of how Parser works with paths can be found in Attachment&nbsp;1.</span><span> </span><span>
<br />

<br />
So, our new constructor will create table with messages connecting to a specified DB. Now that it is clear with the constructor, we will need to define methods of the new class. Method </span><span class="mono"><b>show_messages</b></span><span> outputs messages contained in table </span><span class="mono"><b>gb</b></span><span> created in method </span><span class="mono"><b>load</b></span><span>. We go through the table, line by line, with the help of method </span><span class="mono"><b>menu</b></span><span> of class </span><span class="mono"><b>table</b></span><span>, which we have already used previously. There is nothing new in other methods, either:
<br />

<br />
</span><span class="mono"><b>show_form</b></span><span>-outputs form to add a new message
<br />
</span><span class="mono"><b>
<br />
test_and_post_message</b></span><span>-checks if button </span><span class="mono"><b>post</b></span><span> was clicked, if field </span><span class="mono"><b>author</b></span><span> was filled in and, if all conditions were met, adds a new entry to DB using method </span><span class="mono"><b>dbconnect</b></span><span> defined in class </span><span class="mono"><b>MAIN</b></span><span>.
<br />

<br />
By this we finish creating user-defined class </span><span class="mono"><b>gbook</b></span><span>. All we need to do now is tell Parser on what page we are going to use it. We do it by writing in the first line of </span><span class="mono"><b>/gbook/index.html</b></span><span>:
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>@USE
<br />
/classes/gbook.p
<br />
</b></span></span><span>
<br />
Now we can create object of class </span><span class="mono"><b>gbook</b></span><span> and use its methods within this page. We will do it in the main information part:
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>@body_main[]
<br />
</b></span></span><span class="mono"><b>Parser3&nbsp;Example:&nbsp;Guestbook&lt;br&nbsp;/&gt;
<br />
&lt;hr&nbsp;/&gt;
<br />

<br />
</b><span class="monoblue"><b>$gb[^gbook::load[]]
<br />
^gb.show_messages[]
<br />
^gb.show_form[]
<br />
^gb.test_and_post_message[]
<br />
</b></span></span><span class="mono"><b>
<br />
#&nbsp;and,&nbsp;of&nbsp;course,&nbsp;we&nbsp;shouldn't&nbsp;forget&nbsp;about&nbsp;other&nbsp;parts
<br />
</b><span class="monoblue"><b>@greeting[]
<br />
</b></span></span><span class="mono"><b>Leave&nbsp;your&nbsp;mark&nbsp;on&nbsp;history&#133;
<br />

<br />
</b><span class="monoblue"><b>@body_additional[]
<br />
</b></span></span><span class="mono"><b>Chronicles&#133;
<br />
</b></span><span>
<br />
In this piece we use an object of newly created user class the same way we use any other object: we create it by using constructor of the class and then call methods defined in the new class. See how gracious the solution turned out to be: our code is clearly readable and, looking at this piece, we instantly understand what it does. Everything related to our guestbook is located in a separate file where we list all of its opportunities. If we need a new method to use with our guestbook, we will just need to add it to </span><span class="mono">/classes/guestbook.p</span><span>. Everything can be easily enhanced and it doesn't take much to understand what to change and where, if we need to.
<br />

<br />
In conclusion, it should be noted that we would better place methods like </span><span class="mono"><b>dbconnect</b></span><span> somewhere beyond class </span><span class="mono"><b>MAIN</b></span><span> (so that </span><span class="mono"><b>MAIN</b></span><span> wouldn't be overloaded with methods). Such a solution would also make the whole project easier to read and understand. We can make methods of this class available by adding construction
<br />

<br />
</span><span class="mono"><b>@USE
<br />
&#133;
<br />
</b></span><span>
<br />
wherever we'd need to use it.
<br />

<br />
Let's sum it up,
<br />

<br />

<br />
</span><span class="h1"><b>What have we done?
<br />
</b>We have created a user-defined class and guestbook for our site based on the class we have made.
<br />
<b>
<br />
</b><b>What have we learnt?
<br />
</b><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="12"><span class="h1"></span></span><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span></span><span>Class </span><span class="mono"><b><u><a href="mainclass.htm">MAIN</a></u></b></span><span>;
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="12"><span></span><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span></span><span>how to create a user-defined class;
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="12"><span></span><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span></span><span>how to pass arguments to a method.
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td><span></span></td><td></td></tr></table><span>
<br />
</span><span class="h1"><b>What should we</b><b> remember</b><b>?
<br />
</b></span><span>Classes are the "top level" of structuring. That is why we should always aim at dividing our code into classes. By this, you can make the logic of our projects' work most comprehensible and our further work-most comfortable.
<br />

<br />
</span><span class="h1"><b>What's next?
<br />
</b></span><span>By this, we have finished our exemplary site. Of course, it is not perfect and shouldn't be used as it is now. Before we place it in the Internet,<b> </b>you still have a couple of things to do: enhance our calendar in news section, teach our guestbook to check whether messages posted by visitors are correct, etc., but we didn't target at making up a full-scale site. We just wanted to show that Parser is an easy tool to increase your productivity. Now, that you have acquired all basic skills required for full-range work, you just need to reinforce them. Now you have all necessary knowledge to do the whole rest of work by yourself. Remember, "practice makes perfect."
<br />

<br />
Good luck!
<br />

<br />
</span></span><br />




</body>
</html>