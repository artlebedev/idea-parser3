<html>
<head>
    
    
    <title>Операторы, определяемые пользователем</title><meta content="text/html; charset=utf-8" http-equiv="Content-Type">

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span style="font-family:Arial; font-size:12pt; color:#000000"><b>Операторы, определяемые пользователем
<br />
</b></span>
    </td>
  </tr>
  <tr><td><div class="greenline"></div></td></tr>
</table>
<br />



<span>Иногда вам будет казаться, что каких-то операторов в языке не хватает. Parser позволяет вам определить собственные операторы, которые затем можно будет использовать наравне с системными.
<br />

<br />
Операторами в Parser считаются методы класса <a href="mainclass.htm">MAIN</a>, добавляя новые методы в этот класс вы расширяете базовый набор операторов.
<br />
<span>
<br />
</span><span><i>Внимание: при описании оператора можно использовать и не локальные переменные, при этом вы будете читать и записывать в поля класса </i><i><a href="mainclass.htm">MAIN</a></i><i>.</i>
<br />

<br />
Пользовательские операторы могут определяться и в отдельных текстовых файлах без заголовка </span><span class="mono"><b>@CLASS</b></span><span>, которые <a href="opuse.htm">подключаются</a> к нужным разделам сайта. Если в таком файле определить оператор (написав, скажем, </span><span class="mono"><b>@</b><b><a href="opprocess.htm">include</a></b><b>[]</b></span><span>), то при обращении </span><span class="mono"><b>^include</b><b>[…]</b></span><span> всегда будет вызываться пользовательский оператор. 
<br />

<br />
<i>Будьте внимательны! Если определить оператор, одноименный с системным, то всегда будет вызываться пользовательский. При этом системный оператор вызвать нельзя никак. Стоит делать как можно меньше пользовательских операторов, используя вместо них статические методы пользовательских классов.
<br />
</i>
<br />
Создавать классы и пользоваться их методами гораздо удобнее, чем пользовательскими операторами. Простой пример: есть несколько разделов сайта, и для каждого из них нужно сделать раздел помощи. Создав несколько файлов, описывающих разные классы, можно получить одноименные методы разных классов. Вызывая методы как статические, мы имеем совершенно ясную картину, что к какому разделу относится:
<br />

<br />
</span><span class="mono"><b>^news:help[]
<br />
^forum:help[]
<br />
^search:help[]
<br />
</b></span><span>
<br />
</span><span class="h1"><b>Примеры</b></span><span>
<br />
Поместите этот код…
<br />
</span><span class="mono"><span class="monoblue"><b>@default[a;b]
<br />
^if(</b></span></span><span class="mono"><span class="monoblue"><b><a href="exprops.htm">def</a></b></span></span><span class="mono"><span class="monoblue"><b>&nbsp;$a){$a}{$b}
<br />
</b></span></span><span>
<br />
… в файл </span><span class="mono">operators.p</span><span>, в корень вашего веб-сайта.
<br />

<br />
Там, где вам необходимы дополнительные операторы, <a href="opuse.htm">подключите</a> этот модуль. Например, в корневом </span><span class="mono">auto.p</span><span>, напишите…
<br />
</span><span class="mono"><span class="monoblue"><b>@</b></span></span><span class="mono"><span class="monoblue"><b><a href="opuse.htm">USE</a></b></span></span><span class="mono"><span class="monoblue"><b>
<br />
/operators.p
<br />
</b></span></span><span>
<br />
…теперь не только в любой странице, но, что главное, в любом вашем <a href="defineclass.htm">классе</a> можно будет воспользоваться конструкцией
<br />
</span><span class="mono"><span class="monoblue"><b>^default[$form:name;</b></span></span><span class="mono"><b>Аноним</b><span class="monoblue"><b>]</b></span></span><span>
<br />
</span><span>
<br />
Подробности в разделе <a href="definemethod.htm">Создание методов и пользовательских операторов</a>.
<br />
</span></span><br />




</body>
</html>