<html>
<head>
    
    
    <title>cgi и exec. Исполнение программы</title><meta content="text/html; charset=utf-8" http-equiv="Content-Type">

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span class="h1"><b>cgi и exec. Исполнение программы
<br />
</b></span>
    </td>
  </tr>
  <tr><td><div class="greenline"></div></td></tr>
</table>
<br />



<span class="mono"><b>^file::cgi[имя&nbsp;файла]
<br />
^file::cgi[имя&nbsp;файла;env_hash]
<br />
^file::cgi[имя&nbsp;файла;env_hash;аргумент1;аргумент2;…]
<br />
^file::cgi[формат;имя&nbsp;файла;env_hash;аргумент1;аргумент2;…]&nbsp;&nbsp;&nbsp;</b><span><b><i>[</i></b><b><i>3</i></b><b><i>.</i></b><b><i>2</i></b><b><i>.</i></b><b><i>2</i></b><b><i>]</i></b></span><span class="mono"><b>
<br />
^file::exec[имя&nbsp;файла]
<br />
^file::exec[имя&nbsp;файла;env_hash]
<br />
</b><b>^file::exec[имя&nbsp;файла;env_hash;аргумент1;аргумент2;…]
<br />
^file::exec[формат;имя&nbsp;файла;env_hash;аргумент1;аргумент2;…]&nbsp;&nbsp;&nbsp;</b></span><span><b><i>[3.2.2]</i></b></span><span class="mono"><b>
<br />
</b></span><span>
<br />
Конструктор </span><span class="mono"><b>cgi</b></span><span> создает объект класса </span><span class="mono"><b>file</b></span><span>, содержащий результат исполнения программы в соответствии со стандартом CGI. 
<br />
<i>Внимание: все пути в парсере указываются относительно текущего исполняемого файла.
<br />
По аналогии, при запуске внешнего скрипта текущим каталогом для него является каталог, где находится этот скрипт.</i>
<br />

<br />
Заголовки, которые выдаст CGI-скрипт, конструктор поместит в поля класса </span><span class="mono"><b>file</b></span><span> в ВЕРХНЕМ регистре. Например, если некий скрипт </span><span class="mono"><b>script.pl</b></span><span>, среди прочего, выдает в заголовке строку </span><span class="mono"><b>field:value</b></span><span>, то после работы конструктора
<br />
</span><span class="mono"><span class="monoblue"><b>$f[^file::cgi[script.pl]]</b></span></span><span>,
<br />
обратившись к </span><span class="mono"><b>$f.FIELD</b></span><span>, получим значение </span><span class="mono"><b>value</b></span><span>. 
<br />

<br />
Конструктор </span><span class="mono"><b>exec</b></span><span> аналогичен </span><span class="mono"><b>cgi</b></span><span>, но не отделяет HTTP-заголовки от текста, возвращаемого скриптом. 
<br />

<br />
</span><span class="mono"><b>Формат</b></span><span> - формат представления получаемых от скрипта данных. Может быть </span><span class="mono"><b>text&nbsp;</b></span><span>(по умолчанию) или </span><span class="mono"><b>binary</b></span><span>. При использовании формата </span><span class="mono"><b>binary</b></span><span> не будут производиться перекодирования полученных данных в кодировку </span><span class="mono"><b><a href="requestcharset.htm">$request:charset</a></b></span><span> и их обрезания по первому нулевому символу.
<br />

<br />
</span><span class="mono"><b>Имя&nbsp;файла</b></span><span> - имя файла с путем.
<br />

<br />
Объект, созданный этими конструкторами, имеет дополнительные поля:
<br />
</span><span class="mono"><b>status</b></span><span> - информация о статусе завершении программы (обычно 0 означает, что программа завершилась успешно, не 0 - с ошибкой)&nbsp;&nbsp;&nbsp;
<br />
</span><span class="mono"><b>stderr</b></span><span> - результат считывания стандартного потока ошибок&nbsp;&nbsp;&nbsp;
<br />

<br />
Пример:
<br />
</span><span class="mono"><span class="monoblue"><b>$cgi_file[^file::cgi[</b></span></span><span class="mono"><b>new.cgi</b><span class="monoblue"><b>]]
<br />
$cgi_file.text</b></span></span><span class="mono"><b>
<br />
</b></span><span>
<br />
Выведет на экран результаты работы скрипта </span><span class="mono"><b>new.cgi</b></span><span>. 
<br />

<br />
Необязательные параметры конструкторов:</span><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span><span class="mono"><b>env_hash</b></span><span> - <a href="hash.htm">хеш</a>, в котором могут задаваться 
<br />
<table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></span></td><td><span>дополнительные переменные окружения, которые впоследствии будут доступны внутри исполняемого скрипта;
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span>ключ </span><span class="mono"><b>stdin</b></span><span>, содержащая текст, передаваемый исполняемому скрипту в стандартном потоке ввода;
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="14"><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span>ключ </span><span class="mono"><b>charset</b></span><span>, задающий кодировку, в которой работает скрипт (будут перекодированы данные передаваемые скрипту и получаемые из скрипта).<b><i> [3.1.3]</i></b>
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td><span></span></td><td></td></tr></table><span><i>Внимание: можно</i> <i>задавать только стандартные CGI переменные окружения и переменные, имена которых начинаются с CGI_ или HTTP_ (допустимы латинские буквы в ВЕРХНЕМ регистре, цифры, подчеркивание, минус)</i>.
<br />
<i>Внимание: в </i><i>unsafe-mode </i><i>версиях у переменных окружения можно задавать любые имена.</i><b><i> [3.4.1]</i></b>
<br />
<i>Внимание: при обработке </i></span><span class="mono">HTTP</span><span> </span><span class="mono">POST</span><span><i> запроса, при помощи конструкции </i></span><span class="mono"><b>$.stdin[</b><b><a href="requestbody.htm">$request:body</a></b><b>]</b></span><span><i> вы можете передать в стандартный поток ввода скрипта полученные вами POST-данные. [3.0.8, раньше они передавались по-умолчанию]</i>
<br />
<i>Внимание: запускаемому скрипту также передаются все переменные окружения, которые были выставленные http сервером при запуске </i><i>Parser</i><i>.</i>
<br />
</span><span class="h1"><b>
<br />

<br />
Пример внешнего CGI-скрипта
<br />
</b></span><span class="mono"><span class="monoblue"><b>$search[^file::cgi[search.cgi;$.QUERY_STRING[text=</b></span></span><span class="mono"><span class="monoblue"><b><a href="formfields.htm">$form:q</a></b></span></span><span class="mono"><span class="monoblue"><b>&amp;page=$form:p]]]</b></span></span><span class="mono"><b>
<br />

<br />

<br />
</b></span><span class="h1"><b>Пример внешнего скрипта</b></span><span class="mono"><b>
<br />
</b><span class="monoblue"><b>$script[^file::exec[script.pl;$.CGI_INFORMATION[этого&nbsp;мне&nbsp;не&nbsp;хватало]]]</b></span></span><span class="mono"><b>
<br />
</b></span><span>
<br />
Внутри скрипта </span><span class="mono"><b>script.pl</b></span><span> можно воспользоваться переданной информацией:
<br />
</span><span class="mono"><b>print&nbsp;"Дополнительная&nbsp;информация:&nbsp;$ENV{CGI_INFORMATION}\n";
<br />
</b></span><span>
<br />
</span><span class="h1"><b>
<br />
Пример получения бинарных данных от внешнего скрипта
<br />
</b></span><span class="mono"><span class="monoblue"><b>$response:body[^file::exec[binary;getfile.pl;$.CGI_</b></span></span><span class="mono"><span class="monoblue"><b>FILENAME</b></span></span><span class="mono"><span class="monoblue"><b>[</b></span></span><span class="mono"><span class="monoblue"><b><a href="formfields.htm">$form:filename</a></b></span></span><span class="mono"><span class="monoblue"><b>]]]</b></span></span><span class="mono"><b>
<br />
</b></span><span>
<br />

<br />
</span><span class="h1"><b>Пример передачи нескольких аргументов</b></span><span>
<br />
Кроме того, вызываемой программе можно передать ряд аргументов, перечислив их через точку с запятой после хеша переменных окружения:
<br />
</span><span class="mono"><span class="monoblue"><b>$script[^file::exec[script.pl;;</b></span></span><span class="mono"><b>длина</b><span class="monoblue"><b>;</b></span></span><span class="mono"><b>ширина</b><span class="monoblue"><b>]]</b></span></span><span class="mono"><b>
<br />
</b></span><span>
<br />
...или передать методу список аргументов, заданный в виде таблицы с одним столбцом:</span><span class="h1"><b>&nbsp;&nbsp;&nbsp;</b></span><span><b><i>[3.</i></b><b><i>2</i></b><b><i>.</i></b><b><i>2</i></b><b><i>]</i></b>
<br />
</span><span class="mono"><span class="monoblue"><b>$args[^table::create{arg
<br />
</b></span></span><span class="mono"><b>длина</b><span class="monoblue"><b>
<br />
</b></span></span><span class="mono"><b>ширина</b><span class="monoblue"><b>}]
<br />
$script[^file::exec[script.pl;;$args]]</b></span></span><span>
<br />

<br />
<i>Внимание: настоятельно рекомендуется хранить запускаемые скрипты вне веб-пространства, поскольку запуск скрипта с произвольными параметрами может привести к неожиданным результатам.
<br />
</i></span></span><br />




</body>
</html>