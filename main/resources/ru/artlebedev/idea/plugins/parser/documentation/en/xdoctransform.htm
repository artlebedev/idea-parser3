<html>
<head>
    
    
    <title>transform. XSL transformation</title><meta content="text/html; charset=utf-8" http-equiv="Content-Type">

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span class="h1"><b>transform. XSL transformation
<br />
</b></span>
    </td>
  </tr>
  <tr><td><div class="greenline"></div></td></tr>
</table>
<br />



<span class="mono"><b>^document.transform[template]
<br />
^document.transform[template][XSLT-parameters]
<br />
</b><span>
<br />
This method applies XSL transformation to the </span><span class="mono"><b>document</b></span><span> using specified </span><span class="mono"><b>template</b></span><span>. One can also specify</span><span class="mono"><b>&nbsp;XSLT-parameters</b></span><span>.
<br />

<br />
</span><span class="mono"><b>Template</b></span><span>-either </span><span class="mono"><b>path_to_template_file</b></span><span> or </span><span class="mono"><b><a href="xdocclass.htm">xdoc</a></b></span><span> document.
<br />
Parser can load XML from arbitrary source, see "<a href="xdocparserprot.htm">Reading XML from arbitrary source</a>".
<br />
</span><span class="mono"><b>
<br />
XSLT-</b><b>parameters</b></span><span> - <a href="hash.htm">hash</a> of strings, which can be accessed in templates via </span><span class="mono"><span class="monoblue"><b><u><a href="http://www.w3.org/TR/xslt#variables" target="_blank">&lt;xsl:param â€¦ /&gt;</a></u></b></span></span><span>.
<br />

<br />
<i>Note: Parser (as </i><i><a href="install4apachecgi.htm">Apache module</a></i><i> </i><i>or </i><i><a href="install4iis.htm">IIS</a></i><i>) </i><i>module) caches the result of </i></span><span class="mono"><b><i>template_file</i></b></span><span><i> compilation into internal form. Recompilation is not performed. Instead, already compiled template is taken from cache. CGI-version caches the template, too, but for a single request only. The template is recompiled if modification</i><i> date</i><i> of any of template files has changed.
<br />
</i>
<br />
</span><span class="h1"><b>Example (see also </b><b>"</b><b><a href="lesson6.htm">Lesson 6. Working with XML</a></b><b>")</b></span><span><b>
<br />
</b></span><span class="mono"><span class="monoblue"><b>#&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>source&nbsp;xdoc&nbsp;document
<br />
</b></span></span><span class="mono"><span class="monoblue"><b>$sourceDoc[^xdoc::</b></span></span><span class="mono"><span class="monoblue"><b><a href="xdocload.htm">load</a></b></span></span><span class="mono"><span class="monoblue"><b>[article.xml]]
<br />

<br />
#&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>transformation&nbsp;of&nbsp;xdoc&nbsp;document&nbsp;using&nbsp;template&nbsp;article.xsl</b></span></span><span class="mono"><span class="monoblue"><b>$transformedDoc[^sourceDoc.transform[article.xsl]]
<br />

<br />
#&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b>outputting&nbsp;result&nbsp;as&nbsp;HTML</b></span></span><span class="mono"><span class="monoblue"><b>
<br />
^transformedDoc.</b></span></span><span class="mono"><span class="monoblue"><b><a href="xdocstring.htm">string</a></b></span></span><span class="mono"><span class="monoblue"><b>[
<br />
&nbsp;&nbsp;&nbsp;&nbsp;</b></span></span><span class="mono"><span class="monoblue"><b><a href="xdocoptions.htm">$.method[html]</a></b></span></span><span class="mono"><span class="monoblue"><b>
<br />
]
<br />
</b></span></span><span>
<br />
If template is not loaded from disk but created dynamically, it is important to determine where </span><span class="mono"><b>&lt;xsl:import&nbsp;href="some.xsl"/&gt;</b></span><span> should be taken from, since, in this case, document's base path does not exist and its directory, therefore, cannot be determined. That means, you will need to specify base path in standard "<a href="xdocuriparam.htm">xml:base</a>" attribute.
<br />
</span></span><br />




</body>
</html>