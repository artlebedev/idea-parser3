<html>
<head>
    
    
    <title>User-defined classes</title><meta content="text/html; charset=utf-8" http-equiv="Content-Type">

    

</head>

<body>


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span class="h1"><b>User-defined classes
<br />
</b></span>
    </td>
  </tr>
  <tr><td><div class="greenline"></div></td></tr>
</table>
<br />



<span><a href="lesson5.htm">A user class is defined</a> in a file of such a format:<span class="h1">
<br />
</span><span class="mono"><b>
<br />
</b><b>@CLASS
<br />
name_of_class
<br />

<br />
#&nbsp;optional
<br />
@OPTIONS&nbsp;&nbsp;&nbsp;</b></span><span><b><i>[3.3.0]</i></b></span><span class="mono"><b>
<br />
locals
<br />
partial
<br />
</b><b>dynamic</b></span><span> or </span><span class="mono"><b>static</b></span><span><b><i>&nbsp;&nbsp;&nbsp;</i></b><b><i>[3.4.1]</i></b></span><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span><span class="mono"><b>
<br />

<br />
#&nbsp;optional
<br />
@USE
<br />
file_with_parent_class
<br />

<br />
#&nbsp;optional
<br />
#&nbsp;user-defined&nbsp;class&nbsp;can't&nbsp;be&nbsp;based&nbsp;on&nbsp;system&nbsp;classes</b></span><span><b><i> [3.4.0]</i></b></span><span class="mono"><b>
<br />
@BASE
<br />
name_of_parent_class
<br />

<br />
#&nbsp;recommended&nbsp;way&nbsp;to&nbsp;name</b><b>&nbsp;</b><b><a href="obj.htm">method-constructor</a></b><b>&nbsp;</b><b>of&nbsp;the&nbsp;class</b><b>
<br />
@create[</b><b>parameters</b><b>]
<br />
</b></span><span>
<br />
</span><span class="mono"><b>#&nbsp;</b><b>other&nbsp;</b><b><a href="definemethod.htm">methods</a></b><b>&nbsp;are&nbsp;defined</b><b>
<br />
@method1[</b><b>parameters</b><b>]
<br />
&#133;
<br />
</b></span><span>
<br />
Module can be linked (see "<a href="opuse.htm">Linking modules</a>") to any file, which will then be able to use the class defined here.
<br />
If unknown class was specified, the method </span><span class="mono"><b>autouse</b></span><span> of class </span><span class="mono"><b>MAIN</b></span><span> will be called and specified class name will be passed to it as the only parameter.<b><i> [3.4.0]</i></b>
<br />

<br />
If </span><span class="mono"><b>@CLASS</b></span><span> is not specified, the file will define a number of <a href="opuserdefined.htm">additional operators</a>.
<br />

<br />
If method
<br />
</span><span class="mono"><b>@auto[]</b></span><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span><span>
<br />
is defined, it will be automatically called as a static method (so-called static constructor) each time the class is loaded. It is used to initialize static fields of the class.
<br />

<br />
<i>Note: result of the method's work is ignored, i.e. doesn't get anywhere.
<br />
Note: method @auto[] is not inherited .</i><b><i> [3.</i></b><b><i>4</i></b><b><i>.</i></b><b><i>1</i></b><b><i>] </i></b><i>
<br />
</i>
<br />
If method is defined to receive the parameter:
<br />
</span><span class="mono"><b>@auto[filespec]
<br />
</b></span><span>In that parameter Parser will pass full name of file containing the method.
<br />

<br />
Created classes inherit methods of parent classes. Inherited methods can be redefined.
<br />

<br />
In case one user class must use another one as parent, the file with the parent class should be linked to it, and parent class - declared as base (</span><span class="mono"><b>@BASE</b></span><span>).
<br />

<br />
To use methods and fields of parent classes, the following constructions should be used:
<br />

<br />
</span><span class="mono"><b>^class:method</b><b>[</b><b><a href="params.htm">parameters</a></b><b>]</b></span><span>-to call a method of parent class (<i>note: although the syntax of calling such a method looks like the syntax of calling a static method, in fact, in case of dynamic method, the method of parent class will be called dynamically</i>). To refer to the nearest parent class (base class) you may use constructions </span><span class="mono"><b>^BASE::</b><b>constructor</b><b>[</b><b><a href="params.htm">parameters</a></b><b>]</b></span><span> and </span><span class="mono"><b>^BASE:</b><b>method</b><b>[</b><b><a href="params.htm">parameters</a></b><b>]</b></span><span>.
<br />

<br />
Using <b>@OPTIONS </b>you can set additional class behaviour.<b><i>
<br />
</i></b>Thus option <b>locals</b> automatically declare all variables in all methods of this class as local. If this option specified you must use system variable</span><span> </span><span><a href="definemethod.htm">self</a> for accessing to class or object's field.
<br />
</span><span>
<br />
</span><span>With <b>partial</b> option you can allow future class modifications. If specified and you load new file with <a href="opuse.htm">use</a> operator which contain the same class name and the same option, the methods from this file will be added to previously loaded class instead of creating a new one with the same name. This option can be useful for loading huge and seldom used methods to the class by demand.</span><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span><span><i>
<br />
</i></span><span>With <b>static</b> and <b>dynamic</b> options you can specify the allowed methods' call types. All methods could be called statically or dynamically by default which could be unsafe.</span><span><i>
<br />

<br />
</i></span><span><i>Note: </i><i>trailing white-space characters in </i><i>meta-comands @USE, @CLASS, @BASE, @OPTIONS </i><i>will be ignored</i><b><i> [3.4.1] </i></b></span><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br />
</span><span>
<br />

<br />
</span><span class="h1"><b>Working with variables in static methods
<br />
</b></span><span>Value of the variable is searched for in:
<br />
<table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="25"><span></span></span><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span></span><span>the list of local variables;
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="25"><span></span><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span></span><span>the current class or its parent classes.
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td><span></span></td><td></td></tr></table><span>
<br />
The value will be assigned to already existing variable (see the search area given above), if it does exist. Otherwise, a new variable (field) will be created within the current class.</span><span class="h1">
<br />
</span><span>
<br />
</span><span class="h1"><b>Working with variables in dynamic methods
<br />
</b></span><span>Value of the variable is searched for in:
<br />
<table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="25"><span></span></span><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span></span><span>the list of local variables;
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="25"><span></span><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span></span><span>the current object and its class;
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="25"><span></span><span><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span></span><span>parent objects and their classes.
&nbsp;<br />
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td><span></span></td><td></td></tr></table><span>
<br />
The value will be assigned to already existing variable (see the search area given above), if it does exist. Otherwise, a new variable (field) will be created within the current class.
<br />

<br />
<i>Note: try to avoid using fields of class beyond the methods of the class except simplest cases. We should try to communicate with an object through its methods only.
<br />
</i><i>
<br />
</i></span><span class="h1"><b>Object's system field: CLASS
<br />
</b></span><span class="mono"><span class="monoblue"><b>$class:CLASS</b></span></span><span>-contains reference to the object's class
<br />

<br />
You may need this value to specify the scope of code's compilation (cf. "Process. Compiling and processing string").
<br />

<br />
This reference can also be used to retrieve static fields of the class, for example:
<br />

<br />
</span><span class="mono"><span class="monoblue"><b>@main[]
<br />
^method[$</b></span></span><span class="mono"><span class="monoblue"><b><a href="cookieclass.htm">cookie</a></b></span></span><span class="mono"><span class="monoblue"><b>:CLASS]
<br />

<br />
@method[storage]
<br />
$storage.</b></span></span><span class="mono"><span class="monoblue"><b><a href="cookiestats.htm">field</a></b></span></span><span class="mono"><b>
<br />
</b></span><span>
<br />
As a result, value of </span><span class="mono"><b><a href="cookiestats.htm">$cookie:field</a></b></span><span> be output.
<br />

<br />

<br />
</span><span class="h1"><b>Object's</b><b> class name: CLASS_NAME</b></span><span class="mono"><b>&nbsp;&nbsp;&nbsp;</b></span><span><b><i>[3.2.2]</i></b></span><span class="h1"><b>
<br />
</b></span><span class="mono"><span class="monoblue"><b>$</b></span></span><span class="mono"><span class="monoblue"><b>object</b></span></span><span class="mono"><span class="monoblue"><b>.CLASS_NAME</b></span></span><span>-contains object's class name
<br />

<br />
</span><span class="h1"><b>Example</b><b>:</b></span><span>
<br />
</span><span class="mono"><span class="monoblue"><b>$var[123]
<br />
$var.CLASS_NAME</b></span></span><span><b>
<br />

<br />
</b>This example prints 'string'.<b>
<br />
</b>
<br />

<br />
</span></span><br />




</body>
</html>