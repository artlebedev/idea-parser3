<html>
<head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html;charset=iso-8859-1">
    <meta name="keywords" content="CLASS,include *,main,result,operator *,self,caller,caller.self">
    <title>Methods and user-defined operators</title>

    <script language="JavaScript"><!--
    if(top.frames.length==0) {
        top.location.href='./?definemethod.htm'
    } else {
        if(document.referrer!='' && 0>document.referrer.indexOf(top.frames[0].location.pathname)) {
            top.frames[0].location.hash='definemethod.htm'
        }
    }
    //--></script>

</head>

<body bgcolor="#FFFFFF" text="black">


<table border="0" cellspacing="0" cellpadding="2">
  <tr>
    <td>
      
<span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000"><b>Methods and user-defined operators
<br>
</b></span>
    </td>
  </tr>
  <tr><td bgcolor="#99D228" height="3"></td></tr>
</table>
<br>



<span style="font-family:Monospace; font-size:10pt; color:#000000"><b>@name[parameters]
<br>
body
<br>
</b><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>@name[parameters][local;variables]
<br>
body
<br>

<br>
@static:name[parameters]</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><b><i>&nbsp;&nbsp;&nbsp;[3.4.1]</i></b></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>
<br>
body&nbsp;of&nbsp;class'&nbsp;method&nbsp;which&nbsp;can&nbsp;be&nbsp;only&nbsp;called&nbsp;statically&nbsp;(</b><b><a href=defineclass.htm>more details</a></b><b>)
<br>

<br>
@name[*parameters]</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><b><i>&nbsp;&nbsp;&nbsp;[3.4.1]</i></b></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>
<br>
method's&nbsp;body&nbsp;which&nbsp;can&nbsp;accept&nbsp;valiable&nbsp;number&nbsp;of&nbsp;parameters
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>@name[param1;param2;*parameters]</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><b><i>&nbsp;&nbsp;&nbsp;[3.4.1]</i></b></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>
<br>
method's&nbsp;body&nbsp;which&nbsp;can&nbsp;accept&nbsp;valiable&nbsp;number&nbsp;of&nbsp;parameters
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
Method is a code block, which has name, accepts parameters, and returns result. Names of a method's parameters are separated by semicolon. Method can also have local variables, which should be declared in method's header after declaration of parameters. Names of local variables are also separated by semicolon.
<br>

<br>
Local variables are visible only within the operator or method they belong to and from within the operators or methods they refer to (cf. </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>$caller</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> described further in the text).
<br>

<br>
While defining a method, you can use not only parameters and local variables but also any other names, thus working with fields of a class or object. This will depend on how you called the method&nbsp;<a href=stats.htm>statically</a>, or <a href=obj.htm>dynamically</a>.
<br>

<br>
In Parser, you can extend core set of <a href=opuserdefined.htm>operators</a>, since methods of class <a href=mainclass.htm>MAIN</a> are considered operators.
<br>
<i>Important notice: operators are methods of class</i><i> </i><i><a href=mainclass.htm>MAIN</a></i><i>,</i><i> but in contrast to other classes' methods, you can call them from any other class by using their name only, i.e. instead of using sophisticated </i></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>^MAIN:include[&#133;]</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><i>, you can use just </i></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>^include[&#133;]</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><i>.
<br>
</i></span><span style="font-family:Arial; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">Into the methods which can accept valiable number of parameters (such </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>@name[*parameters]</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">), all </span><span style="font-family:Arial; font-size:10pt; color:#000000">excessive</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> parameters are available as a hash with numeric keys. </span><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br>
</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
Example:</span><span style="font-family:Times New Roman; font-size:12pt; color:#000000"><b>
<br>
</b></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@main[]&nbsp;
<br>
^call[a;b;c]&nbsp;
<br>

<br>
@call[p;*args][k;v]&nbsp;
<br>
p=$p&nbsp;
<br>
^args.foreach[k;v]{&nbsp;
<br>
&nbsp;&nbsp;&nbsp;$k=$v&nbsp;
<br>
}[^#0A]&nbsp;</b></span></span><span style="font-family:Times New Roman; font-size:12pt; color:#000000"><i>
<br>

<br>
</i></span><span style="font-family:Arial; font-size:10pt; color:#000000">Outputs: </span><span style="font-family:Times New Roman; font-size:12pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>p=a&nbsp;
<br>
0=b&nbsp;
<br>
1=c&nbsp;</b></span><span style="font-family:Times New Roman; font-size:12pt; color:#000000"><i>
<br>
</i>
<br>
</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><i>
<br>
</i></span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000"><b>System variable: </b><b>self
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">All methods and operators have a local variable </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>self</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">. It contains reference to the current object; in static methods, its content is the same is that of </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>$CLASS</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">.
<br>

<br>
Example: </span><span style="font-family:Times New Roman; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@main[]&nbsp;&nbsp;
<br>
$a[</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>Static&nbsp;field</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>&nbsp;</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>^$a</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&nbsp;</b><b>of&nbsp;class</b><b>&nbsp;MAIN</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>]
<br>
^test[</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>Method's&nbsp;parameter</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>]
<br>

<br>
@test[a]&nbsp;&nbsp;
<br>
^$a</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&nbsp;-&nbsp;</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>$a</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&nbsp;&nbsp;&lt;br&nbsp;/&gt;&nbsp;&nbsp;
<br>
</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>^$self.a</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>&nbsp;-&nbsp;</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>$self.a&nbsp;&nbsp;
<br>
</b></span></span><span style="font-family:Times New Roman; font-size:10pt; color:#000000">&nbsp;&nbsp;&nbsp;
<br>
</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">The code will output:
<br>

<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>$a</b><b>&nbsp;-&nbsp;</b><b>Method's&nbsp;parameter</b><b>&nbsp;
<br>
</b><b>$self.a</b><b>&nbsp;-&nbsp;</b><b>Static&nbsp;field&nbsp;$a&nbsp;of&nbsp;class&nbsp;MAIN
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000"><b>
<br>
System variable: result
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">All methods and operators have a local variable </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>result</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">. If any value is assigned to it, it will be considered the result of the method's work. The value of </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>result</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> can be read and used in calculations.
<br>

<br>
Example:
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=mainclass.htm>main</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>[]
<br>
$a(2)
<br>
$b(3)
<br>
$summa[^sum[$a;$b]]
<br>
$summa
<br>

<br>
@sum[a;b]
<br>
^eval($a+$b)
<br>
$result[</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>I&nbsp;won't&nbsp;say&nbsp;anything</b><b>!</b><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>]
<br>
</b></span></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000">I</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">n this case, the client will receive a string </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>I&nbsp;won't&nbsp;say&nbsp;anything!</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">, but not the result of addition of the two numbers.
<br>

<br>
</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000"><b>System variable: result</b><b>, explicit declaration</b><b>&nbsp;&nbsp;&nbsp;</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><b><i>[3.1.5]</i></b><b><i>
<br>
</i></b>If </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>result</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> variable is explicitly declared, this means to Parser that it should ignore all whitespace characters in method code and perceive as error any non-whitespace characrers, if those characters are not explicitly assigned to </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>result</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> variable.</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000"><b>
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
Example:
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@lookup[table;findcol;resultcol;</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>findvalue;</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>notfound]</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>[result]</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>
<br>
^if</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>(^</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=tableclass.htm>table</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>.</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=tablelocate.htm>locate</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>[$</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>findcol</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>;$findvalue]){
<br>
&nbsp;&nbsp;&nbsp;$table.$</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>resultcol</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>
<br>
}{
<br>
&nbsp;&nbsp;&nbsp;$</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>notfound</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>
<br>
}
<br>
</b></span></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000">I</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">n this case, the client will receive either a value from </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>$resultcol</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> column or </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>$notfound</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> value.
<br>
What important is there would be <b>no</b> whitespace characters returned (no line breaks, tabs or spaces).
<br>

<br>
</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000"><b>System variable</b><b>: caller
<br>
</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">All methods and operators have local variable </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>caller</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">, which stores the method's or operator's "scope of the call".
<br>

<br>
You can use it:
<br>
<table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="25"><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"></span></span><span style="font-family:Symbol; font-size:10pt; color:#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span style="font-family:Symbol; font-size:10pt; color:#000000"></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">to find out who called the method or operator. In this case you will need to use </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>$caller.self</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">;
&nbsp;<br>
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td width="25"><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"></span><span style="font-family:Symbol; font-size:10pt; color:#000000"><font face="Symbol" size="2" color="#000000">&#183;</font></span></td><td><span style="font-family:Symbol; font-size:10pt; color:#000000"></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">refer to-</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>$caller.variable_name_to_refer</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">-or assign </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>$caller.variable_name_to_assign[value]</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">-a variable as if you were in the place where the defined method or operator was called from.
&nbsp;<br>
</span></td></tr></table><table width="100%" border="0" cellpadding="0" cellspacing="0"><tr valign="top"><td><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"></span></td><td></td></tr></table><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
For example, you need an operator which would be like system </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>for</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">, yet somewhat different from it. You can create it by yourself, using an opportunity to change local variable with name sent to you within </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>the&nbsp;scope&nbsp;of&nbsp;the&nbsp;call&nbsp;of&nbsp;your&nbsp;operator:</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>
<br>
@steppedfor[name;from;to;step;code]
<br>
$caller.$name($from)
<br>
^</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=opwhile.htm>while</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>($caller.$name&lt;=$to){
<br>
&nbsp;&nbsp;&nbsp;$code
<br>
&nbsp;&nbsp;&nbsp;^caller.$name.</b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b><a href=intdoubleincetc.htm>inc</a></b></span></span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>($step)
<br>
}
<br>
</b></span></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
Now the call&#133;</span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000">
<br>
</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><span style="font-family:Monospace; font-size:10pt; color:#0000FF"><b>@somewhere[][i]
<br>
^steppedfor[i](1;10;2){$i&nbsp;}
<br>
</b></span></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
&#133;will output "</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>1&nbsp;3&nbsp;5&nbsp;7&nbsp;9&nbsp;</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">". Note: </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>it&nbsp;is&nbsp;the&nbsp;local&nbsp;variable&nbsp;of&nbsp;method&nbsp;</b><b>somewhere</b><b>&nbsp;that&nbsp;is&nbsp;changed.</b></span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000">
<br>
</span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000">
<br>
<i>Notice: You may need the opportunity to find out the scope of the call to specify the scope of code's compilation (cf. </i><i>"</i><i><a href=opprocess.htm>Process. Compiling and processing string</a></i><i>".
<br>

<br>
</i></span><span style="font-family:FreeSetC,Arial; font-size:12pt; color:#000000"><b>System variable: locals</b><b>, explicit declaration</b><b>&nbsp;&nbsp;&nbsp;</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"><b><i>[3.3.0]
<br>
</i></b>If </span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b>locals</b></span><span style="font-family:FreeSetC,Arial; font-size:10pt; color:#000000"> variable is explicitly declared, this means to Parser that all variables used in the method are declarated locally.
<br>
To access object or class variables you should use self or CLASS prefixes.
<br>
</span><span style="font-family:Monospace; font-size:10pt; color:#000000"><b><i>
<br>
</i></b></span></span><br>

<!--(later)#include virtual="/docs/comment.html" -->


<hr size=1>
<table border="0" cellspacing="0" cellpadding="0" width="100%">
<tr valign="top">
<td><font size="1">Copyright &copy; 1997&#150;2011 Art. Lebedev Studio | <a href="http://www.artlebedev.com/" target="_blank">http://www.artlebedev.com</a></font></td>
<td align="right"><font size="1">Last updated: 02.03.2011</font></td>
</tr>
</table>
</body>
</html>
