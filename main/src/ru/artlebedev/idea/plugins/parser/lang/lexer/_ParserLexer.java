/* The following code was generated by JFlex 1.4.3 on 02.05.17 20:10 */

package ru.artlebedev.idea.plugins.parser.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.xml.XmlTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 02.05.17 20:10 from the specification file
 * <tt>ParserLexer.flex</tt>
 */
public class _ParserLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LINE_COMMENT = 20;
  public static final int C_COMMENT_END = 16;
  public static final int ATTRIBUTE_VALUE_SQ = 12;
  public static final int DOC_TYPE = 2;
  public static final int ATTRIBUTE_VALUE_DQ = 10;
  public static final int YYINITIAL = 0;
  public static final int PARSERDOC = 18;
  public static final int TAG_ATTRIBUTES = 6;
  public static final int COMMENT = 4;
  public static final int ATTRIBUTE_VALUE_START = 8;
  public static final int C_COMMENT_START = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\65\1\73\1\101\1\3\1\102\22\0\1\65\1\30\1\25"+
    "\1\15\1\105\1\111\1\20\1\26\1\62\1\63\1\110\1\11\1\72"+
    "\1\12\1\7\1\5\1\1\11\1\1\24\1\21\1\27\1\76\1\61"+
    "\1\107\1\77\1\103\1\55\1\35\1\31\1\17\1\16\1\16\1\45"+
    "\1\57\2\16\1\51\1\47\1\104\1\33\1\43\2\16\1\100\1\37"+
    "\1\53\3\16\1\41\1\16\1\74\1\113\1\75\1\13\1\4\1\0"+
    "\1\66\1\56\1\36\1\32\1\10\1\2\1\6\1\46\1\60\2\6"+
    "\1\52\1\50\1\71\1\34\1\44\1\6\1\67\1\70\1\40\1\54"+
    "\1\6\1\6\1\6\1\42\1\6\1\106\1\64\1\14\1\112\6\0"+
    "\1\101\44\0\1\23\12\0\1\23\4\0\1\23\5\0\27\23\1\0"+
    "\37\23\1\0\u01ca\23\4\0\14\23\16\0\5\23\7\0\1\23\1\0"+
    "\1\23\201\0\5\23\1\0\2\23\2\0\4\23\10\0\1\23\1\0"+
    "\3\23\1\0\1\23\1\0\24\23\1\0\123\23\1\0\31\23\100\22"+
    "\62\23\10\0\236\23\11\0\46\23\2\0\1\23\7\0\47\23\110\0"+
    "\33\23\5\0\3\23\55\0\53\23\43\0\2\23\1\0\143\23\1\0"+
    "\1\23\17\0\2\23\7\0\2\23\12\0\3\23\2\0\1\23\20\0"+
    "\1\23\1\0\36\23\35\0\131\23\13\0\1\23\30\0\41\23\11\0"+
    "\2\23\4\0\1\23\5\0\26\23\4\0\1\23\11\0\1\23\3\0"+
    "\1\23\27\0\31\23\107\0\1\23\1\0\13\23\127\0\66\23\3\0"+
    "\1\23\22\0\1\23\7\0\12\23\17\0\7\23\1\0\7\23\5\0"+
    "\10\23\2\0\2\23\2\0\26\23\1\0\7\23\1\0\1\23\3\0"+
    "\4\23\3\0\1\23\20\0\1\23\15\0\2\23\1\0\3\23\16\0"+
    "\2\23\23\0\6\23\4\0\2\23\2\0\26\23\1\0\7\23\1\0"+
    "\2\23\1\0\2\23\1\0\2\23\37\0\4\23\1\0\1\23\23\0"+
    "\3\23\20\0\11\23\1\0\3\23\1\0\26\23\1\0\7\23\1\0"+
    "\2\23\1\0\5\23\3\0\1\23\22\0\1\23\17\0\2\23\43\0"+
    "\10\23\2\0\2\23\2\0\26\23\1\0\7\23\1\0\2\23\1\0"+
    "\5\23\3\0\1\23\36\0\2\23\1\0\3\23\17\0\1\23\21\0"+
    "\1\23\1\0\6\23\3\0\3\23\1\0\4\23\3\0\2\23\1\0"+
    "\1\23\1\0\2\23\3\0\2\23\3\0\3\23\3\0\14\23\26\0"+
    "\1\23\64\0\10\23\1\0\3\23\1\0\27\23\1\0\12\23\1\0"+
    "\5\23\3\0\1\23\32\0\2\23\6\0\2\23\43\0\10\23\1\0"+
    "\3\23\1\0\27\23\1\0\12\23\1\0\5\23\3\0\1\23\40\0"+
    "\1\23\1\0\2\23\17\0\2\23\22\0\10\23\1\0\3\23\1\0"+
    "\51\23\2\0\1\23\20\0\1\23\21\0\2\23\30\0\6\23\5\0"+
    "\22\23\3\0\30\23\1\0\11\23\1\0\1\23\2\0\7\23\72\0"+
    "\60\23\1\0\2\23\14\0\7\23\72\0\2\23\1\0\1\23\2\0"+
    "\2\23\1\0\1\23\2\0\1\23\6\0\4\23\1\0\7\23\1\0"+
    "\3\23\1\0\1\23\1\0\1\23\2\0\2\23\1\0\4\23\1\0"+
    "\2\23\11\0\1\23\2\0\5\23\1\0\1\23\25\0\4\23\40\0"+
    "\1\23\77\0\10\23\1\0\44\23\33\0\5\23\163\0\53\23\24\0"+
    "\1\23\20\0\6\23\4\0\4\23\3\0\1\23\3\0\2\23\7\0"+
    "\3\23\4\0\15\23\14\0\1\23\21\0\46\23\1\0\1\23\5\0"+
    "\1\23\2\0\53\23\1\0\u014d\23\1\0\4\23\2\0\7\23\1\0"+
    "\1\23\1\0\4\23\2\0\51\23\1\0\4\23\2\0\41\23\1\0"+
    "\4\23\2\0\7\23\1\0\1\23\1\0\4\23\2\0\17\23\1\0"+
    "\71\23\1\0\4\23\2\0\103\23\45\0\20\23\20\0\125\23\14\0"+
    "\u026c\23\2\0\21\23\1\0\32\23\5\0\113\23\25\0\15\23\1\0"+
    "\4\23\16\0\22\23\16\0\22\23\16\0\15\23\1\0\3\23\17\0"+
    "\64\23\43\0\1\23\4\0\1\23\103\0\130\23\10\0\51\23\1\0"+
    "\1\23\5\0\106\23\12\0\35\23\63\0\36\23\2\0\5\23\13\0"+
    "\54\23\25\0\7\23\70\0\27\23\11\0\65\23\122\0\1\23\135\0"+
    "\57\23\21\0\7\23\67\0\36\23\15\0\2\23\12\0\54\23\32\0"+
    "\44\23\51\0\3\23\12\0\44\23\153\0\4\23\1\0\4\23\3\0"+
    "\2\23\11\0\300\23\100\0\u0116\23\2\0\6\23\2\0\46\23\2\0"+
    "\6\23\2\0\10\23\1\0\1\23\1\0\1\23\1\0\1\23\1\0"+
    "\37\23\2\0\65\23\1\0\7\23\1\0\1\23\3\0\3\23\1\0"+
    "\7\23\3\0\4\23\2\0\6\23\4\0\15\23\5\0\3\23\1\0"+
    "\7\23\53\0\2\101\107\0\1\23\15\0\1\23\20\0\15\23\145\0"+
    "\1\23\4\0\1\23\2\0\12\23\1\0\1\23\3\0\5\23\6\0"+
    "\1\23\1\0\1\23\1\0\1\23\1\0\4\23\1\0\13\23\2\0"+
    "\4\23\5\0\5\23\4\0\1\23\64\0\2\23\u0a7b\0\57\23\1\0"+
    "\57\23\1\0\205\23\6\0\4\23\3\0\2\23\14\0\46\23\1\0"+
    "\1\23\5\0\1\23\2\0\70\23\7\0\1\23\20\0\27\23\11\0"+
    "\7\23\1\0\7\23\1\0\7\23\1\0\7\23\1\0\7\23\1\0"+
    "\7\23\1\0\7\23\1\0\7\23\120\0\1\23\u01d5\0\2\23\52\0"+
    "\5\23\5\0\2\23\4\0\126\23\6\0\3\23\1\0\132\23\1\0"+
    "\4\23\5\0\51\23\3\0\136\23\21\0\33\23\65\0\20\23\u0200\0"+
    "\u19b6\23\112\0\u51cd\23\63\0\u048d\23\103\0\56\23\2\0\u010d\23\3\0"+
    "\20\23\12\0\2\23\24\0\57\23\20\0\31\23\10\0\106\23\61\0"+
    "\11\23\2\0\147\23\2\0\4\23\1\0\4\23\14\0\13\23\115\0"+
    "\12\23\1\0\3\23\1\0\4\23\1\0\27\23\35\0\64\23\16\0"+
    "\62\23\76\0\6\23\3\0\1\23\16\0\34\23\12\0\27\23\31\0"+
    "\35\23\7\0\57\23\34\0\1\23\60\0\51\23\27\0\3\23\1\0"+
    "\10\23\24\0\27\23\3\0\1\23\5\0\60\23\1\0\1\23\3\0"+
    "\2\23\2\0\5\23\2\0\1\23\1\0\1\23\30\0\3\23\2\0"+
    "\13\23\7\0\3\23\14\0\6\23\2\0\6\23\2\0\6\23\11\0"+
    "\7\23\1\0\7\23\221\0\43\23\35\0\u2ba4\23\14\0\27\23\4\0"+
    "\61\23\u2104\0\u016e\23\2\0\152\23\46\0\7\23\14\0\5\23\5\0"+
    "\1\23\1\0\12\23\1\0\15\23\1\0\5\23\1\0\1\23\1\0"+
    "\2\23\1\0\2\23\1\0\154\23\41\0\u016b\23\22\0\100\23\2\0"+
    "\66\23\50\0\14\23\164\0\5\23\1\0\207\23\44\0\32\23\6\0"+
    "\32\23\13\0\131\23\3\0\6\23\2\0\6\23\2\0\6\23\2\0"+
    "\3\23\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\13\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\4\3\1\41\1\42\4\2\1\43\2\42"+
    "\1\44\4\42\1\45\2\2\1\46\1\47\1\2\1\50"+
    "\1\51\1\42\2\51\1\52\1\53\1\54\5\53\1\55"+
    "\1\53\1\56\1\57\1\60\2\61\1\0\1\62\1\63"+
    "\1\50\1\0\1\64\1\0\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\4\3\13\0\1\42\6\53"+
    "\3\0\4\3\7\0\1\75\1\0\6\53\1\0\4\3"+
    "\6\0\3\53\1\76\2\53\1\0\4\3\2\0\2\77"+
    "\3\0\3\53\1\100\1\53\1\0\4\3\2\0\2\101"+
    "\1\0\4\53\1\102\1\0\2\3\2\103\2\104\1\0"+
    "\2\105\1\0\1\106\3\53\1\0\2\107\2\110\1\0"+
    "\1\41\1\111\2\53\1\112\2\113\1\53\1\100\1\53"+
    "\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0390"+
    "\0\u0390\0\u0390\0\u0474\0\u04c0\0\u0390\0\u0390\0\u050c\0\u0390"+
    "\0\u0390\0\u0390\0\u0390\0\u0558\0\u05a4\0\u05f0\0\u0390\0\u0390"+
    "\0\u063c\0\u0390\0\u0390\0\u0688\0\u0390\0\u0390\0\u0390\0\u0390"+
    "\0\u0390\0\u0390\0\u0390\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804"+
    "\0\u0850\0\u0390\0\u089c\0\u08e8\0\u0934\0\u0980\0\u0390\0\u09cc"+
    "\0\u0a18\0\u0390\0\u0a64\0\u0ab0\0\u0afc\0\u0b48\0\u0390\0\u0ab0"+
    "\0\u0afc\0\u0390\0\u0390\0\u0b48\0\u0390\0\u0390\0\u0b94\0\u09cc"+
    "\0\u0be0\0\u0390\0\u0c2c\0\u0390\0\u0c78\0\u0cc4\0\u0d10\0\u0d5c"+
    "\0\u0da8\0\u0390\0\u0df4\0\u0390\0\u0390\0\u0390\0\u0390\0\u0e40"+
    "\0\u0e8c\0\u0390\0\u0390\0\u0ed8\0\u0f24\0\u0390\0\u0f70\0\u0390"+
    "\0\u0390\0\u0390\0\u0390\0\u0390\0\u0390\0\u0390\0\u0390\0\u0fbc"+
    "\0\u1008\0\u1054\0\u10a0\0\u10ec\0\u1138\0\u1184\0\u11d0\0\u121c"+
    "\0\u089c\0\u08e8\0\u1268\0\u12b4\0\u1300\0\u134c\0\u1398\0\u13e4"+
    "\0\u1430\0\u147c\0\u14c8\0\u1514\0\u1560\0\u15ac\0\u15f8\0\u1644"+
    "\0\u1690\0\u16dc\0\u1728\0\u1774\0\u17c0\0\u180c\0\u1858\0\u18a4"+
    "\0\u18f0\0\u193c\0\u1988\0\u0390\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8"+
    "\0\u1b04\0\u1b50\0\u1b9c\0\u1be8\0\u1c34\0\u1c80\0\u1ccc\0\u1d18"+
    "\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78"+
    "\0\u1fc4\0\u0c2c\0\u2010\0\u205c\0\u20a8\0\u20f4\0\u2140\0\u218c"+
    "\0\u21d8\0\u2224\0\u2270\0\u0390\0\u22bc\0\u2308\0\u2354\0\u23a0"+
    "\0\u23ec\0\u2438\0\u2484\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600"+
    "\0\u264c\0\u2698\0\u26e4\0\u2730\0\u0390\0\u277c\0\u27c8\0\u2814"+
    "\0\u2860\0\u28ac\0\u28f8\0\u0c2c\0\u2944\0\u2990\0\u29dc\0\u0390"+
    "\0\u2a28\0\u0390\0\u2a74\0\u2ac0\0\u0390\0\u2b0c\0\u2b58\0\u0c2c"+
    "\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88\0\u0390\0\u2cd4\0\u0390\0\u2d20"+
    "\0\u2d6c\0\u0390\0\u0c2c\0\u2db8\0\u2e04\0\u0390\0\u0390\0\u2e50"+
    "\0\u2e9c\0\u0c2c\0\u2ee8\0\u0c2c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\2\16\1\17\1\16\1\20\1\16\1\21\1\16"+
    "\1\22\1\23\1\24\1\25\1\26\2\16\1\27\1\30"+
    "\1\26\1\15\1\31\1\32\1\33\1\34\1\35\30\16"+
    "\1\36\1\37\1\40\1\41\1\17\4\16\1\26\1\17"+
    "\1\42\1\43\1\44\1\45\1\16\1\15\1\17\2\16"+
    "\1\46\1\47\1\26\1\50\1\51\1\52\1\53\1\15"+
    "\2\16\1\17\1\16\1\20\1\16\1\21\1\16\1\22"+
    "\1\23\1\24\1\25\1\54\2\16\1\27\1\30\1\26"+
    "\1\15\1\31\1\32\1\33\1\34\1\35\1\16\1\55"+
    "\11\16\1\56\5\16\1\57\6\16\1\36\1\37\1\40"+
    "\1\41\1\17\2\16\1\60\1\16\1\26\1\17\1\42"+
    "\1\43\1\44\1\61\1\16\1\15\1\17\2\16\1\46"+
    "\1\47\1\26\1\50\1\51\1\52\1\53\3\15\1\62"+
    "\21\15\1\63\1\64\14\15\2\65\2\66\12\15\1\67"+
    "\3\15\1\62\5\15\1\62\6\15\1\62\11\15\12\62"+
    "\1\70\14\62\1\71\44\62\1\72\22\62\1\73\1\62"+
    "\1\74\5\62\1\75\13\62\1\76\31\62\1\67\3\62"+
    "\1\73\5\62\1\73\2\62\1\77\3\62\1\73\11\62"+
    "\3\15\1\73\1\15\1\100\5\15\1\101\11\15\1\102"+
    "\1\103\1\104\31\15\1\67\3\15\1\73\5\15\1\73"+
    "\6\15\1\73\11\15\3\62\1\73\7\62\1\75\11\62"+
    "\1\105\1\62\1\76\35\62\1\73\5\62\1\73\6\62"+
    "\1\73\14\62\1\73\7\62\1\75\12\62\1\105\1\76"+
    "\35\62\1\73\5\62\1\73\6\62\1\73\11\62\2\106"+
    "\1\107\3\106\1\107\1\106\1\107\1\106\1\110\3\106"+
    "\2\107\2\106\2\107\5\106\30\107\5\106\4\107\3\106"+
    "\1\111\2\106\1\107\2\106\2\107\11\106\1\107\3\106"+
    "\1\107\1\106\1\107\1\106\1\110\3\106\2\107\2\106"+
    "\2\107\5\106\30\107\5\106\4\107\6\106\1\107\2\106"+
    "\2\107\7\106\1\112\2\113\1\114\1\113\1\112\1\113"+
    "\1\112\1\113\5\112\2\113\11\112\1\113\1\115\1\113"+
    "\1\116\1\113\1\117\1\113\1\120\3\113\1\121\14\113"+
    "\4\112\1\122\1\113\1\123\2\113\1\124\1\114\4\112"+
    "\1\113\1\112\1\114\2\113\7\112\73\14\1\0\20\14"+
    "\115\0\2\16\1\0\3\16\1\0\1\16\1\0\1\16"+
    "\3\0\2\16\11\0\30\16\5\0\4\16\6\0\1\16"+
    "\2\0\2\16\12\0\1\17\61\0\1\17\5\0\1\17"+
    "\6\0\1\17\13\0\1\125\27\0\1\126\74\0\2\127"+
    "\1\130\3\0\1\127\2\0\2\127\34\0\2\127\10\0"+
    "\2\127\1\0\1\127\5\0\2\127\6\0\2\131\1\0"+
    "\1\131\1\0\1\131\1\0\1\131\2\0\1\131\1\0"+
    "\3\131\1\132\1\133\7\0\30\131\5\0\4\131\6\0"+
    "\1\131\2\0\2\131\11\0\1\134\1\0\1\134\1\135"+
    "\1\134\1\0\1\134\5\0\2\134\2\0\3\134\2\0"+
    "\1\136\1\137\30\134\5\0\4\134\4\0\1\140\1\0"+
    "\1\134\2\0\2\134\73\0\1\141\11\0\1\142\76\0"+
    "\1\143\14\0\1\144\101\0\1\145\125\0\1\146\41\0"+
    "\1\147\70\0\2\16\1\0\3\16\1\0\1\16\1\0"+
    "\1\16\3\0\2\16\11\0\11\16\1\150\16\16\5\0"+
    "\4\16\6\0\1\16\2\0\2\16\10\0\2\16\1\0"+
    "\3\16\1\0\1\16\1\0\1\16\3\0\2\16\11\0"+
    "\30\16\5\0\1\151\3\16\6\0\1\16\2\0\2\16"+
    "\10\0\2\16\1\0\3\16\1\0\1\16\1\0\1\16"+
    "\3\0\2\16\11\0\3\16\1\152\24\16\5\0\4\16"+
    "\6\0\1\16\2\0\2\16\10\0\2\16\1\0\3\16"+
    "\1\0\1\16\1\0\1\16\3\0\2\16\11\0\7\16"+
    "\1\153\20\16\5\0\4\16\6\0\1\16\2\0\2\16"+
    "\42\0\1\154\1\0\1\155\15\0\1\156\1\0\1\157"+
    "\12\0\1\160\23\0\25\161\1\62\66\161\26\162\1\62"+
    "\65\162\53\0\2\163\76\0\2\164\65\0\1\165\131\0"+
    "\1\166\66\0\1\73\61\0\1\73\5\0\1\73\6\0"+
    "\1\73\72\0\1\67\45\0\2\62\1\167\3\0\1\62"+
    "\2\0\2\62\34\0\2\62\10\0\2\62\1\0\1\62"+
    "\5\0\2\62\7\0\1\134\1\0\1\134\1\135\1\134"+
    "\1\0\1\134\5\0\2\134\2\0\3\134\4\0\30\134"+
    "\5\0\4\134\6\0\1\134\2\0\2\134\10\0\3\107"+
    "\2\0\3\107\5\0\3\107\1\0\2\107\4\0\31\107"+
    "\1\0\10\107\1\0\1\107\4\0\1\107\1\0\3\107"+
    "\70\0\1\106\33\0\2\113\1\0\3\113\1\0\1\113"+
    "\1\0\1\113\3\0\2\113\11\0\30\113\5\0\4\113"+
    "\6\0\1\113\2\0\2\113\10\0\2\113\1\0\3\113"+
    "\1\0\1\113\1\0\1\113\3\0\2\113\11\0\11\113"+
    "\1\170\16\113\5\0\4\113\6\0\1\113\2\0\2\113"+
    "\10\0\2\113\1\0\3\113\1\0\1\113\1\0\1\113"+
    "\3\0\2\113\11\0\13\113\1\171\14\113\5\0\4\113"+
    "\6\0\1\113\2\0\2\113\10\0\2\113\1\0\3\113"+
    "\1\0\1\113\1\0\1\113\3\0\2\113\11\0\3\113"+
    "\1\172\24\113\5\0\4\113\6\0\1\113\2\0\2\113"+
    "\10\0\2\113\1\0\3\113\1\0\1\113\1\0\1\113"+
    "\3\0\2\113\11\0\11\113\1\173\16\113\5\0\4\113"+
    "\6\0\1\113\2\0\2\113\10\0\2\113\1\0\3\113"+
    "\1\0\1\113\1\0\1\113\3\0\2\113\11\0\30\113"+
    "\5\0\1\174\3\113\6\0\1\113\2\0\2\113\10\0"+
    "\2\113\1\0\3\113\1\0\1\175\1\0\1\113\3\0"+
    "\2\113\11\0\30\113\5\0\4\113\6\0\1\113\2\0"+
    "\2\113\10\0\1\176\14\0\2\176\11\0\1\176\1\0"+
    "\1\176\1\0\1\176\1\0\1\176\1\0\1\176\1\0"+
    "\1\176\1\0\1\176\1\0\1\176\1\0\1\176\1\0"+
    "\1\176\1\0\1\176\1\0\1\176\20\0\1\176\2\0"+
    "\2\176\10\0\2\131\1\0\1\131\1\0\1\131\1\0"+
    "\1\131\2\0\1\131\1\0\3\131\1\0\1\133\7\0"+
    "\30\131\5\0\4\131\6\0\1\131\2\0\2\131\10\0"+
    "\2\134\1\0\1\134\1\0\3\134\1\0\1\134\3\0"+
    "\2\134\2\0\3\134\4\0\30\134\5\0\4\134\6\0"+
    "\1\134\2\0\2\134\11\0\1\134\1\0\1\134\1\0"+
    "\1\134\1\0\1\134\5\0\2\134\2\0\3\134\4\0"+
    "\30\134\5\0\4\134\6\0\1\134\2\0\2\134\21\0"+
    "\1\177\16\0\2\200\62\0\2\16\1\0\3\16\1\0"+
    "\1\16\1\0\1\16\3\0\2\16\11\0\30\16\5\0"+
    "\3\16\1\201\6\0\1\16\2\0\2\16\10\0\2\16"+
    "\1\0\3\16\1\0\1\16\1\0\1\16\3\0\2\16"+
    "\11\0\30\16\5\0\1\16\1\202\2\16\6\0\1\16"+
    "\2\0\2\16\10\0\2\16\1\0\3\16\1\0\1\16"+
    "\1\0\1\16\3\0\2\16\11\0\5\16\1\203\22\16"+
    "\5\0\4\16\6\0\1\16\2\0\2\16\10\0\2\16"+
    "\1\0\3\16\1\0\1\16\1\0\1\16\3\0\2\16"+
    "\11\0\30\16\5\0\1\204\3\16\6\0\1\16\2\0"+
    "\2\16\52\0\1\205\121\0\1\206\142\0\1\207\116\0"+
    "\1\210\50\0\1\211\130\0\2\212\104\0\2\213\46\0"+
    "\1\165\55\0\1\67\3\0\1\165\5\0\1\165\6\0"+
    "\1\165\105\0\1\214\20\0\1\215\14\0\2\215\11\0"+
    "\1\215\1\0\1\215\1\0\1\215\1\0\1\215\1\0"+
    "\1\215\1\0\1\215\1\0\1\215\1\0\1\215\1\0"+
    "\1\215\1\0\1\215\1\0\1\215\1\0\1\215\20\0"+
    "\1\215\2\0\2\215\10\0\2\113\1\0\3\113\1\0"+
    "\1\113\1\0\1\113\3\0\2\113\11\0\30\113\5\0"+
    "\3\113\1\216\6\0\1\113\2\0\2\113\10\0\2\113"+
    "\1\0\3\113\1\0\1\113\1\0\1\113\3\0\2\113"+
    "\11\0\7\113\1\217\20\113\5\0\4\113\6\0\1\113"+
    "\2\0\2\113\10\0\2\113\1\0\3\113\1\0\1\113"+
    "\1\0\1\113\3\0\2\113\11\0\30\113\5\0\3\113"+
    "\1\220\6\0\1\113\2\0\2\113\10\0\2\113\1\0"+
    "\3\113\1\0\1\113\1\0\1\113\3\0\2\113\11\0"+
    "\13\113\1\221\14\113\5\0\4\113\6\0\1\113\2\0"+
    "\2\113\10\0\2\113\1\0\3\113\1\0\1\113\1\0"+
    "\1\113\3\0\2\113\11\0\30\113\5\0\1\113\1\222"+
    "\2\113\6\0\1\113\2\0\2\113\10\0\2\113\1\0"+
    "\3\113\1\0\1\113\1\0\1\113\3\0\2\113\11\0"+
    "\30\113\5\0\2\113\1\223\1\113\6\0\1\113\2\0"+
    "\2\113\10\0\1\127\14\0\2\127\11\0\1\127\1\0"+
    "\1\127\1\0\1\127\1\0\1\127\1\0\1\127\1\0"+
    "\1\127\1\0\1\127\1\0\1\127\1\0\1\127\1\0"+
    "\1\127\1\0\1\127\1\0\1\127\20\0\1\127\2\0"+
    "\2\127\21\0\1\106\134\0\2\224\60\0\2\16\1\0"+
    "\3\16\1\0\1\16\1\0\1\16\3\0\2\16\11\0"+
    "\30\16\5\0\1\225\3\16\6\0\1\16\2\0\2\16"+
    "\10\0\2\16\1\0\3\16\1\0\1\16\1\0\1\16"+
    "\3\0\2\16\11\0\7\16\1\226\20\16\5\0\4\16"+
    "\6\0\1\16\2\0\2\16\10\0\2\16\1\0\3\16"+
    "\1\0\1\16\1\0\1\16\3\0\2\16\11\0\30\16"+
    "\5\0\1\227\3\16\6\0\1\16\2\0\2\16\10\0"+
    "\2\16\1\0\3\16\1\0\1\16\1\0\1\16\3\0"+
    "\2\16\11\0\7\16\1\230\20\16\5\0\4\16\6\0"+
    "\1\16\2\0\2\16\46\0\1\231\157\0\1\232\27\0"+
    "\1\233\174\0\1\234\101\0\1\235\76\0\2\236\112\0"+
    "\2\62\42\0\1\62\14\0\2\62\11\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\20\0\1\62\2\0"+
    "\2\62\10\0\2\113\1\0\3\113\1\0\1\113\1\0"+
    "\1\113\3\0\2\113\11\0\30\113\5\0\1\237\3\113"+
    "\6\0\1\113\2\0\2\113\10\0\2\113\1\0\3\113"+
    "\1\0\1\113\1\0\1\113\3\0\2\113\11\0\27\113"+
    "\1\240\5\0\4\113\6\0\1\113\2\0\2\113\10\0"+
    "\2\113\1\0\3\113\1\0\1\113\1\0\1\113\3\0"+
    "\2\113\11\0\30\113\5\0\2\113\1\241\1\113\6\0"+
    "\1\113\2\0\2\113\10\0\2\113\1\0\3\113\1\0"+
    "\1\242\1\0\1\113\3\0\2\113\11\0\30\113\5\0"+
    "\4\113\6\0\1\113\2\0\2\113\10\0\2\113\1\0"+
    "\3\113\1\0\1\113\1\0\1\113\3\0\2\113\11\0"+
    "\30\113\5\0\1\243\3\113\6\0\1\113\2\0\2\113"+
    "\10\0\2\113\1\0\3\113\1\0\1\113\1\0\1\113"+
    "\3\0\2\113\11\0\23\113\1\244\4\113\5\0\4\113"+
    "\6\0\1\113\2\0\2\113\44\0\2\245\56\0\2\16"+
    "\1\0\3\16\1\0\1\16\1\0\1\16\3\0\2\16"+
    "\11\0\17\16\1\246\10\16\5\0\4\16\6\0\1\16"+
    "\2\0\2\16\10\0\2\16\1\0\3\16\1\0\1\16"+
    "\1\0\1\16\3\0\2\16\11\0\27\16\1\247\5\0"+
    "\4\16\6\0\1\16\2\0\2\16\10\0\2\16\1\0"+
    "\3\16\1\0\1\16\1\0\1\16\3\0\2\16\11\0"+
    "\21\16\1\250\6\16\5\0\4\16\6\0\1\16\2\0"+
    "\2\16\10\0\2\16\1\0\3\16\1\0\1\16\1\0"+
    "\1\16\3\0\2\16\11\0\27\16\1\251\5\0\4\16"+
    "\6\0\1\16\2\0\2\16\66\0\1\252\134\0\1\253"+
    "\16\0\1\254\67\0\1\254\5\0\1\254\1\255\30\0"+
    "\1\256\134\0\1\257\132\0\2\260\34\0\2\113\1\0"+
    "\3\113\1\0\1\113\1\0\1\113\3\0\2\113\11\0"+
    "\17\113\1\261\10\113\5\0\4\113\6\0\1\113\2\0"+
    "\2\113\10\0\2\113\1\0\3\113\1\0\1\113\1\0"+
    "\1\113\3\0\2\113\11\0\3\113\1\262\24\113\5\0"+
    "\4\113\6\0\1\113\2\0\2\113\10\0\2\113\1\0"+
    "\3\113\1\0\1\113\1\0\1\113\3\0\2\113\11\0"+
    "\7\113\1\263\20\113\5\0\4\113\6\0\1\113\2\0"+
    "\2\113\10\0\2\113\1\0\3\113\1\0\1\113\1\0"+
    "\1\113\3\0\2\113\11\0\17\113\1\264\10\113\5\0"+
    "\4\113\6\0\1\113\2\0\2\113\10\0\2\113\1\0"+
    "\3\113\1\0\1\113\1\0\1\113\3\0\2\113\11\0"+
    "\21\113\1\265\6\113\5\0\4\113\6\0\1\113\2\0"+
    "\2\113\46\0\2\266\54\0\2\16\1\0\3\16\1\0"+
    "\1\16\1\0\1\16\3\0\2\16\11\0\27\16\1\267"+
    "\5\0\4\16\6\0\1\16\2\0\2\16\10\0\2\16"+
    "\1\0\3\16\1\0\1\16\1\0\1\16\3\0\2\16"+
    "\11\0\30\16\5\0\1\270\3\16\6\0\1\16\2\0"+
    "\2\16\10\0\2\16\1\0\3\16\1\0\1\16\1\0"+
    "\1\16\3\0\2\16\11\0\30\16\5\0\2\16\1\271"+
    "\1\16\6\0\1\16\2\0\2\16\10\0\2\16\1\0"+
    "\3\16\1\0\1\16\1\0\1\16\3\0\2\16\11\0"+
    "\5\16\1\272\22\16\5\0\4\16\6\0\1\16\2\0"+
    "\2\16\42\0\1\273\160\0\1\274\106\0\1\254\23\0"+
    "\1\275\67\0\1\275\5\0\1\275\1\276\71\0\1\277"+
    "\70\0\2\62\56\0\2\113\1\0\3\113\1\0\1\113"+
    "\1\0\1\113\3\0\2\113\11\0\27\113\1\300\5\0"+
    "\4\113\6\0\1\113\2\0\2\113\10\0\2\113\1\0"+
    "\3\113\1\0\1\113\1\0\1\113\3\0\2\113\11\0"+
    "\30\113\5\0\3\113\1\301\6\0\1\113\2\0\2\113"+
    "\10\0\2\113\1\0\3\113\1\0\1\113\1\0\1\113"+
    "\3\0\2\113\11\0\30\113\5\0\1\113\1\302\2\113"+
    "\6\0\1\113\2\0\2\113\10\0\2\113\1\0\3\113"+
    "\1\0\1\303\1\0\1\113\3\0\2\113\11\0\30\113"+
    "\5\0\4\113\6\0\1\113\2\0\2\113\10\0\2\113"+
    "\1\0\3\113\1\0\1\113\1\0\1\113\3\0\2\113"+
    "\11\0\7\113\1\304\20\113\5\0\4\113\6\0\1\113"+
    "\2\0\2\113\50\0\2\305\52\0\2\16\1\0\3\16"+
    "\1\0\1\16\1\0\1\16\3\0\2\16\11\0\5\16"+
    "\1\306\22\16\5\0\4\16\6\0\1\16\2\0\2\16"+
    "\10\0\2\16\1\0\3\16\1\0\1\16\1\0\1\16"+
    "\3\0\2\16\11\0\21\16\1\307\6\16\5\0\4\16"+
    "\6\0\1\16\2\0\2\16\10\0\2\16\1\310\3\16"+
    "\1\0\1\16\1\0\1\16\3\0\2\16\11\0\30\16"+
    "\5\0\4\16\1\0\1\310\4\0\1\16\1\310\1\311"+
    "\2\16\10\0\2\16\1\312\3\16\1\0\1\16\1\0"+
    "\1\16\3\0\2\16\11\0\30\16\5\0\4\16\1\0"+
    "\1\312\4\0\1\16\1\312\1\313\2\16\113\0\1\314"+
    "\12\0\1\315\67\0\1\315\5\0\1\315\1\316\104\0"+
    "\1\275\56\0\1\317\56\0\2\113\1\0\3\113\1\0"+
    "\1\113\1\0\1\113\3\0\2\113\11\0\5\113\1\320"+
    "\22\113\5\0\4\113\6\0\1\113\2\0\2\113\10\0"+
    "\2\113\1\0\3\113\1\0\1\113\1\0\1\113\3\0"+
    "\2\113\11\0\30\113\5\0\1\321\3\113\6\0\1\113"+
    "\2\0\2\113\10\0\2\113\1\0\3\113\1\0\1\113"+
    "\1\0\1\113\3\0\2\113\11\0\23\113\1\322\4\113"+
    "\5\0\4\113\6\0\1\113\2\0\2\113\10\0\2\113"+
    "\1\0\3\113\1\0\1\113\1\0\1\113\3\0\2\113"+
    "\11\0\7\113\1\323\20\113\5\0\4\113\6\0\1\113"+
    "\2\0\2\113\52\0\2\324\50\0\2\16\1\325\3\16"+
    "\1\0\1\16\1\0\1\16\3\0\2\16\11\0\30\16"+
    "\5\0\4\16\1\0\1\325\4\0\1\16\1\325\1\326"+
    "\2\16\10\0\2\16\1\327\3\16\1\0\1\16\1\0"+
    "\1\16\3\0\2\16\11\0\30\16\5\0\4\16\1\0"+
    "\1\327\4\0\1\16\1\327\1\330\2\16\102\0\1\310"+
    "\113\0\1\312\120\0\1\331\106\0\1\315\44\0\1\332"+
    "\70\0\2\113\1\0\3\113\1\0\1\113\1\0\1\113"+
    "\3\0\2\113\11\0\21\113\1\333\6\113\5\0\4\113"+
    "\6\0\1\113\2\0\2\113\10\0\2\113\1\0\3\113"+
    "\1\0\1\113\1\0\1\113\3\0\2\113\11\0\5\113"+
    "\1\334\22\113\5\0\4\113\6\0\1\113\2\0\2\113"+
    "\10\0\2\113\1\0\3\113\1\0\1\335\1\0\1\113"+
    "\3\0\2\113\11\0\30\113\5\0\4\113\6\0\1\113"+
    "\2\0\2\113\17\0\1\336\6\0\1\336\167\0\1\325"+
    "\113\0\1\327\23\0\1\337\67\0\1\337\5\0\1\337"+
    "\1\340\12\0\2\113\1\0\3\113\1\0\1\113\1\0"+
    "\1\113\3\0\2\113\11\0\7\113\1\341\20\113\5\0"+
    "\4\113\6\0\1\113\2\0\2\113\10\0\2\113\1\0"+
    "\3\113\1\0\1\113\1\0\1\113\3\0\2\113\11\0"+
    "\30\113\5\0\1\113\1\342\2\113\6\0\1\113\2\0"+
    "\2\113\102\0\1\337\21\0\2\113\1\0\3\113\1\0"+
    "\1\113\1\0\1\113\3\0\2\113\11\0\3\113\1\343"+
    "\24\113\5\0\4\113\6\0\1\113\2\0\2\113\10\0"+
    "\2\113\1\0\3\113\1\0\1\113\1\0\1\113\3\0"+
    "\2\113\11\0\30\113\5\0\1\113\1\344\2\113\6\0"+
    "\1\113\2\0\2\113\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\1\1\11\2\1\3\11\2\1\2\11\1\1"+
    "\4\11\3\1\2\11\1\1\2\11\1\1\7\11\6\1"+
    "\1\11\4\1\1\11\2\1\1\11\4\1\1\11\2\1"+
    "\2\11\1\1\2\11\3\1\1\11\1\1\1\11\5\1"+
    "\1\11\1\1\4\11\1\1\1\0\2\11\1\1\1\0"+
    "\1\11\1\0\10\11\4\1\13\0\7\1\3\0\4\1"+
    "\7\0\1\11\1\0\6\1\1\0\4\1\6\0\6\1"+
    "\1\0\4\1\2\0\1\11\1\1\3\0\5\1\1\0"+
    "\4\1\2\0\1\11\1\1\1\0\5\1\1\0\2\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\11\1\1\1\0"+
    "\4\1\1\0\1\11\1\1\1\11\1\1\1\0\1\11"+
    "\3\1\2\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public _ParserLexer() {
      this((java.io.Reader) null);
    }

    public _ParserLexer(boolean highlightMode) {
      this((java.io.Reader) null);
    }


  public _ParserLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ParserLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1294) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
        return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
                zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { return ParserTokenTypes.COLON;
          }
        case 77: break;
        case 31: 
          { return ParserTokenTypes.DIR;
          }
        case 78: break;
        case 62: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_TYPE_KEYWORD;
          }
        case 79: break;
        case 12: 
          { return ParserTokenTypes.AND;
          }
        case 80: break;
        case 64: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_PARAM_KEYWORD;
          }
        case 81: break;
        case 2: 
          { return ParserTokenTypes.BAD_CHARACTER;
          }
        case 82: break;
        case 55: 
          { return ParserTokenTypes.NE;
          }
        case 83: break;
        case 50: 
          { return ParserTokenTypes.ANDAND;
          }
        case 84: break;
        case 65: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { return ParserTokenTypes.BASE_KEYWORD;
          }
        case 85: break;
        case 13: 
          { return ParserTokenTypes.SEMICOLON;
          }
        case 86: break;
        case 71: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { return ParserTokenTypes.DYNAMIC_KEYWORD;
          }
        case 87: break;
        case 53: 
          { return ParserTokenTypes.LE;
          }
        case 88: break;
        case 28: 
          { return ParserTokenTypes.MULT;
          }
        case 89: break;
        case 49: 
          { return ParserTokenTypes.ESCAPE;
          }
        case 90: break;
        case 61: 
          { yybegin(C_COMMENT_END); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 91: break;
        case 7: 
          { return ParserTokenTypes.PLUS;
          }
        case 92: break;
        case 11: 
          { return ParserTokenTypes.USELESS_CHAR;
          }
        case 93: break;
        case 41: 
          { yybegin(COMMENT); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 94: break;
        case 59: 
          { return ParserTokenTypes.EQEQ;
          }
        case 95: break;
        case 57: 
          { return ParserTokenTypes.GE;
          }
        case 96: break;
        case 15: 
          { return ParserTokenTypes.QUOT;
          }
        case 97: break;
        case 54: 
          { return ParserTokenTypes.XOR;
          }
        case 98: break;
        case 52: 
          { return ParserTokenTypes.LTLT;
          }
        case 99: break;
        case 70: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_DYNAMIC_KEYWORD;
          }
        case 100: break;
        case 25: 
          { return ParserTokenTypes.AT_SIGN;
          }
        case 101: break;
        case 18: 
          { return ParserTokenTypes.EXCL;
          }
        case 102: break;
        case 5: 
          { return ParserTokenTypes.DIV;
          }
        case 103: break;
        case 40: 
          { yybegin(TAG_ATTRIBUTES); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 104: break;
        case 16: 
          { return ParserTokenTypes.SQUOT;
          }
        case 105: break;
        case 73: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_OPTIONAL_KEYWORD;
          }
        case 106: break;
        case 56: 
          { return ParserTokenTypes.GTGT;
          }
        case 107: break;
        case 4: 
          { return ParserTokenTypes.WHITE_SPACE;
          }
        case 108: break;
        case 63: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return ParserTokenTypes.USE_KEYWORD;
          }
        case 109: break;
        case 6: 
          { return ParserTokenTypes.DOT;
          }
        case 110: break;
        case 46: 
          { yybegin(PARSERDOC); return ParserTokenTypes.COMMA;
          }
        case 111: break;
        case 42: 
          { yybegin(PARSERDOC); return ParserTokenTypes.BAD_CHARACTER;
          }
        case 112: break;
        case 1: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SHARP_COMMENT;
          }
        case 113: break;
        case 39: 
          { yybegin(ATTRIBUTE_VALUE_SQ); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 114: break;
        case 66: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_RESULT_KEYWORD;
          }
        case 115: break;
        case 45: 
          { yybegin(PARSERDOC); return ParserTokenTypes.NEW_LINE_INDENT;
          }
        case 116: break;
        case 30: 
          { return ParserTokenTypes.TILDE;
          }
        case 117: break;
        case 72: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { return ParserTokenTypes.PARTIAL_KEYWORD;
          }
        case 118: break;
        case 51: 
          { return ParserTokenTypes.HTML_ENTITY;
          }
        case 119: break;
        case 36: 
          { yybegin(C_COMMENT_START); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 120: break;
        case 26: 
          { return ParserTokenTypes.DOLLAR;
          }
        case 121: break;
        case 9: 
          { return ParserTokenTypes.HAT_SIGN;
          }
        case 122: break;
        case 24: 
          { return ParserTokenTypes.RBRACKET;
          }
        case 123: break;
        case 37: 
          { yybegin(ATTRIBUTE_VALUE_START); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 124: break;
        case 68: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { return ParserTokenTypes.STATIC_KEYWORD;
          }
        case 125: break;
        case 48: 
          { return ParserTokenTypes.MINUSD_KEYWORD;
          }
        case 126: break;
        case 17: 
          { return ParserTokenTypes.LT;
          }
        case 127: break;
        case 38: 
          { yybegin(ATTRIBUTE_VALUE_DQ); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 128: break;
        case 47: 
          { return ParserTokenTypes.MINUSF_KEYWORD;
          }
        case 129: break;
        case 8: 
          { return ParserTokenTypes.MINUS;
          }
        case 130: break;
        case 44: 
          { yybegin(YYINITIAL); return ParserTokenTypes.WHITE_SPACE;
          }
        case 131: break;
        case 29: 
          { return ParserTokenTypes.PERC;
          }
        case 132: break;
        case 21: 
          { return ParserTokenTypes.RPAR;
          }
        case 133: break;
        case 10: 
          { return ParserTokenTypes.RBRACE;
          }
        case 134: break;
        case 74: 
          { yybegin(DOC_TYPE); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 135: break;
        case 32: 
          { yybegin(LINE_COMMENT); yypushback(1);
          }
        case 136: break;
        case 3: 
          { return ParserTokenTypes.IDENTIFIER;
          }
        case 137: break;
        case 27: 
          { return ParserTokenTypes.LBRACE;
          }
        case 138: break;
        case 19: 
          { return ParserTokenTypes.GT;
          }
        case 139: break;
        case 34: 
          { return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 140: break;
        case 75: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 8;
          { return ParserTokenTypes.OPTIONS_KEYWORD;
          }
        case 141: break;
        case 23: 
          { return ParserTokenTypes.LBRACKET;
          }
        case 142: break;
        case 20: 
          { return ParserTokenTypes.LPAR;
          }
        case 143: break;
        case 35: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 144: break;
        case 67: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { return ParserTokenTypes.LOCALS_KEYWORD;
          }
        case 145: break;
        case 58: 
          { return ParserTokenTypes.OROR;
          }
        case 146: break;
        case 69: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { return ParserTokenTypes.CLASS_KEYWORD;
          }
        case 147: break;
        case 22: 
          { return ParserTokenTypes.OR;
          }
        case 148: break;
        case 76: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_CONSTRUCTOR_KEYWORD;
          }
        case 149: break;
        case 43: 
          { yybegin(PARSERDOC); return ParserTokenTypes.IDENTIFIER;
          }
        case 150: break;
        case 33: 
          { return ParserTokenTypes.KEY_AT_SIGN;
          }
        case 151: break;
        case 60: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_START;
          }
        case 152: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
