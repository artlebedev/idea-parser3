/* The following code was generated by JFlex 1.4.3 on 13.10.16 8:51 */

package ru.artlebedev.idea.plugins.parser.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.xml.XmlTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13.10.16 8:51 from the specification file
 * <tt>ParserLexer.flex</tt>
 */
public class _ParserLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LINE_COMMENT = 20;
  public static final int C_COMMENT_END = 16;
  public static final int ATTRIBUTE_VALUE_SQ = 12;
  public static final int DOC_TYPE = 2;
  public static final int ATTRIBUTE_VALUE_DQ = 10;
  public static final int YYINITIAL = 0;
  public static final int PARSERDOC = 18;
  public static final int TAG_ATTRIBUTES = 6;
  public static final int COMMENT = 4;
  public static final int ATTRIBUTE_VALUE_START = 8;
  public static final int C_COMMENT_START = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\70\1\4\1\103\1\5\1\3\22\0\1\70\1\33\1\25"+
    "\1\14\1\106\1\113\1\11\1\26\1\65\1\66\1\112\1\20\1\75"+
    "\1\7\1\16\1\10\1\1\11\1\1\30\1\13\1\32\1\100\1\64"+
    "\1\110\1\101\1\104\1\60\1\40\1\34\1\24\1\22\1\23\1\50"+
    "\1\62\2\23\1\54\1\52\1\105\1\36\1\46\2\23\1\102\1\42"+
    "\1\56\3\23\1\44\1\23\1\76\1\115\1\77\1\12\1\6\1\0"+
    "\1\71\1\61\1\41\1\35\1\17\1\2\1\117\1\51\1\63\2\15"+
    "\1\55\1\53\1\74\1\37\1\47\1\116\1\72\1\73\1\43\1\57"+
    "\1\15\1\111\1\15\1\45\1\15\1\107\1\67\1\21\1\114\6\0"+
    "\1\103\44\0\1\27\12\0\1\27\4\0\1\27\5\0\27\27\1\0"+
    "\37\27\1\0\u01ca\27\4\0\14\27\16\0\5\27\7\0\1\27\1\0"+
    "\1\27\201\0\5\27\1\0\2\27\2\0\4\27\10\0\1\27\1\0"+
    "\3\27\1\0\1\27\1\0\24\27\1\0\123\27\1\0\31\27\100\31"+
    "\62\27\10\0\236\27\11\0\46\27\2\0\1\27\7\0\47\27\110\0"+
    "\33\27\5\0\3\27\55\0\53\27\43\0\2\27\1\0\143\27\1\0"+
    "\1\27\17\0\2\27\7\0\2\27\12\0\3\27\2\0\1\27\20\0"+
    "\1\27\1\0\36\27\35\0\131\27\13\0\1\27\30\0\41\27\11\0"+
    "\2\27\4\0\1\27\5\0\26\27\4\0\1\27\11\0\1\27\3\0"+
    "\1\27\27\0\31\27\107\0\1\27\1\0\13\27\127\0\66\27\3\0"+
    "\1\27\22\0\1\27\7\0\12\27\17\0\7\27\1\0\7\27\5\0"+
    "\10\27\2\0\2\27\2\0\26\27\1\0\7\27\1\0\1\27\3\0"+
    "\4\27\3\0\1\27\20\0\1\27\15\0\2\27\1\0\3\27\16\0"+
    "\2\27\23\0\6\27\4\0\2\27\2\0\26\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\27\1\0\2\27\37\0\4\27\1\0\1\27\23\0"+
    "\3\27\20\0\11\27\1\0\3\27\1\0\26\27\1\0\7\27\1\0"+
    "\2\27\1\0\5\27\3\0\1\27\22\0\1\27\17\0\2\27\43\0"+
    "\10\27\2\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27\1\0"+
    "\5\27\3\0\1\27\36\0\2\27\1\0\3\27\17\0\1\27\21\0"+
    "\1\27\1\0\6\27\3\0\3\27\1\0\4\27\3\0\2\27\1\0"+
    "\1\27\1\0\2\27\3\0\2\27\3\0\3\27\3\0\14\27\26\0"+
    "\1\27\64\0\10\27\1\0\3\27\1\0\27\27\1\0\12\27\1\0"+
    "\5\27\3\0\1\27\32\0\2\27\6\0\2\27\43\0\10\27\1\0"+
    "\3\27\1\0\27\27\1\0\12\27\1\0\5\27\3\0\1\27\40\0"+
    "\1\27\1\0\2\27\17\0\2\27\22\0\10\27\1\0\3\27\1\0"+
    "\51\27\2\0\1\27\20\0\1\27\21\0\2\27\30\0\6\27\5\0"+
    "\22\27\3\0\30\27\1\0\11\27\1\0\1\27\2\0\7\27\72\0"+
    "\60\27\1\0\2\27\14\0\7\27\72\0\2\27\1\0\1\27\2\0"+
    "\2\27\1\0\1\27\2\0\1\27\6\0\4\27\1\0\7\27\1\0"+
    "\3\27\1\0\1\27\1\0\1\27\2\0\2\27\1\0\4\27\1\0"+
    "\2\27\11\0\1\27\2\0\5\27\1\0\1\27\25\0\4\27\40\0"+
    "\1\27\77\0\10\27\1\0\44\27\33\0\5\27\163\0\53\27\24\0"+
    "\1\27\20\0\6\27\4\0\4\27\3\0\1\27\3\0\2\27\7\0"+
    "\3\27\4\0\15\27\14\0\1\27\21\0\46\27\1\0\1\27\5\0"+
    "\1\27\2\0\53\27\1\0\u014d\27\1\0\4\27\2\0\7\27\1\0"+
    "\1\27\1\0\4\27\2\0\51\27\1\0\4\27\2\0\41\27\1\0"+
    "\4\27\2\0\7\27\1\0\1\27\1\0\4\27\2\0\17\27\1\0"+
    "\71\27\1\0\4\27\2\0\103\27\45\0\20\27\20\0\125\27\14\0"+
    "\u026c\27\2\0\21\27\1\0\32\27\5\0\113\27\25\0\15\27\1\0"+
    "\4\27\16\0\22\27\16\0\22\27\16\0\15\27\1\0\3\27\17\0"+
    "\64\27\43\0\1\27\4\0\1\27\103\0\130\27\10\0\51\27\1\0"+
    "\1\27\5\0\106\27\12\0\35\27\63\0\36\27\2\0\5\27\13\0"+
    "\54\27\25\0\7\27\70\0\27\27\11\0\65\27\122\0\1\27\135\0"+
    "\57\27\21\0\7\27\67\0\36\27\15\0\2\27\12\0\54\27\32\0"+
    "\44\27\51\0\3\27\12\0\44\27\153\0\4\27\1\0\4\27\3\0"+
    "\2\27\11\0\300\27\100\0\u0116\27\2\0\6\27\2\0\46\27\2\0"+
    "\6\27\2\0\10\27\1\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\37\27\2\0\65\27\1\0\7\27\1\0\1\27\3\0\3\27\1\0"+
    "\7\27\3\0\4\27\2\0\6\27\4\0\15\27\5\0\3\27\1\0"+
    "\7\27\53\0\2\103\107\0\1\27\15\0\1\27\20\0\15\27\145\0"+
    "\1\27\4\0\1\27\2\0\12\27\1\0\1\27\3\0\5\27\6\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\1\0\13\27\2\0"+
    "\4\27\5\0\5\27\4\0\1\27\64\0\2\27\u0a7b\0\57\27\1\0"+
    "\57\27\1\0\205\27\6\0\4\27\3\0\2\27\14\0\46\27\1\0"+
    "\1\27\5\0\1\27\2\0\70\27\7\0\1\27\20\0\27\27\11\0"+
    "\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0"+
    "\7\27\1\0\7\27\1\0\7\27\120\0\1\27\u01d5\0\2\27\52\0"+
    "\5\27\5\0\2\27\4\0\126\27\6\0\3\27\1\0\132\27\1\0"+
    "\4\27\5\0\51\27\3\0\136\27\21\0\33\27\65\0\20\27\u0200\0"+
    "\u19b6\27\112\0\u51cd\27\63\0\u048d\27\103\0\56\27\2\0\u010d\27\3\0"+
    "\20\27\12\0\2\27\24\0\57\27\20\0\31\27\10\0\106\27\61\0"+
    "\11\27\2\0\147\27\2\0\4\27\1\0\4\27\14\0\13\27\115\0"+
    "\12\27\1\0\3\27\1\0\4\27\1\0\27\27\35\0\64\27\16\0"+
    "\62\27\76\0\6\27\3\0\1\27\16\0\34\27\12\0\27\27\31\0"+
    "\35\27\7\0\57\27\34\0\1\27\60\0\51\27\27\0\3\27\1\0"+
    "\10\27\24\0\27\27\3\0\1\27\5\0\60\27\1\0\1\27\3\0"+
    "\2\27\2\0\5\27\2\0\1\27\1\0\1\27\30\0\3\27\2\0"+
    "\13\27\7\0\3\27\14\0\6\27\2\0\6\27\2\0\6\27\11\0"+
    "\7\27\1\0\7\27\221\0\43\27\35\0\u2ba4\27\14\0\27\27\4\0"+
    "\61\27\u2104\0\u016e\27\2\0\152\27\46\0\7\27\14\0\5\27\5\0"+
    "\1\27\1\0\12\27\1\0\15\27\1\0\5\27\1\0\1\27\1\0"+
    "\2\27\1\0\2\27\1\0\154\27\41\0\u016b\27\22\0\100\27\2\0"+
    "\66\27\50\0\14\27\164\0\5\27\1\0\207\27\44\0\32\27\6\0"+
    "\32\27\13\0\131\27\3\0\6\27\2\0\6\27\2\0\6\27\2\0"+
    "\3\27\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\2\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\3\1\15\1\16"+
    "\2\13\1\17\1\20\1\21\10\3\1\22\1\23\1\24"+
    "\1\25\4\3\1\26\1\27\1\13\1\30\1\31\1\32"+
    "\1\3\1\33\1\34\1\35\1\36\1\3\2\37\1\40"+
    "\3\3\1\37\1\3\1\41\1\42\4\2\1\43\2\42"+
    "\1\44\5\42\1\45\2\2\1\46\1\47\1\2\1\50"+
    "\1\51\1\42\2\51\1\52\6\53\1\54\1\53\1\55"+
    "\1\0\1\3\1\0\1\56\1\57\2\60\1\61\1\0"+
    "\1\62\1\0\1\50\1\0\1\63\1\0\1\64\1\65"+
    "\1\66\7\3\1\67\1\70\1\3\1\71\1\72\1\73"+
    "\1\74\1\75\5\3\1\76\1\77\1\3\1\100\1\101"+
    "\1\102\4\3\13\0\1\42\1\0\6\53\1\103\3\0"+
    "\1\3\1\104\5\3\1\105\2\3\1\106\11\3\7\0"+
    "\1\107\1\0\6\53\1\0\3\3\1\110\5\3\1\111"+
    "\7\3\6\0\3\53\1\112\2\53\1\0\1\3\1\113"+
    "\1\3\1\114\1\115\3\3\1\116\1\3\1\117\4\3"+
    "\2\0\2\120\3\0\3\53\1\121\1\53\1\0\1\3"+
    "\1\122\1\3\1\0\1\123\1\124\4\3\2\0\2\125"+
    "\1\0\4\53\1\126\1\0\1\127\1\130\3\3\2\131"+
    "\2\132\1\0\2\133\1\0\1\134\3\53\1\0\1\3"+
    "\2\135\2\136\1\0\1\41\1\137\2\53\1\140\1\3"+
    "\2\141\1\53\1\121\1\3\1\53\1\142\1\143";

  private static int [] zzUnpackAction() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460\0\u04b0"+
    "\0\u03c0\0\u0500\0\u03c0\0\u03c0\0\u0550\0\u05a0\0\u03c0\0\u03c0"+
    "\0\u03c0\0\u05f0\0\u03c0\0\u03c0\0\u0640\0\u0690\0\u03c0\0\u06e0"+
    "\0\u0730\0\u0780\0\u07d0\0\u0820\0\u0870\0\u08c0\0\u0910\0\u0960"+
    "\0\u09b0\0\u0a00\0\u03c0\0\u03c0\0\u0a50\0\u0aa0\0\u0af0\0\u0b40"+
    "\0\u0b90\0\u03c0\0\u03c0\0\u0be0\0\u03c0\0\u03c0\0\u03c0\0\u0c30"+
    "\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u0c80\0\u0cd0\0\u03c0\0\u0d20"+
    "\0\u0d70\0\u0dc0\0\u0e10\0\u0e60\0\u0eb0\0\u0f00\0\u03c0\0\u0f50"+
    "\0\u0fa0\0\u0ff0\0\u1040\0\u03c0\0\u1090\0\u10e0\0\u03c0\0\u1130"+
    "\0\u1180\0\u11d0\0\u1220\0\u1270\0\u03c0\0\u11d0\0\u1220\0\u03c0"+
    "\0\u03c0\0\u1270\0\u03c0\0\u03c0\0\u12c0\0\u1090\0\u1310\0\u03c0"+
    "\0\u1360\0\u13b0\0\u1400\0\u1450\0\u14a0\0\u14f0\0\u03c0\0\u1540"+
    "\0\u03c0\0\u0410\0\u1590\0\u15e0\0\u03c0\0\u03c0\0\u03c0\0\u1630"+
    "\0\u0410\0\u0640\0\u03c0\0\u0690\0\u1680\0\u16d0\0\u03c0\0\u1720"+
    "\0\u03c0\0\u03c0\0\u03c0\0\u1770\0\u17c0\0\u1810\0\u1860\0\u18b0"+
    "\0\u1900\0\u1950\0\u0410\0\u0410\0\u19a0\0\u0410\0\u0410\0\u03c0"+
    "\0\u03c0\0\u03c0\0\u19f0\0\u1a40\0\u1a90\0\u1ae0\0\u1b30\0\u0410"+
    "\0\u03c0\0\u1b80\0\u0410\0\u0410\0\u03c0\0\u1bd0\0\u1c20\0\u1c70"+
    "\0\u1cc0\0\u1d10\0\u1d60\0\u1db0\0\u1e00\0\u1e50\0\u0f50\0\u0fa0"+
    "\0\u1ea0\0\u1ef0\0\u1f40\0\u1f90\0\u1fe0\0\u1360\0\u2030\0\u2080"+
    "\0\u20d0\0\u2120\0\u2170\0\u21c0\0\u0410\0\u2210\0\u2260\0\u22b0"+
    "\0\u2300\0\u0410\0\u2350\0\u23a0\0\u23f0\0\u2440\0\u2490\0\u0410"+
    "\0\u24e0\0\u2530\0\u0410\0\u2580\0\u25d0\0\u2620\0\u2670\0\u26c0"+
    "\0\u2710\0\u2760\0\u27b0\0\u2800\0\u2850\0\u28a0\0\u28f0\0\u2940"+
    "\0\u2990\0\u29e0\0\u2a30\0\u03c0\0\u2a80\0\u2ad0\0\u2b20\0\u2b70"+
    "\0\u2bc0\0\u2c10\0\u2c60\0\u2cb0\0\u2d00\0\u2d50\0\u2da0\0\u0410"+
    "\0\u2df0\0\u2e40\0\u2e90\0\u2ee0\0\u2f30\0\u0410\0\u2f80\0\u2fd0"+
    "\0\u3020\0\u3070\0\u30c0\0\u3110\0\u3160\0\u31b0\0\u3200\0\u3250"+
    "\0\u32a0\0\u32f0\0\u3340\0\u3390\0\u33e0\0\u3430\0\u1360\0\u3480"+
    "\0\u34d0\0\u3520\0\u3570\0\u0410\0\u35c0\0\u0410\0\u0410\0\u3610"+
    "\0\u3660\0\u36b0\0\u0410\0\u3700\0\u0410\0\u3750\0\u37a0\0\u37f0"+
    "\0\u3840\0\u3890\0\u38e0\0\u3930\0\u03c0\0\u3980\0\u39d0\0\u3a20"+
    "\0\u3a70\0\u3ac0\0\u3b10\0\u3b60\0\u3bb0\0\u3c00\0\u3c50\0\u0410"+
    "\0\u3ca0\0\u3cf0\0\u0410\0\u0410\0\u3d40\0\u3d90\0\u3de0\0\u3e30"+
    "\0\u3e80\0\u3ed0\0\u3f20\0\u03c0\0\u3f70\0\u3fc0\0\u4010\0\u4060"+
    "\0\u40b0\0\u1360\0\u4100\0\u0410\0\u0410\0\u4150\0\u41a0\0\u41f0"+
    "\0\u4240\0\u03c0\0\u4290\0\u03c0\0\u42e0\0\u4330\0\u03c0\0\u4380"+
    "\0\u1360\0\u43d0\0\u4420\0\u4470\0\u44c0\0\u4510\0\u4560\0\u03c0"+
    "\0\u45b0\0\u03c0\0\u4600\0\u03c0\0\u1360\0\u4650\0\u46a0\0\u03c0"+
    "\0\u46f0\0\u4740\0\u03c0\0\u4790\0\u1360\0\u47e0\0\u4830\0\u0410"+
    "\0\u1360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\16\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\16\1\31\1\32"+
    "\1\33\1\34\3\16\1\35\1\36\1\15\1\37\1\30"+
    "\1\40\1\41\1\42\1\43\2\16\1\44\1\45\1\16"+
    "\1\46\11\16\1\47\1\16\1\50\3\16\1\51\1\52"+
    "\1\53\1\54\1\55\1\22\1\56\1\57\1\60\1\61"+
    "\1\30\1\62\1\63\1\64\1\65\1\16\1\15\2\16"+
    "\1\66\1\67\1\30\1\70\1\71\1\72\1\73\1\74"+
    "\1\16\1\75\1\15\1\16\1\17\1\76\1\77\1\22"+
    "\1\16\1\23\1\24\1\25\1\26\1\27\1\100\1\16"+
    "\1\31\1\32\1\33\1\34\3\16\1\35\1\36\1\15"+
    "\1\37\1\30\1\40\1\41\1\42\1\101\2\16\1\44"+
    "\1\45\1\16\1\46\3\16\1\102\5\16\1\103\1\16"+
    "\1\50\3\16\1\51\1\52\1\53\1\54\1\55\1\104"+
    "\1\56\1\57\1\105\1\61\1\30\1\62\1\63\1\64"+
    "\1\106\1\16\1\15\2\16\1\66\1\67\1\30\1\70"+
    "\1\71\1\72\1\73\1\74\1\16\1\75\4\15\1\0"+
    "\1\107\17\15\1\110\1\111\17\15\2\112\2\113\12\15"+
    "\1\114\3\15\1\107\27\15\7\107\1\115\22\107\1\116"+
    "\43\107\1\117\24\107\1\120\1\107\1\121\2\107\1\122"+
    "\1\107\1\123\17\107\1\124\31\107\1\114\3\107\1\121"+
    "\7\107\1\125\17\107\3\15\1\120\1\107\1\121\2\15"+
    "\1\126\1\15\1\127\12\15\1\130\1\131\3\15\1\132"+
    "\31\15\1\114\3\15\1\121\27\15\3\107\1\120\1\107"+
    "\1\121\4\107\1\123\12\107\1\133\4\107\1\124\35\107"+
    "\1\121\32\107\1\120\1\107\1\121\4\107\1\123\13\107"+
    "\1\133\3\107\1\124\35\107\1\121\27\107\2\134\1\135"+
    "\4\134\1\136\5\134\1\135\1\134\1\135\2\134\3\135"+
    "\2\134\1\135\1\134\1\135\2\134\30\135\5\134\4\135"+
    "\2\134\1\137\2\134\1\135\1\134\2\135\3\134\1\135"+
    "\4\134\2\135\2\134\1\135\4\134\1\136\5\134\1\135"+
    "\1\134\1\135\2\134\3\135\2\134\1\135\1\134\1\135"+
    "\2\134\30\135\5\134\4\135\5\134\1\135\1\134\2\135"+
    "\3\134\1\135\4\134\2\135\1\140\2\141\1\20\1\21"+
    "\1\140\1\141\6\140\1\141\1\140\1\141\2\140\3\141"+
    "\7\140\1\141\1\142\1\141\1\143\1\141\1\144\1\141"+
    "\1\145\3\141\1\146\14\141\4\140\1\147\1\141\1\150"+
    "\2\141\1\151\4\140\1\141\1\140\2\141\3\140\1\141"+
    "\4\140\2\141\4\14\1\0\113\14\121\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\16\2\0\3\16"+
    "\7\0\30\16\5\0\4\16\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\3\16\1\153\24\16\5\0\4\16\5\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\4\0\1\21\120\0"+
    "\1\22\62\0\1\22\30\0\2\154\3\0\1\154\2\0"+
    "\1\155\1\154\1\156\2\154\1\0\1\154\2\0\3\154"+
    "\7\0\30\154\5\0\4\154\5\0\1\154\1\0\2\154"+
    "\3\0\1\154\4\0\2\154\12\0\2\157\1\160\4\0"+
    "\1\157\3\0\1\157\2\0\1\157\34\0\2\157\7\0"+
    "\2\157\1\0\1\157\4\0\2\157\11\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\16\2\0\3\16"+
    "\7\0\30\16\5\0\4\16\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\1\161\1\16\3\162\2\0\20\162"+
    "\1\163\72\162\3\164\2\0\21\164\1\163\71\164\2\0"+
    "\1\165\3\0\1\165\1\0\1\166\4\0\1\165\1\0"+
    "\1\165\2\0\3\165\2\0\3\165\1\167\1\170\30\165"+
    "\5\0\4\165\3\0\1\171\1\0\1\165\1\0\2\165"+
    "\3\0\1\165\4\0\2\165\67\0\1\172\10\0\1\173"+
    "\20\0\2\16\3\0\1\16\2\152\4\0\1\16\1\0"+
    "\1\16\2\0\2\16\1\174\7\0\30\16\5\0\4\16"+
    "\5\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\1\0\2\16\3\0\1\16\2\152\4\0\1\16\1\0"+
    "\1\175\2\0\3\16\7\0\30\16\5\0\4\16\5\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\16\3\0\1\16\2\152\4\0\1\16\1\0\1\16"+
    "\2\0\3\16\7\0\20\16\1\176\7\16\5\0\4\16"+
    "\5\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\1\0\2\16\3\0\1\16\2\152\4\0\1\16\1\0"+
    "\1\16\2\0\3\16\7\0\30\16\5\0\1\177\3\16"+
    "\5\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\1\0\2\16\3\0\1\16\2\152\4\0\1\16\1\0"+
    "\1\16\2\0\3\16\7\0\15\16\1\200\12\16\5\0"+
    "\1\201\1\202\2\16\5\0\1\16\1\0\2\16\3\0"+
    "\1\16\4\0\2\16\1\0\2\16\3\0\1\16\2\152"+
    "\4\0\1\16\1\0\1\203\2\0\3\16\7\0\7\16"+
    "\1\204\20\16\5\0\4\16\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\30\16\5\0\3\16\1\205\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\1\16\1\206\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\16\2\0\3\16"+
    "\7\0\30\16\5\0\2\16\1\207\1\16\5\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\64\0\1\210"+
    "\13\0\1\211\106\0\1\212\31\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\13\16\1\213\14\16\5\0\4\16\5\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\214\2\0\3\16"+
    "\7\0\30\16\5\0\4\16\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\215\2\0\3\16\7\0"+
    "\21\16\1\216\6\16\5\0\4\16\5\0\1\16\1\0"+
    "\2\16\3\0\1\217\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\220\2\0\3\16"+
    "\7\0\30\16\5\0\4\16\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\100\0\1\221\20\0\2\16"+
    "\3\0\1\16\2\152\4\0\1\16\1\0\1\16\2\0"+
    "\3\16\7\0\15\16\1\222\12\16\5\0\4\16\5\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\16\3\0\1\16\2\152\4\0\1\16\1\0\1\223"+
    "\2\0\3\16\7\0\7\16\1\224\20\16\5\0\4\16"+
    "\5\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\4\0\1\77\143\0\1\225\70\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\175\2\0\3\16\7\0"+
    "\11\16\1\226\16\16\5\0\4\16\5\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\16\2\0\3\16"+
    "\7\0\30\16\5\0\1\227\3\16\5\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\203\2\0\3\16"+
    "\7\0\3\16\1\230\3\16\1\204\20\16\5\0\4\16"+
    "\5\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\5\0\1\22\62\0\1\104\30\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\215\2\0\3\16\7\0"+
    "\7\16\1\231\11\16\1\216\6\16\5\0\4\16\5\0"+
    "\1\16\1\0\2\16\3\0\1\217\4\0\2\16\36\0"+
    "\1\232\1\0\1\233\15\0\1\234\1\0\1\235\12\0"+
    "\1\236\24\0\25\237\1\107\72\237\26\240\1\107\71\240"+
    "\56\0\2\241\102\0\2\242\63\0\1\243\143\0\1\244"+
    "\70\0\1\107\120\0\1\121\62\0\1\121\113\0\1\114"+
    "\45\0\2\107\1\245\4\0\1\107\3\0\1\107\2\0"+
    "\1\107\34\0\2\107\7\0\2\107\1\0\1\107\4\0"+
    "\2\107\12\0\1\165\3\0\1\165\1\0\1\166\4\0"+
    "\1\165\1\0\1\165\2\0\3\165\2\0\3\165\2\0"+
    "\30\165\5\0\4\165\5\0\1\165\1\0\2\165\3\0"+
    "\1\165\4\0\2\165\1\0\5\135\3\0\1\135\3\0"+
    "\3\135\2\0\3\135\2\0\1\135\1\0\1\135\1\0"+
    "\31\135\1\0\10\135\5\0\1\135\1\0\2\135\3\0"+
    "\1\135\4\0\2\135\64\0\1\134\34\0\2\141\3\0"+
    "\1\141\2\246\4\0\1\141\1\0\1\141\2\0\3\141"+
    "\7\0\30\141\5\0\4\141\5\0\1\141\1\0\2\141"+
    "\3\0\1\141\4\0\2\141\1\0\2\141\3\0\1\141"+
    "\2\246\4\0\1\141\1\0\1\141\2\0\3\141\7\0"+
    "\11\141\1\247\16\141\5\0\4\141\5\0\1\141\1\0"+
    "\2\141\3\0\1\141\4\0\2\141\1\0\2\141\3\0"+
    "\1\141\2\246\4\0\1\141\1\0\1\141\2\0\3\141"+
    "\7\0\13\141\1\250\14\141\5\0\4\141\5\0\1\141"+
    "\1\0\2\141\3\0\1\141\4\0\2\141\1\0\2\141"+
    "\3\0\1\141\2\246\4\0\1\141\1\0\1\141\2\0"+
    "\3\141\7\0\3\141\1\251\24\141\5\0\4\141\5\0"+
    "\1\141\1\0\2\141\3\0\1\141\4\0\2\141\1\0"+
    "\2\141\3\0\1\141\2\246\4\0\1\141\1\0\1\141"+
    "\2\0\3\141\7\0\11\141\1\252\16\141\5\0\4\141"+
    "\5\0\1\141\1\0\2\141\3\0\1\141\4\0\2\141"+
    "\1\0\2\141\3\0\1\141\2\246\4\0\1\141\1\0"+
    "\1\141\2\0\3\141\7\0\30\141\5\0\1\253\3\141"+
    "\5\0\1\141\1\0\2\141\3\0\1\141\4\0\2\141"+
    "\1\0\2\141\3\0\1\141\2\246\4\0\1\141\1\0"+
    "\1\254\2\0\3\141\7\0\30\141\5\0\4\141\5\0"+
    "\1\141\1\0\2\141\3\0\1\141\4\0\2\141\1\0"+
    "\2\16\3\0\1\16\2\152\4\0\1\16\1\0\1\16"+
    "\2\0\3\16\7\0\30\16\5\0\1\16\1\255\2\16"+
    "\5\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\1\0\2\154\3\0\1\154\3\0\1\154\1\156\2\154"+
    "\1\0\1\154\2\0\3\154\7\0\30\154\5\0\4\154"+
    "\5\0\1\154\1\0\2\154\3\0\1\154\4\0\2\154"+
    "\1\0\1\256\20\0\3\256\7\0\1\256\1\0\1\256"+
    "\1\0\1\256\1\0\1\256\1\0\1\256\1\0\1\256"+
    "\1\0\1\256\1\0\1\256\1\0\1\256\1\0\1\256"+
    "\1\0\1\256\1\0\1\256\17\0\1\256\1\0\2\256"+
    "\13\0\2\165\3\0\2\165\5\0\3\165\2\0\3\165"+
    "\2\0\3\165\2\0\30\165\5\0\4\165\5\0\1\165"+
    "\1\0\2\165\3\0\1\165\4\0\2\165\2\0\1\165"+
    "\3\0\1\165\6\0\1\165\1\0\1\165\2\0\3\165"+
    "\2\0\3\165\2\0\30\165\5\0\4\165\5\0\1\165"+
    "\1\0\2\165\3\0\1\165\4\0\2\165\7\0\1\257"+
    "\24\0\2\260\63\0\2\16\3\0\1\16\2\152\4\0"+
    "\1\16\1\0\1\16\2\0\1\261\2\16\7\0\30\16"+
    "\5\0\4\16\5\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\1\0\1\16\1\262\3\0\1\16\2\152"+
    "\4\0\1\16\1\0\1\16\2\0\3\16\7\0\30\16"+
    "\5\0\4\16\5\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\1\0\2\16\3\0\1\16\2\152\4\0"+
    "\1\16\1\0\1\16\2\0\3\16\7\0\30\16\5\0"+
    "\4\16\5\0\1\16\1\0\1\263\1\16\3\0\1\16"+
    "\4\0\2\16\1\0\2\16\3\0\1\16\2\152\4\0"+
    "\1\16\1\0\1\16\2\0\3\16\7\0\21\16\1\264"+
    "\6\16\5\0\2\16\1\265\1\16\5\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\16\2\0\3\16"+
    "\7\0\30\16\5\0\1\16\1\266\2\16\5\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\1\0\2\16"+
    "\3\0\1\16\2\152\4\0\1\16\1\0\1\16\2\0"+
    "\3\16\7\0\27\16\1\267\5\0\4\16\5\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\1\0\2\16"+
    "\3\0\1\16\2\152\4\0\1\16\1\0\1\16\2\0"+
    "\3\16\7\0\11\16\1\270\16\16\5\0\4\16\5\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\16\3\0\1\16\2\152\4\0\1\16\1\0\1\16"+
    "\2\0\3\16\7\0\7\16\1\271\20\16\5\0\4\16"+
    "\5\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\1\0\2\16\3\0\1\16\2\152\4\0\1\16\1\0"+
    "\1\16\2\0\3\16\7\0\13\16\1\272\14\16\5\0"+
    "\4\16\5\0\1\16\1\0\2\16\3\0\1\16\4\0"+
    "\2\16\1\0\2\16\3\0\1\16\2\152\4\0\1\16"+
    "\1\0\1\16\2\0\3\16\7\0\17\16\1\273\10\16"+
    "\5\0\2\16\1\274\1\16\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\21\16\1\275\6\16\5\0\4\16\5\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\276\2\0\3\16"+
    "\7\0\30\16\5\0\4\16\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\27\16\1\277\5\0\4\16\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\27\16\1\300\5\0\4\16\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\30\16\5\0\3\16\1\301\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\30\16\5\0\1\16\1\302\2\16\5\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\16\2\0\3\16"+
    "\7\0\5\16\1\303\22\16\5\0\4\16\5\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\1\0\2\16"+
    "\3\0\1\16\2\152\4\0\1\16\1\0\1\16\2\0"+
    "\3\16\7\0\30\16\5\0\1\304\3\16\5\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\46\0\1\305"+
    "\125\0\1\306\145\0\1\307\121\0\1\310\56\0\1\311"+
    "\134\0\2\312\110\0\2\313\47\0\3\243\56\0\1\114"+
    "\3\0\1\243\125\0\1\314\22\0\1\315\20\0\3\315"+
    "\7\0\1\315\1\0\1\315\1\0\1\315\1\0\1\315"+
    "\1\0\1\315\1\0\1\315\1\0\1\315\1\0\1\315"+
    "\1\0\1\315\1\0\1\315\1\0\1\315\1\0\1\315"+
    "\17\0\1\315\1\0\2\315\13\0\2\141\3\0\1\141"+
    "\2\246\4\0\1\141\1\0\1\141\2\0\3\141\7\0"+
    "\30\141\5\0\3\141\1\316\5\0\1\141\1\0\2\141"+
    "\3\0\1\141\4\0\2\141\1\0\2\141\3\0\1\141"+
    "\2\246\4\0\1\141\1\0\1\141\2\0\3\141\7\0"+
    "\7\141\1\317\20\141\5\0\4\141\5\0\1\141\1\0"+
    "\2\141\3\0\1\141\4\0\2\141\1\0\2\141\3\0"+
    "\1\141\2\246\4\0\1\141\1\0\1\141\2\0\3\141"+
    "\7\0\30\141\5\0\3\141\1\320\5\0\1\141\1\0"+
    "\2\141\3\0\1\141\4\0\2\141\1\0\2\141\3\0"+
    "\1\141\2\246\4\0\1\141\1\0\1\141\2\0\3\141"+
    "\7\0\13\141\1\321\14\141\5\0\4\141\5\0\1\141"+
    "\1\0\2\141\3\0\1\141\4\0\2\141\1\0\2\141"+
    "\3\0\1\141\2\246\4\0\1\141\1\0\1\141\2\0"+
    "\3\141\7\0\30\141\5\0\1\141\1\322\2\141\5\0"+
    "\1\141\1\0\2\141\3\0\1\141\4\0\2\141\1\0"+
    "\2\141\3\0\1\141\2\246\4\0\1\141\1\0\1\141"+
    "\2\0\3\141\7\0\30\141\5\0\2\141\1\323\1\141"+
    "\5\0\1\141\1\0\2\141\3\0\1\141\4\0\2\141"+
    "\1\0\1\157\20\0\3\157\7\0\1\157\1\0\1\157"+
    "\1\0\1\157\1\0\1\157\1\0\1\157\1\0\1\157"+
    "\1\0\1\157\1\0\1\157\1\0\1\157\1\0\1\157"+
    "\1\0\1\157\1\0\1\157\17\0\1\157\1\0\2\157"+
    "\21\0\1\134\146\0\2\324\61\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\30\16\5\0\4\16\5\0\1\16\1\0\1\325\1\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\30\16\5\0\4\16\5\0\1\326\1\0\2\16\3\0"+
    "\1\16\4\0\2\16\1\0\2\16\3\0\1\16\2\152"+
    "\4\0\1\16\1\0\1\16\2\0\3\16\7\0\21\16"+
    "\1\327\6\16\5\0\4\16\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\330\2\0\3\16\7\0"+
    "\30\16\5\0\4\16\5\0\1\16\1\0\2\16\3\0"+
    "\1\16\4\0\2\16\1\0\2\16\3\0\1\16\2\152"+
    "\4\0\1\16\1\0\1\16\2\0\3\16\7\0\3\16"+
    "\1\331\24\16\5\0\4\16\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\30\16\5\0\3\16\1\332\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\30\16\5\0\1\333\3\16\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\21\16\1\334\6\16\5\0\4\16\5\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\16\2\0\3\16"+
    "\7\0\23\16\1\335\4\16\5\0\4\16\5\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\1\0\1\16"+
    "\1\336\3\0\1\16\2\152\4\0\1\16\1\0\1\16"+
    "\2\0\3\16\7\0\30\16\5\0\4\16\5\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\1\0\2\16"+
    "\3\0\1\16\2\152\4\0\1\16\1\0\1\337\2\0"+
    "\3\16\7\0\30\16\5\0\4\16\5\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\16\2\0\3\16"+
    "\7\0\7\16\1\340\20\16\5\0\4\16\5\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\1\0\2\16"+
    "\3\0\1\16\2\152\4\0\1\16\1\0\1\16\2\0"+
    "\3\16\7\0\21\16\1\341\6\16\5\0\4\16\5\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\16\3\0\1\16\2\152\4\0\1\16\1\0\1\16"+
    "\2\0\3\16\7\0\30\16\5\0\1\342\3\16\5\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\16\3\0\1\16\2\152\4\0\1\16\1\0\1\16"+
    "\2\0\3\16\7\0\7\16\1\343\20\16\5\0\4\16"+
    "\5\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\1\0\2\16\3\0\1\16\2\152\4\0\1\16\1\0"+
    "\1\16\2\0\3\16\7\0\30\16\5\0\1\344\3\16"+
    "\5\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\1\0\2\16\3\0\1\16\2\152\4\0\1\16\1\0"+
    "\1\16\2\0\3\16\7\0\7\16\1\345\20\16\5\0"+
    "\4\16\5\0\1\16\1\0\2\16\3\0\1\16\4\0"+
    "\2\16\42\0\1\346\161\0\1\347\37\0\1\350\175\0"+
    "\1\351\106\0\1\352\102\0\2\353\116\0\2\107\43\0"+
    "\1\107\20\0\3\107\7\0\1\107\1\0\1\107\1\0"+
    "\1\107\1\0\1\107\1\0\1\107\1\0\1\107\1\0"+
    "\1\107\1\0\1\107\1\0\1\107\1\0\1\107\1\0"+
    "\1\107\1\0\1\107\17\0\1\107\1\0\2\107\13\0"+
    "\2\141\3\0\1\141\2\246\4\0\1\141\1\0\1\141"+
    "\2\0\3\141\7\0\30\141\5\0\1\354\3\141\5\0"+
    "\1\141\1\0\2\141\3\0\1\141\4\0\2\141\1\0"+
    "\2\141\3\0\1\141\2\246\4\0\1\141\1\0\1\141"+
    "\2\0\3\141\7\0\27\141\1\355\5\0\4\141\5\0"+
    "\1\141\1\0\2\141\3\0\1\141\4\0\2\141\1\0"+
    "\2\141\3\0\1\141\2\246\4\0\1\141\1\0\1\141"+
    "\2\0\3\141\7\0\30\141\5\0\2\141\1\356\1\141"+
    "\5\0\1\141\1\0\2\141\3\0\1\141\4\0\2\141"+
    "\1\0\2\141\3\0\1\141\2\246\4\0\1\141\1\0"+
    "\1\357\2\0\3\141\7\0\30\141\5\0\4\141\5\0"+
    "\1\141\1\0\2\141\3\0\1\141\4\0\2\141\1\0"+
    "\2\141\3\0\1\141\2\246\4\0\1\141\1\0\1\141"+
    "\2\0\3\141\7\0\30\141\5\0\1\360\3\141\5\0"+
    "\1\141\1\0\2\141\3\0\1\141\4\0\2\141\1\0"+
    "\2\141\3\0\1\141\2\246\4\0\1\141\1\0\1\141"+
    "\2\0\3\141\7\0\23\141\1\361\4\141\5\0\4\141"+
    "\5\0\1\141\1\0\2\141\3\0\1\141\4\0\2\141"+
    "\40\0\2\362\57\0\2\16\3\0\1\16\2\152\4\0"+
    "\1\16\1\0\1\16\2\0\3\16\7\0\22\16\1\363"+
    "\5\16\5\0\4\16\5\0\1\16\1\0\2\16\3\0"+
    "\1\16\4\0\2\16\1\0\2\16\3\0\1\16\2\152"+
    "\4\0\1\16\1\0\1\16\2\0\3\16\7\0\30\16"+
    "\5\0\4\16\5\0\1\364\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\1\0\2\16\3\0\1\16\2\152\4\0"+
    "\1\16\1\0\1\365\2\0\3\16\7\0\30\16\5\0"+
    "\4\16\5\0\1\16\1\0\2\16\3\0\1\16\4\0"+
    "\2\16\1\0\2\16\3\0\1\16\2\152\4\0\1\16"+
    "\1\0\1\16\2\0\3\16\7\0\30\16\5\0\4\16"+
    "\5\0\1\16\1\0\2\16\3\0\1\366\4\0\2\16"+
    "\1\0\2\16\3\0\1\16\2\152\4\0\1\16\1\0"+
    "\1\16\2\0\3\16\7\0\7\16\1\367\20\16\5\0"+
    "\4\16\5\0\1\16\1\0\2\16\3\0\1\16\4\0"+
    "\2\16\1\0\2\16\3\0\1\16\2\152\4\0\1\16"+
    "\1\0\1\16\2\0\3\16\7\0\27\16\1\370\5\0"+
    "\4\16\5\0\1\16\1\0\2\16\3\0\1\16\4\0"+
    "\2\16\1\0\2\16\3\0\1\16\2\152\4\0\1\16"+
    "\1\0\1\16\2\0\3\16\7\0\11\16\1\371\16\16"+
    "\5\0\4\16\5\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\1\0\2\16\3\0\1\16\2\152\4\0"+
    "\1\16\1\0\1\16\2\0\3\16\7\0\21\16\1\372"+
    "\6\16\5\0\4\16\5\0\1\16\1\0\2\16\3\0"+
    "\1\16\4\0\2\16\1\0\2\16\3\0\1\16\2\152"+
    "\4\0\1\16\1\0\1\16\2\0\3\16\7\0\13\16"+
    "\1\373\14\16\5\0\4\16\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\5\16\1\374\22\16\5\0\4\16\5\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\375\2\0\3\16"+
    "\7\0\30\16\5\0\4\16\5\0\1\16\1\0\2\16"+
    "\3\0\1\16\4\0\2\16\1\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\17\16\1\376\10\16\5\0\4\16\5\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\16\2\0\3\16"+
    "\7\0\27\16\1\377\5\0\4\16\5\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\16\2\0\3\16"+
    "\7\0\21\16\1\u0100\6\16\5\0\4\16\5\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\1\0\2\16"+
    "\3\0\1\16\2\152\4\0\1\16\1\0\1\16\2\0"+
    "\3\16\7\0\27\16\1\u0101\5\0\4\16\5\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\62\0\1\u0102"+
    "\137\0\1\u0103\20\0\1\u0104\2\u0105\75\0\1\u0105\40\0"+
    "\1\u0106\136\0\1\u0107\136\0\2\u0108\35\0\2\141\3\0"+
    "\1\141\2\246\4\0\1\141\1\0\1\141\2\0\3\141"+
    "\7\0\17\141\1\u0109\10\141\5\0\4\141\5\0\1\141"+
    "\1\0\2\141\3\0\1\141\4\0\2\141\1\0\2\141"+
    "\3\0\1\141\2\246\4\0\1\141\1\0\1\141\2\0"+
    "\3\141\7\0\3\141\1\u010a\24\141\5\0\4\141\5\0"+
    "\1\141\1\0\2\141\3\0\1\141\4\0\2\141\1\0"+
    "\2\141\3\0\1\141\2\246\4\0\1\141\1\0\1\141"+
    "\2\0\3\141\7\0\7\141\1\u010b\20\141\5\0\4\141"+
    "\5\0\1\141\1\0\2\141\3\0\1\141\4\0\2\141"+
    "\1\0\2\141\3\0\1\141\2\246\4\0\1\141\1\0"+
    "\1\141\2\0\3\141\7\0\17\141\1\u010c\10\141\5\0"+
    "\4\141\5\0\1\141\1\0\2\141\3\0\1\141\4\0"+
    "\2\141\1\0\2\141\3\0\1\141\2\246\4\0\1\141"+
    "\1\0\1\141\2\0\3\141\7\0\21\141\1\u010d\6\141"+
    "\5\0\4\141\5\0\1\141\1\0\2\141\3\0\1\141"+
    "\4\0\2\141\42\0\2\u010e\55\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\20\16\1\u010f\7\16\5\0\4\16\5\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\16\2\0\3\16"+
    "\7\0\30\16\5\0\1\16\1\u0110\2\16\5\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\1\0\2\16"+
    "\3\0\1\16\2\152\4\0\1\16\1\0\1\16\2\0"+
    "\3\16\7\0\30\16\5\0\3\16\1\u0111\5\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\1\0\2\16"+
    "\3\0\1\16\1\u0112\1\152\4\0\1\16\1\0\1\16"+
    "\2\0\3\16\7\0\30\16\5\0\4\16\5\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\1\0\2\16"+
    "\3\0\1\16\2\152\4\0\1\16\1\0\1\16\2\0"+
    "\3\16\7\0\7\16\1\u0113\20\16\5\0\4\16\5\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\16\3\0\1\16\2\152\4\0\1\16\1\0\1\16"+
    "\2\0\3\16\7\0\15\16\1\u0114\12\16\5\0\4\16"+
    "\5\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\1\0\2\16\3\0\1\16\2\152\4\0\1\16\1\0"+
    "\1\16\2\0\3\16\7\0\27\16\1\u0115\5\0\4\16"+
    "\5\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\1\0\2\16\3\0\1\16\2\152\4\0\1\16\1\0"+
    "\1\16\2\0\3\16\7\0\30\16\5\0\1\u0116\3\16"+
    "\5\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\1\0\2\16\3\0\1\16\2\152\4\0\1\16\1\0"+
    "\1\16\2\0\3\16\7\0\30\16\5\0\2\16\1\u0117"+
    "\1\16\5\0\1\16\1\0\2\16\3\0\1\16\4\0"+
    "\2\16\1\0\2\16\3\0\1\16\2\152\4\0\1\16"+
    "\1\0\1\16\2\0\3\16\7\0\5\16\1\u0118\22\16"+
    "\5\0\4\16\5\0\1\16\1\0\2\16\3\0\1\16"+
    "\4\0\2\16\36\0\1\u0119\163\0\1\u011a\21\0\1\u0105"+
    "\116\0\1\u011b\2\u011c\75\0\1\u011c\77\0\1\u011d\74\0"+
    "\2\107\57\0\2\141\3\0\1\141\2\246\4\0\1\141"+
    "\1\0\1\141\2\0\3\141\7\0\27\141\1\u011e\5\0"+
    "\4\141\5\0\1\141\1\0\2\141\3\0\1\141\4\0"+
    "\2\141\1\0\2\141\3\0\1\141\2\246\4\0\1\141"+
    "\1\0\1\141\2\0\3\141\7\0\30\141\5\0\3\141"+
    "\1\u011f\5\0\1\141\1\0\2\141\3\0\1\141\4\0"+
    "\2\141\1\0\2\141\3\0\1\141\2\246\4\0\1\141"+
    "\1\0\1\141\2\0\3\141\7\0\30\141\5\0\1\141"+
    "\1\u0120\2\141\5\0\1\141\1\0\2\141\3\0\1\141"+
    "\4\0\2\141\1\0\2\141\3\0\1\141\2\246\4\0"+
    "\1\141\1\0\1\u0121\2\0\3\141\7\0\30\141\5\0"+
    "\4\141\5\0\1\141\1\0\2\141\3\0\1\141\4\0"+
    "\2\141\1\0\2\141\3\0\1\141\2\246\4\0\1\141"+
    "\1\0\1\141\2\0\3\141\7\0\7\141\1\u0122\20\141"+
    "\5\0\4\141\5\0\1\141\1\0\2\141\3\0\1\141"+
    "\4\0\2\141\44\0\2\u0123\53\0\2\16\3\0\1\16"+
    "\2\152\4\0\1\16\1\0\1\16\2\0\3\16\7\0"+
    "\6\16\1\u0124\21\16\5\0\4\16\5\0\1\16\1\0"+
    "\2\16\3\0\1\16\4\0\2\16\1\0\2\16\3\0"+
    "\1\16\2\152\4\0\1\16\1\0\1\16\2\0\3\16"+
    "\7\0\7\16\1\u0125\20\16\5\0\4\16\5\0\1\16"+
    "\1\0\2\16\3\0\1\16\4\0\2\16\1\0\2\16"+
    "\3\0\1\16\2\152\4\0\1\16\1\0\1\16\2\0"+
    "\3\16\7\0\7\16\1\u0126\20\16\5\0\4\16\5\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\16\3\0\1\16\2\152\4\0\1\16\1\0\1\16"+
    "\2\0\3\16\7\0\5\16\1\u0127\22\16\5\0\4\16"+
    "\5\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\1\0\2\16\3\0\1\16\2\152\4\0\1\16\1\0"+
    "\1\16\2\0\3\16\7\0\21\16\1\u0128\6\16\5\0"+
    "\4\16\5\0\1\16\1\0\2\16\3\0\1\16\4\0"+
    "\2\16\1\0\2\16\1\u0129\2\u012a\1\16\2\152\4\0"+
    "\1\16\1\0\1\16\2\0\3\16\7\0\30\16\5\0"+
    "\4\16\5\0\1\16\1\u012a\2\16\3\0\1\16\4\0"+
    "\2\16\1\0\2\16\1\u012b\2\u012c\1\16\2\152\4\0"+
    "\1\16\1\0\1\16\2\0\3\16\7\0\30\16\5\0"+
    "\4\16\5\0\1\16\1\u012c\2\16\3\0\1\16\4\0"+
    "\2\16\105\0\1\u012d\15\0\1\u012e\2\u012f\75\0\1\u012f"+
    "\20\0\1\u011c\154\0\1\u0130\57\0\2\141\3\0\1\141"+
    "\2\246\4\0\1\141\1\0\1\141\2\0\3\141\7\0"+
    "\5\141\1\u0131\22\141\5\0\4\141\5\0\1\141\1\0"+
    "\2\141\3\0\1\141\4\0\2\141\1\0\2\141\3\0"+
    "\1\141\2\246\4\0\1\141\1\0\1\141\2\0\3\141"+
    "\7\0\30\141\5\0\1\u0132\3\141\5\0\1\141\1\0"+
    "\2\141\3\0\1\141\4\0\2\141\1\0\2\141\3\0"+
    "\1\141\2\246\4\0\1\141\1\0\1\141\2\0\3\141"+
    "\7\0\23\141\1\u0133\4\141\5\0\4\141\5\0\1\141"+
    "\1\0\2\141\3\0\1\141\4\0\2\141\1\0\2\141"+
    "\3\0\1\141\2\246\4\0\1\141\1\0\1\141\2\0"+
    "\3\141\7\0\7\141\1\u0134\20\141\5\0\4\141\5\0"+
    "\1\141\1\0\2\141\3\0\1\141\4\0\2\141\46\0"+
    "\2\u0135\51\0\2\16\3\0\1\16\2\152\4\0\1\16"+
    "\1\0\1\16\2\0\3\16\7\0\30\16\5\0\1\u0136"+
    "\3\16\5\0\1\16\1\0\2\16\3\0\1\16\4\0"+
    "\2\16\1\0\2\16\1\u0137\2\u0138\1\16\2\152\4\0"+
    "\1\16\1\0\1\16\2\0\3\16\7\0\30\16\5\0"+
    "\4\16\5\0\1\16\1\u0138\2\16\3\0\1\16\4\0"+
    "\2\16\1\0\2\16\1\u0139\2\u013a\1\16\2\152\4\0"+
    "\1\16\1\0\1\16\2\0\3\16\7\0\30\16\5\0"+
    "\4\16\5\0\1\16\1\u013a\2\16\3\0\1\16\4\0"+
    "\2\16\4\0\1\u012a\117\0\1\u012c\215\0\1\u013b\21\0"+
    "\1\u012f\143\0\1\u013c\70\0\2\141\3\0\1\141\2\246"+
    "\4\0\1\141\1\0\1\141\2\0\3\141\7\0\21\141"+
    "\1\u013d\6\141\5\0\4\141\5\0\1\141\1\0\2\141"+
    "\3\0\1\141\4\0\2\141\1\0\2\141\3\0\1\141"+
    "\2\246\4\0\1\141\1\0\1\141\2\0\3\141\7\0"+
    "\5\141\1\u013e\22\141\5\0\4\141\5\0\1\141\1\0"+
    "\2\141\3\0\1\141\4\0\2\141\1\0\2\141\3\0"+
    "\1\141\2\246\4\0\1\141\1\0\1\u013f\2\0\3\141"+
    "\7\0\30\141\5\0\4\141\5\0\1\141\1\0\2\141"+
    "\3\0\1\141\4\0\2\141\17\0\1\u0140\4\0\1\u0140"+
    "\74\0\2\16\3\0\1\16\2\152\4\0\1\16\1\0"+
    "\1\16\2\0\3\16\7\0\27\16\1\u0141\5\0\4\16"+
    "\5\0\1\16\1\0\2\16\3\0\1\16\4\0\2\16"+
    "\4\0\1\u0138\117\0\1\u013a\116\0\1\u0142\2\u0143\75\0"+
    "\1\u0143\15\0\2\141\3\0\1\141\2\246\4\0\1\141"+
    "\1\0\1\141\2\0\3\141\7\0\7\141\1\u0144\20\141"+
    "\5\0\4\141\5\0\1\141\1\0\2\141\3\0\1\141"+
    "\4\0\2\141\1\0\2\141\3\0\1\141\2\246\4\0"+
    "\1\141\1\0\1\141\2\0\3\141\7\0\30\141\5\0"+
    "\1\141\1\u0145\2\141\5\0\1\141\1\0\2\141\3\0"+
    "\1\141\4\0\2\141\1\0\2\16\3\0\1\16\2\152"+
    "\4\0\1\16\1\0\1\16\2\0\3\16\7\0\30\16"+
    "\5\0\3\16\1\u0146\5\0\1\16\1\0\2\16\3\0"+
    "\1\16\4\0\2\16\4\0\1\u0143\114\0\2\141\3\0"+
    "\1\141\2\246\4\0\1\141\1\0\1\141\2\0\3\141"+
    "\7\0\3\141\1\u0147\24\141\5\0\4\141\5\0\1\141"+
    "\1\0\2\141\3\0\1\141\4\0\2\141\1\0\2\16"+
    "\3\0\1\16\2\152\4\0\1\16\1\0\1\16\2\0"+
    "\3\16\7\0\7\16\1\u0148\20\16\5\0\4\16\5\0"+
    "\1\16\1\0\2\16\3\0\1\16\4\0\2\16\1\0"+
    "\2\141\3\0\1\141\2\246\4\0\1\141\1\0\1\141"+
    "\2\0\3\141\7\0\30\141\5\0\1\141\1\u0149\2\141"+
    "\5\0\1\141\1\0\2\141\3\0\1\141\4\0\2\141";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\1\1\11\3\1\1\11\1\1\2\11\2\1"+
    "\3\11\1\1\2\11\2\1\1\11\13\1\2\11\5\1"+
    "\2\11\1\1\3\11\1\1\4\11\2\1\1\11\7\1"+
    "\1\11\4\1\1\11\2\1\1\11\5\1\1\11\2\1"+
    "\2\11\1\1\2\11\3\1\1\11\6\1\1\11\1\1"+
    "\1\11\1\0\1\1\1\0\3\11\2\1\1\0\1\11"+
    "\1\0\1\1\1\0\1\11\1\0\3\11\14\1\3\11"+
    "\6\1\1\11\3\1\1\11\4\1\13\0\1\1\1\0"+
    "\7\1\3\0\24\1\7\0\1\11\1\0\6\1\1\0"+
    "\21\1\6\0\6\1\1\0\17\1\2\0\1\1\1\11"+
    "\3\0\5\1\1\0\3\1\1\0\6\1\2\0\1\1"+
    "\1\11\1\0\5\1\1\0\6\1\1\11\1\1\1\11"+
    "\1\0\1\1\1\11\1\0\4\1\1\0\2\1\1\11"+
    "\1\1\1\11\1\0\1\11\3\1\1\11\2\1\1\11"+
    "\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public _ParserLexer() {
      this((java.io.Reader) null);
    }

    public _ParserLexer(boolean highlightMode) {
      this((java.io.Reader) null);
    }


  public _ParserLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ParserLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1294) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 53: 
          { yybegin(YYINITIAL); return ParserTokenTypes.XOR;
          }
        case 100: break;
        case 74: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_TYPE_KEYWORD;
          }
        case 101: break;
        case 65: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITGT;
          }
        case 102: break;
        case 7: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DIV;
          }
        case 103: break;
        case 25: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DOLLAR;
          }
        case 104: break;
        case 81: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_PARAM_KEYWORD;
          }
        case 105: break;
        case 75: 
          { yybegin(YYINITIAL); return ParserTokenTypes.CLASS_STATIC_KEYWORD;
          }
        case 106: break;
        case 11: 
          { yybegin(YYINITIAL); return ParserTokenTypes.USELESS_CHAR;
          }
        case 107: break;
        case 54: 
          { yybegin(YYINITIAL); return ParserTokenTypes.NE;
          }
        case 108: break;
        case 27: 
          { yybegin(YYINITIAL); return ParserTokenTypes.MULT;
          }
        case 109: break;
        case 14: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RBRACE;
          }
        case 110: break;
        case 87: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DEFAULT_KEYWORD;
          }
        case 111: break;
        case 58: 
          { yybegin(YYINITIAL); return ParserTokenTypes.IS_KEYWORD;
          }
        case 112: break;
        case 77: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TAINT_KEYWORD;
          }
        case 113: break;
        case 52: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LE;
          }
        case 114: break;
        case 57: 
          { yybegin(YYINITIAL); return ParserTokenTypes.IF_KEYWORD;
          }
        case 115: break;
        case 13: 
          { yybegin(YYINITIAL); return ParserTokenTypes.PLUS;
          }
        case 116: break;
        case 12: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DOT;
          }
        case 117: break;
        case 63: 
          { yybegin(YYINITIAL); return ParserTokenTypes.EQEQ;
          }
        case 118: break;
        case 22: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LBRACKET;
          }
        case 119: break;
        case 91: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { yybegin(YYINITIAL); return ParserTokenTypes.CLASS_KEYWORD;
          }
        case 120: break;
        case 76: 
          { yybegin(YYINITIAL); return ParserTokenTypes.THROW_KEYWORD;
          }
        case 121: break;
        case 71: 
          { yybegin(C_COMMENT_END); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 122: break;
        case 26: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LBRACE;
          }
        case 123: break;
        case 62: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITNE;
          }
        case 124: break;
        case 51: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LTLT;
          }
        case 125: break;
        case 17: 
          { yybegin(YYINITIAL); return ParserTokenTypes.EXCL;
          }
        case 126: break;
        case 78: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SLEEP_KEYWORD;
          }
        case 127: break;
        case 41: 
          { yybegin(COMMENT); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 128: break;
        case 60: 
          { yybegin(YYINITIAL); return ParserTokenTypes.GE;
          }
        case 129: break;
        case 72: 
          { yybegin(YYINITIAL); return ParserTokenTypes.CASE_KEYWORD;
          }
        case 130: break;
        case 55: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITLE;
          }
        case 131: break;
        case 59: 
          { yybegin(YYINITIAL); return ParserTokenTypes.GTGT;
          }
        case 132: break;
        case 92: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_DYNAMIC_KEYWORD;
          }
        case 133: break;
        case 3: 
          { yybegin(YYINITIAL); return ParserTokenTypes.IDENTIFIER;
          }
        case 134: break;
        case 94: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { yybegin(YYINITIAL); return ParserTokenTypes.PARTIAL_KEYWORD;
          }
        case 135: break;
        case 88: 
          { yybegin(YYINITIAL); return ParserTokenTypes.UNTAINT_KEYWORD;
          }
        case 136: break;
        case 10: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SEMICOLON;
          }
        case 137: break;
        case 33: 
          { yybegin(YYINITIAL); return ParserTokenTypes.KEY_AT_SIGN;
          }
        case 138: break;
        case 40: 
          { yybegin(TAG_ATTRIBUTES); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 139: break;
        case 95: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_OPTIONAL_KEYWORD;
          }
        case 140: break;
        case 2: 
          { yybegin(YYINITIAL); return ParserTokenTypes.BAD_CHARACTER;
          }
        case 141: break;
        case 64: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITGE;
          }
        case 142: break;
        case 48: 
          { yybegin(YYINITIAL); return ParserTokenTypes.ESCAPE;
          }
        case 143: break;
        case 46: 
          { yybegin(YYINITIAL); return ParserTokenTypes.ANDAND;
          }
        case 144: break;
        case 45: 
          { yybegin(PARSERDOC); return ParserTokenTypes.COMMA;
          }
        case 145: break;
        case 67: 
          { yybegin(YYINITIAL); return ParserTokenTypes.FOR_KEYWORD;
          }
        case 146: break;
        case 42: 
          { yybegin(PARSERDOC); return ParserTokenTypes.BAD_CHARACTER;
          }
        case 147: break;
        case 1: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SHARP_COMMENT;
          }
        case 148: break;
        case 39: 
          { yybegin(ATTRIBUTE_VALUE_SQ); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 149: break;
        case 86: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_RESULT_KEYWORD;
          }
        case 150: break;
        case 49: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITEQ;
          }
        case 151: break;
        case 44: 
          { yybegin(PARSERDOC); return ParserTokenTypes.NEW_LINE_INDENT;
          }
        case 152: break;
        case 98: 
          { yybegin(YYINITIAL); return ParserTokenTypes.APPLY_TAINT_KEYWORD;
          }
        case 153: break;
        case 29: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TILDE;
          }
        case 154: break;
        case 83: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RESULT_KEYWORD;
          }
        case 155: break;
        case 4: 
          { yybegin(YYINITIAL); return ParserTokenTypes.NEW_LINE;
          }
        case 156: break;
        case 73: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SELF_KEYWORD;
          }
        case 157: break;
        case 47: 
          { return ParserTokenTypes.HTML_ENTITY;
          }
        case 158: break;
        case 36: 
          { yybegin(C_COMMENT_START); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 159: break;
        case 97: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 8;
          { yybegin(YYINITIAL); return ParserTokenTypes.OPTIONS_KEYWORD;
          }
        case 160: break;
        case 28: 
          { yybegin(YYINITIAL); return ParserTokenTypes.PERC;
          }
        case 161: break;
        case 24: 
          { yybegin(YYINITIAL); return ParserTokenTypes.AT_SIGN;
          }
        case 162: break;
        case 20: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RPAR;
          }
        case 163: break;
        case 90: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { yybegin(YYINITIAL); return ParserTokenTypes.STATIC_KEYWORD;
          }
        case 164: break;
        case 30: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DIR;
          }
        case 165: break;
        case 16: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LT;
          }
        case 166: break;
        case 84: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SWITCH_KEYWORD;
          }
        case 167: break;
        case 37: 
          { yybegin(ATTRIBUTE_VALUE_START); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 168: break;
        case 8: 
          { yybegin(YYINITIAL); return ParserTokenTypes.AND;
          }
        case 169: break;
        case 69: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TRY_KEYWORD;
          }
        case 170: break;
        case 70: 
          { yybegin(YYINITIAL); return ParserTokenTypes.REM_KEYWORD;
          }
        case 171: break;
        case 6: 
          { yybegin(YYINITIAL); return ParserTokenTypes.MINUS;
          }
        case 172: break;
        case 38: 
          { yybegin(ATTRIBUTE_VALUE_DQ); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 173: break;
        case 5: 
          { yybegin(YYINITIAL); return ParserTokenTypes.WHITE_SPACE;
          }
        case 174: break;
        case 82: 
          { yybegin(YYINITIAL); return ParserTokenTypes.CALLER_KEYWORD;
          }
        case 175: break;
        case 80: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { yybegin(YYINITIAL); return ParserTokenTypes.USE_KEYWORD;
          }
        case 176: break;
        case 68: 
          { yybegin(YYINITIAL); return ParserTokenTypes.DEF_KEYWORD;
          }
        case 177: break;
        case 79: 
          { yybegin(YYINITIAL); return ParserTokenTypes.WHILE_KEYWORD;
          }
        case 178: break;
        case 19: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LPAR;
          }
        case 179: break;
        case 50: 
          { yybegin(YYINITIAL); return ParserTokenTypes.STRING_LITERAL;
          }
        case 180: break;
        case 96: 
          { yybegin(DOC_TYPE); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 181: break;
        case 32: 
          { yybegin(LINE_COMMENT); yypushback(1);
          }
        case 182: break;
        case 18: 
          { yybegin(YYINITIAL); return ParserTokenTypes.GT;
          }
        case 183: break;
        case 61: 
          { yybegin(YYINITIAL); return ParserTokenTypes.OROR;
          }
        case 184: break;
        case 56: 
          { yybegin(YYINITIAL); return ParserTokenTypes.LITLT;
          }
        case 185: break;
        case 34: 
          { return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 186: break;
        case 85: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { yybegin(YYINITIAL); return ParserTokenTypes.BASE_KEYWORD;
          }
        case 187: break;
        case 93: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { yybegin(YYINITIAL); return ParserTokenTypes.DYNAMIC_KEYWORD;
          }
        case 188: break;
        case 89: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { yybegin(YYINITIAL); return ParserTokenTypes.LOCALS_KEYWORD;
          }
        case 189: break;
        case 21: 
          { yybegin(YYINITIAL); return ParserTokenTypes.OR;
          }
        case 190: break;
        case 35: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 191: break;
        case 99: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_CONSTRUCTOR_KEYWORD;
          }
        case 192: break;
        case 9: 
          { yybegin(YYINITIAL); return ParserTokenTypes.HAT_SIGN;
          }
        case 193: break;
        case 43: 
          { yybegin(PARSERDOC); return ParserTokenTypes.IDENTIFIER;
          }
        case 194: break;
        case 31: 
          { yybegin(YYINITIAL); return ParserTokenTypes.NEW_LINE_INDENT;
          }
        case 195: break;
        case 23: 
          { yybegin(YYINITIAL); return ParserTokenTypes.RBRACKET;
          }
        case 196: break;
        case 15: 
          { yybegin(YYINITIAL); return ParserTokenTypes.COLON;
          }
        case 197: break;
        case 66: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_START;
          }
        case 198: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
