/* The following code was generated by JFlex 1.4.3 on 28.04.17 19:38 */

package ru.artlebedev.idea.plugins.parser.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.xml.XmlTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28.04.17 19:38 from the specification file
 * <tt>ParserLexer.flex</tt>
 */
public class _ParserLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LINE_COMMENT = 20;
  public static final int C_COMMENT_END = 16;
  public static final int ATTRIBUTE_VALUE_SQ = 12;
  public static final int DOC_TYPE = 2;
  public static final int ATTRIBUTE_VALUE_DQ = 10;
  public static final int YYINITIAL = 0;
  public static final int PARSERDOC = 18;
  public static final int TAG_ATTRIBUTES = 6;
  public static final int COMMENT = 4;
  public static final int ATTRIBUTE_VALUE_START = 8;
  public static final int C_COMMENT_START = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\65\1\73\1\101\1\3\1\21\22\0\1\65\1\30\1\20"+
    "\1\13\1\104\1\110\1\16\1\22\1\62\1\63\1\107\1\10\1\72"+
    "\1\26\1\6\1\5\1\1\11\1\1\25\1\17\1\27\1\76\1\61"+
    "\1\106\1\77\1\102\1\55\1\35\1\31\1\15\1\14\1\14\1\45"+
    "\1\57\2\14\1\51\1\47\1\103\1\33\1\43\2\14\1\100\1\37"+
    "\1\53\3\14\1\41\1\14\1\74\1\112\1\75\1\11\1\4\1\0"+
    "\1\66\1\56\1\36\1\32\1\7\1\2\1\2\1\46\1\60\2\2"+
    "\1\52\1\50\1\71\1\34\1\44\1\2\1\67\1\70\1\40\1\54"+
    "\1\2\1\2\1\2\1\42\1\2\1\105\1\64\1\12\1\111\6\0"+
    "\1\101\44\0\1\24\12\0\1\24\4\0\1\24\5\0\27\24\1\0"+
    "\37\24\1\0\u01ca\24\4\0\14\24\16\0\5\24\7\0\1\24\1\0"+
    "\1\24\201\0\5\24\1\0\2\24\2\0\4\24\10\0\1\24\1\0"+
    "\3\24\1\0\1\24\1\0\24\24\1\0\123\24\1\0\31\24\100\23"+
    "\62\24\10\0\236\24\11\0\46\24\2\0\1\24\7\0\47\24\110\0"+
    "\33\24\5\0\3\24\55\0\53\24\43\0\2\24\1\0\143\24\1\0"+
    "\1\24\17\0\2\24\7\0\2\24\12\0\3\24\2\0\1\24\20\0"+
    "\1\24\1\0\36\24\35\0\131\24\13\0\1\24\30\0\41\24\11\0"+
    "\2\24\4\0\1\24\5\0\26\24\4\0\1\24\11\0\1\24\3\0"+
    "\1\24\27\0\31\24\107\0\1\24\1\0\13\24\127\0\66\24\3\0"+
    "\1\24\22\0\1\24\7\0\12\24\17\0\7\24\1\0\7\24\5\0"+
    "\10\24\2\0\2\24\2\0\26\24\1\0\7\24\1\0\1\24\3\0"+
    "\4\24\3\0\1\24\20\0\1\24\15\0\2\24\1\0\3\24\16\0"+
    "\2\24\23\0\6\24\4\0\2\24\2\0\26\24\1\0\7\24\1\0"+
    "\2\24\1\0\2\24\1\0\2\24\37\0\4\24\1\0\1\24\23\0"+
    "\3\24\20\0\11\24\1\0\3\24\1\0\26\24\1\0\7\24\1\0"+
    "\2\24\1\0\5\24\3\0\1\24\22\0\1\24\17\0\2\24\43\0"+
    "\10\24\2\0\2\24\2\0\26\24\1\0\7\24\1\0\2\24\1\0"+
    "\5\24\3\0\1\24\36\0\2\24\1\0\3\24\17\0\1\24\21\0"+
    "\1\24\1\0\6\24\3\0\3\24\1\0\4\24\3\0\2\24\1\0"+
    "\1\24\1\0\2\24\3\0\2\24\3\0\3\24\3\0\14\24\26\0"+
    "\1\24\64\0\10\24\1\0\3\24\1\0\27\24\1\0\12\24\1\0"+
    "\5\24\3\0\1\24\32\0\2\24\6\0\2\24\43\0\10\24\1\0"+
    "\3\24\1\0\27\24\1\0\12\24\1\0\5\24\3\0\1\24\40\0"+
    "\1\24\1\0\2\24\17\0\2\24\22\0\10\24\1\0\3\24\1\0"+
    "\51\24\2\0\1\24\20\0\1\24\21\0\2\24\30\0\6\24\5\0"+
    "\22\24\3\0\30\24\1\0\11\24\1\0\1\24\2\0\7\24\72\0"+
    "\60\24\1\0\2\24\14\0\7\24\72\0\2\24\1\0\1\24\2\0"+
    "\2\24\1\0\1\24\2\0\1\24\6\0\4\24\1\0\7\24\1\0"+
    "\3\24\1\0\1\24\1\0\1\24\2\0\2\24\1\0\4\24\1\0"+
    "\2\24\11\0\1\24\2\0\5\24\1\0\1\24\25\0\4\24\40\0"+
    "\1\24\77\0\10\24\1\0\44\24\33\0\5\24\163\0\53\24\24\0"+
    "\1\24\20\0\6\24\4\0\4\24\3\0\1\24\3\0\2\24\7\0"+
    "\3\24\4\0\15\24\14\0\1\24\21\0\46\24\1\0\1\24\5\0"+
    "\1\24\2\0\53\24\1\0\u014d\24\1\0\4\24\2\0\7\24\1\0"+
    "\1\24\1\0\4\24\2\0\51\24\1\0\4\24\2\0\41\24\1\0"+
    "\4\24\2\0\7\24\1\0\1\24\1\0\4\24\2\0\17\24\1\0"+
    "\71\24\1\0\4\24\2\0\103\24\45\0\20\24\20\0\125\24\14\0"+
    "\u026c\24\2\0\21\24\1\0\32\24\5\0\113\24\25\0\15\24\1\0"+
    "\4\24\16\0\22\24\16\0\22\24\16\0\15\24\1\0\3\24\17\0"+
    "\64\24\43\0\1\24\4\0\1\24\103\0\130\24\10\0\51\24\1\0"+
    "\1\24\5\0\106\24\12\0\35\24\63\0\36\24\2\0\5\24\13\0"+
    "\54\24\25\0\7\24\70\0\27\24\11\0\65\24\122\0\1\24\135\0"+
    "\57\24\21\0\7\24\67\0\36\24\15\0\2\24\12\0\54\24\32\0"+
    "\44\24\51\0\3\24\12\0\44\24\153\0\4\24\1\0\4\24\3\0"+
    "\2\24\11\0\300\24\100\0\u0116\24\2\0\6\24\2\0\46\24\2\0"+
    "\6\24\2\0\10\24\1\0\1\24\1\0\1\24\1\0\1\24\1\0"+
    "\37\24\2\0\65\24\1\0\7\24\1\0\1\24\3\0\3\24\1\0"+
    "\7\24\3\0\4\24\2\0\6\24\4\0\15\24\5\0\3\24\1\0"+
    "\7\24\53\0\2\101\107\0\1\24\15\0\1\24\20\0\15\24\145\0"+
    "\1\24\4\0\1\24\2\0\12\24\1\0\1\24\3\0\5\24\6\0"+
    "\1\24\1\0\1\24\1\0\1\24\1\0\4\24\1\0\13\24\2\0"+
    "\4\24\5\0\5\24\4\0\1\24\64\0\2\24\u0a7b\0\57\24\1\0"+
    "\57\24\1\0\205\24\6\0\4\24\3\0\2\24\14\0\46\24\1\0"+
    "\1\24\5\0\1\24\2\0\70\24\7\0\1\24\20\0\27\24\11\0"+
    "\7\24\1\0\7\24\1\0\7\24\1\0\7\24\1\0\7\24\1\0"+
    "\7\24\1\0\7\24\1\0\7\24\120\0\1\24\u01d5\0\2\24\52\0"+
    "\5\24\5\0\2\24\4\0\126\24\6\0\3\24\1\0\132\24\1\0"+
    "\4\24\5\0\51\24\3\0\136\24\21\0\33\24\65\0\20\24\u0200\0"+
    "\u19b6\24\112\0\u51cd\24\63\0\u048d\24\103\0\56\24\2\0\u010d\24\3\0"+
    "\20\24\12\0\2\24\24\0\57\24\20\0\31\24\10\0\106\24\61\0"+
    "\11\24\2\0\147\24\2\0\4\24\1\0\4\24\14\0\13\24\115\0"+
    "\12\24\1\0\3\24\1\0\4\24\1\0\27\24\35\0\64\24\16\0"+
    "\62\24\76\0\6\24\3\0\1\24\16\0\34\24\12\0\27\24\31\0"+
    "\35\24\7\0\57\24\34\0\1\24\60\0\51\24\27\0\3\24\1\0"+
    "\10\24\24\0\27\24\3\0\1\24\5\0\60\24\1\0\1\24\3\0"+
    "\2\24\2\0\5\24\2\0\1\24\1\0\1\24\30\0\3\24\2\0"+
    "\13\24\7\0\3\24\14\0\6\24\2\0\6\24\2\0\6\24\11\0"+
    "\7\24\1\0\7\24\221\0\43\24\35\0\u2ba4\24\14\0\27\24\4\0"+
    "\61\24\u2104\0\u016e\24\2\0\152\24\46\0\7\24\14\0\5\24\5\0"+
    "\1\24\1\0\12\24\1\0\15\24\1\0\5\24\1\0\1\24\1\0"+
    "\2\24\1\0\2\24\1\0\154\24\41\0\u016b\24\22\0\100\24\2\0"+
    "\66\24\50\0\14\24\164\0\5\24\1\0\207\24\44\0\32\24\6\0"+
    "\32\24\13\0\131\24\3\0\6\24\2\0\6\24\2\0\6\24\2\0"+
    "\3\24\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\2\12\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\3\1\25"+
    "\1\26\1\12\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\4\3\1\37\1\40\4\0\1\41\2\40"+
    "\1\42\4\40\1\43\2\0\1\44\1\45\1\0\1\46"+
    "\1\47\1\40\2\47\1\50\1\51\1\52\5\51\1\53"+
    "\1\51\1\54\2\55\1\0\1\56\1\57\1\0\1\60"+
    "\1\0\1\46\1\0\1\61\1\0\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\3\1\70\1\71\4\3\11\0"+
    "\1\40\6\51\3\0\5\3\7\0\1\72\1\0\6\51"+
    "\1\0\5\3\6\0\3\51\1\73\2\51\1\0\5\3"+
    "\2\0\2\74\3\0\3\51\1\75\1\51\2\0\4\3"+
    "\2\0\2\76\1\0\4\51\1\77\2\0\2\3\2\100"+
    "\2\101\1\0\2\102\1\0\1\103\3\51\2\0\2\104"+
    "\2\105\1\0\1\37\1\106\2\51\1\107\1\0\2\110"+
    "\1\51\1\75\1\0\1\51\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a\0\u0384"+
    "\0\u0384\0\u0384\0\u0465\0\u0384\0\u0384\0\u04b0\0\u0384\0\u04fb"+
    "\0\u0546\0\u0384\0\u0384\0\u0591\0\u05dc\0\u0627\0\u0384\0\u0384"+
    "\0\u0672\0\u06bd\0\u0384\0\u0384\0\u0708\0\u0384\0\u0384\0\u0384"+
    "\0\u0384\0\u0384\0\u0384\0\u0384\0\u0753\0\u079e\0\u07e9\0\u0834"+
    "\0\u087f\0\u08ca\0\u0384\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0384"+
    "\0\u0a41\0\u0a8c\0\u0384\0\u0ad7\0\u0b22\0\u0b6d\0\u0bb8\0\u0384"+
    "\0\u0b22\0\u0b6d\0\u0384\0\u0384\0\u0bb8\0\u0384\0\u0384\0\u0c03"+
    "\0\u0a41\0\u0c4e\0\u0384\0\u0c99\0\u0384\0\u0ce4\0\u0d2f\0\u0d7a"+
    "\0\u0dc5\0\u0e10\0\u0384\0\u0e5b\0\u0384\0\u0384\0\u0ea6\0\u0ef1"+
    "\0\u0384\0\u0384\0\u04fb\0\u0384\0\u0546\0\u0f3c\0\u0f87\0\u0384"+
    "\0\u0fd2\0\u0384\0\u0384\0\u0384\0\u0384\0\u0384\0\u0384\0\u101d"+
    "\0\u0384\0\u0384\0\u1068\0\u10b3\0\u10fe\0\u1149\0\u1194\0\u11df"+
    "\0\u122a\0\u1275\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec\0\u1437"+
    "\0\u1482\0\u14cd\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f"+
    "\0\u16da\0\u1725\0\u1770\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7"+
    "\0\u1932\0\u197d\0\u19c8\0\u1a13\0\u1a5e\0\u0384\0\u1aa9\0\u1af4"+
    "\0\u1b3f\0\u1b8a\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c"+
    "\0\u1d97\0\u1de2\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4"+
    "\0\u1fef\0\u203a\0\u2085\0\u20d0\0\u0c99\0\u211b\0\u2166\0\u21b1"+
    "\0\u21fc\0\u2247\0\u2292\0\u22dd\0\u2328\0\u2373\0\u23be\0\u0384"+
    "\0\u2409\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u2616"+
    "\0\u2661\0\u26ac\0\u26f7\0\u2742\0\u278d\0\u27d8\0\u2823\0\u286e"+
    "\0\u28b9\0\u0384\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30\0\u2a7b"+
    "\0\u0c99\0\u2ac6\0\u2b11\0\u2b5c\0\u2ba7\0\u0384\0\u2bf2\0\u0384"+
    "\0\u2c3d\0\u2c88\0\u0384\0\u2cd3\0\u2d1e\0\u0c99\0\u2d69\0\u2db4"+
    "\0\u2dff\0\u2e4a\0\u2e95\0\u0384\0\u2ee0\0\u0384\0\u2f2b\0\u2f76"+
    "\0\u0384\0\u0c99\0\u2fc1\0\u300c\0\u0384\0\u3057\0\u0384\0\u30a2"+
    "\0\u30ed\0\u0c99\0\u3138\0\u3183\0\u0384\0\u0c99";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\2\16\1\17\1\16\1\20\1\21\1\16\1\22"+
    "\1\23\1\24\1\25\2\16\1\26\1\27\1\30\1\17"+
    "\1\31\1\25\1\15\1\32\1\33\1\34\1\35\30\16"+
    "\1\36\1\37\1\40\1\41\1\17\1\42\3\16\1\25"+
    "\1\17\1\43\1\44\1\45\1\46\1\16\1\15\2\16"+
    "\1\47\1\50\1\25\1\51\1\52\1\53\1\54\1\15"+
    "\2\16\1\17\1\16\1\20\1\21\1\16\1\22\1\23"+
    "\1\24\1\55\2\16\1\26\1\27\1\30\1\17\1\31"+
    "\1\25\1\15\1\32\1\33\1\34\1\35\1\16\1\56"+
    "\11\16\1\57\5\16\1\60\6\16\1\36\1\37\1\40"+
    "\1\41\1\17\1\42\1\16\1\61\1\16\1\25\1\17"+
    "\1\43\1\44\1\45\1\62\1\16\1\15\2\16\1\47"+
    "\1\50\1\25\1\51\1\52\1\53\1\54\3\0\1\63"+
    "\14\0\1\64\1\63\1\65\20\0\2\66\2\67\12\0"+
    "\1\70\3\0\1\63\5\0\1\63\17\0\26\63\1\71"+
    "\1\72\44\63\1\73\21\63\1\74\1\63\1\75\3\63"+
    "\1\76\7\63\1\74\5\63\1\77\31\63\1\70\3\63"+
    "\1\74\5\63\1\74\2\63\1\100\14\63\3\0\1\74"+
    "\1\0\1\101\3\0\1\102\6\0\1\103\1\74\1\104"+
    "\4\0\1\105\31\0\1\70\3\0\1\74\5\0\1\74"+
    "\17\0\3\63\1\74\5\63\1\76\6\63\1\106\1\74"+
    "\5\63\1\77\35\63\1\74\5\63\1\74\22\63\1\74"+
    "\5\63\1\76\7\63\1\74\1\106\4\63\1\77\35\63"+
    "\1\74\5\63\1\74\17\63\2\107\1\110\4\107\1\110"+
    "\4\107\2\110\5\107\2\110\1\107\1\111\2\107\30\110"+
    "\5\107\4\110\3\107\1\112\2\107\1\110\1\107\2\110"+
    "\11\107\1\110\4\107\1\110\4\107\2\110\5\107\2\110"+
    "\1\107\1\111\2\107\30\110\5\107\4\110\6\107\1\110"+
    "\1\107\2\110\7\107\1\113\2\114\1\115\1\114\2\113"+
    "\1\114\4\113\2\114\3\113\1\115\7\113\1\114\1\116"+
    "\1\114\1\117\1\114\1\120\1\114\1\121\3\114\1\122"+
    "\14\114\4\113\1\123\1\114\1\124\2\114\1\125\1\115"+
    "\4\113\1\114\1\113\2\114\7\113\73\14\1\0\17\14"+
    "\114\0\2\16\1\0\2\16\1\0\1\16\4\0\2\16"+
    "\13\0\30\16\5\0\4\16\6\0\1\16\1\0\2\16"+
    "\12\0\1\17\15\0\1\17\43\0\1\17\5\0\1\17"+
    "\30\0\2\126\1\127\3\0\2\126\4\0\1\126\34\0"+
    "\2\126\10\0\2\126\1\0\1\126\4\0\2\126\6\0"+
    "\2\130\1\0\1\130\2\0\1\130\1\0\1\130\1\0"+
    "\3\130\1\131\1\132\11\0\30\130\5\0\4\130\6\0"+
    "\1\130\1\0\2\130\7\0\20\133\1\134\1\0\51\133"+
    "\1\0\17\133\21\135\1\0\1\134\50\135\1\0\17\135"+
    "\2\0\1\136\1\0\1\136\1\137\1\0\1\136\4\0"+
    "\2\136\5\0\3\136\1\0\1\140\1\141\30\136\5\0"+
    "\4\136\4\0\1\142\1\0\1\136\1\0\2\136\73\0"+
    "\1\143\11\0\1\144\75\0\1\145\14\0\1\146\100\0"+
    "\1\147\27\0\2\16\1\0\2\16\1\0\1\16\4\0"+
    "\2\16\13\0\13\16\1\150\14\16\5\0\4\16\6\0"+
    "\1\16\1\0\2\16\105\0\1\151\41\0\1\152\66\0"+
    "\2\16\1\0\2\16\1\0\1\16\4\0\2\16\13\0"+
    "\11\16\1\153\16\16\5\0\4\16\6\0\1\16\1\0"+
    "\2\16\10\0\2\16\1\0\2\16\1\0\1\16\4\0"+
    "\2\16\13\0\30\16\5\0\1\154\3\16\6\0\1\16"+
    "\1\0\2\16\10\0\2\16\1\0\2\16\1\0\1\16"+
    "\4\0\2\16\13\0\3\16\1\155\24\16\5\0\4\16"+
    "\6\0\1\16\1\0\2\16\10\0\2\16\1\0\2\16"+
    "\1\0\1\16\4\0\2\16\13\0\7\16\1\156\20\16"+
    "\5\0\4\16\6\0\1\16\1\0\2\16\42\0\1\157"+
    "\1\0\1\160\15\0\1\161\1\0\1\162\12\0\1\163"+
    "\22\0\20\64\1\63\72\64\22\65\1\63\70\65\53\0"+
    "\2\164\75\0\2\165\100\0\1\166\114\0\1\167\65\0"+
    "\1\74\15\0\1\74\43\0\1\74\5\0\1\74\100\0"+
    "\1\70\42\0\2\63\1\170\3\0\2\63\4\0\1\63"+
    "\34\0\2\63\10\0\2\63\1\0\1\63\4\0\2\63"+
    "\7\0\1\136\1\0\1\136\1\137\1\0\1\136\4\0"+
    "\2\136\5\0\3\136\3\0\30\136\5\0\4\136\6\0"+
    "\1\136\1\0\2\136\10\0\3\110\2\0\2\110\4\0"+
    "\3\110\2\0\1\110\1\0\2\110\3\0\31\110\1\0"+
    "\10\110\1\0\1\110\4\0\1\110\1\0\2\110\70\0"+
    "\1\107\32\0\2\114\1\0\2\114\1\0\1\114\4\0"+
    "\2\114\13\0\30\114\5\0\4\114\6\0\1\114\1\0"+
    "\2\114\10\0\2\114\1\0\2\114\1\0\1\114\4\0"+
    "\2\114\13\0\11\114\1\171\16\114\5\0\4\114\6\0"+
    "\1\114\1\0\2\114\10\0\2\114\1\0\2\114\1\0"+
    "\1\114\4\0\2\114\13\0\13\114\1\172\14\114\5\0"+
    "\4\114\6\0\1\114\1\0\2\114\10\0\2\114\1\0"+
    "\2\114\1\0\1\114\4\0\2\114\13\0\3\114\1\173"+
    "\24\114\5\0\4\114\6\0\1\114\1\0\2\114\10\0"+
    "\2\114\1\0\2\114\1\0\1\114\4\0\2\114\13\0"+
    "\11\114\1\174\16\114\5\0\4\114\6\0\1\114\1\0"+
    "\2\114\10\0\2\114\1\0\2\114\1\0\1\114\4\0"+
    "\2\114\13\0\30\114\5\0\1\175\3\114\6\0\1\114"+
    "\1\0\2\114\10\0\2\114\1\0\2\114\1\0\1\176"+
    "\4\0\2\114\13\0\30\114\5\0\4\114\6\0\1\114"+
    "\1\0\2\114\10\0\1\177\12\0\2\177\13\0\1\177"+
    "\1\0\1\177\1\0\1\177\1\0\1\177\1\0\1\177"+
    "\1\0\1\177\1\0\1\177\1\0\1\177\1\0\1\177"+
    "\1\0\1\177\1\0\1\177\1\0\1\177\20\0\1\177"+
    "\1\0\2\177\10\0\2\130\1\0\1\130\2\0\1\130"+
    "\1\0\1\130\1\0\3\130\1\0\1\132\11\0\30\130"+
    "\5\0\4\130\6\0\1\130\1\0\2\130\10\0\2\136"+
    "\1\0\1\136\1\0\2\136\4\0\2\136\5\0\4\136"+
    "\2\0\30\136\5\0\4\136\6\0\1\136\1\0\2\136"+
    "\11\0\1\136\1\0\1\136\2\0\1\136\4\0\2\136"+
    "\5\0\3\136\3\0\30\136\5\0\4\136\6\0\1\136"+
    "\1\0\2\136\35\0\1\200\2\0\2\201\61\0\2\16"+
    "\1\0\2\16\1\0\1\16\4\0\2\16\13\0\13\16"+
    "\1\202\14\16\5\0\4\16\6\0\1\16\1\0\2\16"+
    "\10\0\2\16\1\0\2\16\1\0\1\16\4\0\2\16"+
    "\13\0\30\16\5\0\3\16\1\203\6\0\1\16\1\0"+
    "\2\16\10\0\2\16\1\0\2\16\1\0\1\16\4\0"+
    "\2\16\13\0\30\16\5\0\1\16\1\204\2\16\6\0"+
    "\1\16\1\0\2\16\10\0\2\16\1\0\2\16\1\0"+
    "\1\16\4\0\2\16\13\0\5\16\1\205\22\16\5\0"+
    "\4\16\6\0\1\16\1\0\2\16\10\0\2\16\1\0"+
    "\2\16\1\0\1\16\4\0\2\16\13\0\30\16\5\0"+
    "\1\206\3\16\6\0\1\16\1\0\2\16\52\0\1\207"+
    "\120\0\1\210\141\0\1\211\114\0\1\212\50\0\1\213"+
    "\127\0\2\214\103\0\2\215\45\0\1\166\15\0\1\166"+
    "\37\0\1\70\3\0\1\166\5\0\1\166\113\0\1\216"+
    "\17\0\1\217\12\0\2\217\13\0\1\217\1\0\1\217"+
    "\1\0\1\217\1\0\1\217\1\0\1\217\1\0\1\217"+
    "\1\0\1\217\1\0\1\217\1\0\1\217\1\0\1\217"+
    "\1\0\1\217\1\0\1\217\20\0\1\217\1\0\2\217"+
    "\10\0\2\114\1\0\2\114\1\0\1\114\4\0\2\114"+
    "\13\0\30\114\5\0\3\114\1\220\6\0\1\114\1\0"+
    "\2\114\10\0\2\114\1\0\2\114\1\0\1\114\4\0"+
    "\2\114\13\0\7\114\1\221\20\114\5\0\4\114\6\0"+
    "\1\114\1\0\2\114\10\0\2\114\1\0\2\114\1\0"+
    "\1\114\4\0\2\114\13\0\30\114\5\0\3\114\1\222"+
    "\6\0\1\114\1\0\2\114\10\0\2\114\1\0\2\114"+
    "\1\0\1\114\4\0\2\114\13\0\13\114\1\223\14\114"+
    "\5\0\4\114\6\0\1\114\1\0\2\114\10\0\2\114"+
    "\1\0\2\114\1\0\1\114\4\0\2\114\13\0\30\114"+
    "\5\0\1\114\1\224\2\114\6\0\1\114\1\0\2\114"+
    "\10\0\2\114\1\0\2\114\1\0\1\114\4\0\2\114"+
    "\13\0\30\114\5\0\2\114\1\225\1\114\6\0\1\114"+
    "\1\0\2\114\10\0\1\126\12\0\2\126\13\0\1\126"+
    "\1\0\1\126\1\0\1\126\1\0\1\126\1\0\1\126"+
    "\1\0\1\126\1\0\1\126\1\0\1\126\1\0\1\126"+
    "\1\0\1\126\1\0\1\126\1\0\1\126\20\0\1\126"+
    "\1\0\2\126\35\0\1\107\117\0\2\226\57\0\2\16"+
    "\1\0\2\16\1\0\1\16\4\0\2\16\13\0\21\16"+
    "\1\227\6\16\5\0\4\16\6\0\1\16\1\0\2\16"+
    "\10\0\2\16\1\0\2\16\1\0\1\16\4\0\2\16"+
    "\13\0\30\16\5\0\1\230\3\16\6\0\1\16\1\0"+
    "\2\16\10\0\2\16\1\0\2\16\1\0\1\16\4\0"+
    "\2\16\13\0\7\16\1\231\20\16\5\0\4\16\6\0"+
    "\1\16\1\0\2\16\10\0\2\16\1\0\2\16\1\0"+
    "\1\16\4\0\2\16\13\0\30\16\5\0\1\232\3\16"+
    "\6\0\1\16\1\0\2\16\10\0\2\16\1\0\2\16"+
    "\1\0\1\16\4\0\2\16\13\0\7\16\1\233\20\16"+
    "\5\0\4\16\6\0\1\16\1\0\2\16\46\0\1\234"+
    "\155\0\1\235\25\0\1\236\175\0\1\237\100\0\1\240"+
    "\75\0\2\241\111\0\2\63\41\0\1\63\12\0\2\63"+
    "\13\0\1\63\1\0\1\63\1\0\1\63\1\0\1\63"+
    "\1\0\1\63\1\0\1\63\1\0\1\63\1\0\1\63"+
    "\1\0\1\63\1\0\1\63\1\0\1\63\1\0\1\63"+
    "\20\0\1\63\1\0\2\63\10\0\2\114\1\0\2\114"+
    "\1\0\1\114\4\0\2\114\13\0\30\114\5\0\1\242"+
    "\3\114\6\0\1\114\1\0\2\114\10\0\2\114\1\0"+
    "\2\114\1\0\1\114\4\0\2\114\13\0\27\114\1\243"+
    "\5\0\4\114\6\0\1\114\1\0\2\114\10\0\2\114"+
    "\1\0\2\114\1\0\1\114\4\0\2\114\13\0\30\114"+
    "\5\0\2\114\1\244\1\114\6\0\1\114\1\0\2\114"+
    "\10\0\2\114\1\0\2\114\1\0\1\245\4\0\2\114"+
    "\13\0\30\114\5\0\4\114\6\0\1\114\1\0\2\114"+
    "\10\0\2\114\1\0\2\114\1\0\1\114\4\0\2\114"+
    "\13\0\30\114\5\0\1\246\3\114\6\0\1\114\1\0"+
    "\2\114\10\0\2\114\1\0\2\114\1\0\1\114\4\0"+
    "\2\114\13\0\23\114\1\247\4\114\5\0\4\114\6\0"+
    "\1\114\1\0\2\114\44\0\2\250\55\0\2\16\1\0"+
    "\2\16\1\0\1\16\4\0\2\16\13\0\11\16\1\251"+
    "\16\16\5\0\4\16\6\0\1\16\1\0\2\16\10\0"+
    "\2\16\1\0\2\16\1\0\1\16\4\0\2\16\13\0"+
    "\17\16\1\252\10\16\5\0\4\16\6\0\1\16\1\0"+
    "\2\16\10\0\2\16\1\0\2\16\1\0\1\16\4\0"+
    "\2\16\13\0\27\16\1\253\5\0\4\16\6\0\1\16"+
    "\1\0\2\16\10\0\2\16\1\0\2\16\1\0\1\16"+
    "\4\0\2\16\13\0\21\16\1\254\6\16\5\0\4\16"+
    "\6\0\1\16\1\0\2\16\10\0\2\16\1\0\2\16"+
    "\1\0\1\16\4\0\2\16\13\0\27\16\1\255\5\0"+
    "\4\16\6\0\1\16\1\0\2\16\66\0\1\256\133\0"+
    "\1\257\15\0\1\260\15\0\1\261\51\0\1\260\5\0"+
    "\1\260\26\0\1\262\135\0\1\263\131\0\2\264\33\0"+
    "\2\114\1\0\2\114\1\0\1\114\4\0\2\114\13\0"+
    "\17\114\1\265\10\114\5\0\4\114\6\0\1\114\1\0"+
    "\2\114\10\0\2\114\1\0\2\114\1\0\1\114\4\0"+
    "\2\114\13\0\3\114\1\266\24\114\5\0\4\114\6\0"+
    "\1\114\1\0\2\114\10\0\2\114\1\0\2\114\1\0"+
    "\1\114\4\0\2\114\13\0\7\114\1\267\20\114\5\0"+
    "\4\114\6\0\1\114\1\0\2\114\10\0\2\114\1\0"+
    "\2\114\1\0\1\114\4\0\2\114\13\0\17\114\1\270"+
    "\10\114\5\0\4\114\6\0\1\114\1\0\2\114\10\0"+
    "\2\114\1\0\2\114\1\0\1\114\4\0\2\114\13\0"+
    "\21\114\1\271\6\114\5\0\4\114\6\0\1\114\1\0"+
    "\2\114\46\0\2\272\53\0\2\16\1\0\2\16\1\0"+
    "\1\16\4\0\2\16\10\0\1\273\2\0\30\16\5\0"+
    "\4\16\6\0\1\16\1\0\2\16\10\0\2\16\1\0"+
    "\2\16\1\0\1\16\4\0\2\16\13\0\27\16\1\274"+
    "\5\0\4\16\6\0\1\16\1\0\2\16\10\0\2\16"+
    "\1\0\2\16\1\0\1\16\4\0\2\16\13\0\30\16"+
    "\5\0\1\275\3\16\6\0\1\16\1\0\2\16\10\0"+
    "\2\16\1\0\2\16\1\0\1\16\4\0\2\16\13\0"+
    "\30\16\5\0\2\16\1\276\1\16\6\0\1\16\1\0"+
    "\2\16\10\0\2\16\1\0\2\16\1\0\1\16\4\0"+
    "\2\16\13\0\5\16\1\277\22\16\5\0\4\16\6\0"+
    "\1\16\1\0\2\16\42\0\1\300\157\0\1\301\105\0"+
    "\1\260\22\0\1\302\15\0\1\303\51\0\1\302\5\0"+
    "\1\302\71\0\1\304\67\0\2\63\55\0\2\114\1\0"+
    "\2\114\1\0\1\114\4\0\2\114\13\0\27\114\1\305"+
    "\5\0\4\114\6\0\1\114\1\0\2\114\10\0\2\114"+
    "\1\0\2\114\1\0\1\114\4\0\2\114\13\0\30\114"+
    "\5\0\3\114\1\306\6\0\1\114\1\0\2\114\10\0"+
    "\2\114\1\0\2\114\1\0\1\114\4\0\2\114\13\0"+
    "\30\114\5\0\1\114\1\307\2\114\6\0\1\114\1\0"+
    "\2\114\10\0\2\114\1\0\2\114\1\0\1\310\4\0"+
    "\2\114\13\0\30\114\5\0\4\114\6\0\1\114\1\0"+
    "\2\114\10\0\2\114\1\0\2\114\1\0\1\114\4\0"+
    "\2\114\13\0\7\114\1\311\20\114\5\0\4\114\6\0"+
    "\1\114\1\0\2\114\50\0\2\312\110\0\1\313\53\0"+
    "\2\16\1\0\2\16\1\0\1\16\4\0\2\16\13\0"+
    "\5\16\1\314\22\16\5\0\4\16\6\0\1\16\1\0"+
    "\2\16\10\0\2\16\1\0\2\16\1\0\1\16\4\0"+
    "\2\16\13\0\21\16\1\315\6\16\5\0\4\16\6\0"+
    "\1\16\1\0\2\16\10\0\2\16\1\316\2\16\1\0"+
    "\1\16\4\0\2\16\3\0\1\317\7\0\30\16\5\0"+
    "\4\16\1\0\1\316\4\0\1\16\1\316\2\16\10\0"+
    "\2\16\1\320\2\16\1\0\1\16\4\0\2\16\3\0"+
    "\1\321\7\0\30\16\5\0\4\16\1\0\1\320\4\0"+
    "\1\16\1\320\2\16\112\0\1\322\12\0\1\323\15\0"+
    "\1\324\51\0\1\323\5\0\1\323\104\0\1\302\55\0"+
    "\1\325\55\0\2\114\1\0\2\114\1\0\1\114\4\0"+
    "\2\114\13\0\5\114\1\326\22\114\5\0\4\114\6\0"+
    "\1\114\1\0\2\114\10\0\2\114\1\0\2\114\1\0"+
    "\1\114\4\0\2\114\13\0\30\114\5\0\1\327\3\114"+
    "\6\0\1\114\1\0\2\114\10\0\2\114\1\0\2\114"+
    "\1\0\1\114\4\0\2\114\13\0\23\114\1\330\4\114"+
    "\5\0\4\114\6\0\1\114\1\0\2\114\10\0\2\114"+
    "\1\0\2\114\1\0\1\114\4\0\2\114\13\0\7\114"+
    "\1\331\20\114\5\0\4\114\6\0\1\114\1\0\2\114"+
    "\52\0\2\332\134\0\1\333\25\0\2\16\1\334\2\16"+
    "\1\0\1\16\4\0\2\16\3\0\1\335\7\0\30\16"+
    "\5\0\4\16\1\0\1\334\4\0\1\16\1\334\2\16"+
    "\10\0\2\16\1\336\2\16\1\0\1\16\4\0\2\16"+
    "\3\0\1\337\7\0\30\16\5\0\4\16\1\0\1\336"+
    "\4\0\1\16\1\336\2\16\102\0\1\316\112\0\1\320"+
    "\117\0\1\340\105\0\1\323\44\0\1\341\66\0\2\114"+
    "\1\0\2\114\1\0\1\114\4\0\2\114\13\0\21\114"+
    "\1\342\6\114\5\0\4\114\6\0\1\114\1\0\2\114"+
    "\10\0\2\114\1\0\2\114\1\0\1\114\4\0\2\114"+
    "\13\0\5\114\1\343\22\114\5\0\4\114\6\0\1\114"+
    "\1\0\2\114\10\0\2\114\1\0\2\114\1\0\1\344"+
    "\4\0\2\114\13\0\30\114\5\0\4\114\6\0\1\114"+
    "\1\0\2\114\16\0\1\345\5\0\1\345\155\0\1\346"+
    "\125\0\1\334\112\0\1\336\22\0\1\347\15\0\1\350"+
    "\51\0\1\347\5\0\1\347\12\0\2\114\1\0\2\114"+
    "\1\0\1\114\4\0\2\114\13\0\7\114\1\351\20\114"+
    "\5\0\4\114\6\0\1\114\1\0\2\114\10\0\2\114"+
    "\1\0\2\114\1\0\1\114\4\0\2\114\13\0\30\114"+
    "\5\0\1\114\1\352\2\114\6\0\1\114\1\0\2\114"+
    "\100\0\1\353\114\0\1\347\20\0\2\114\1\0\2\114"+
    "\1\0\1\114\4\0\2\114\13\0\3\114\1\354\24\114"+
    "\5\0\4\114\6\0\1\114\1\0\2\114\47\0\1\355"+
    "\53\0\2\114\1\0\2\114\1\0\1\114\4\0\2\114"+
    "\13\0\30\114\5\0\1\114\1\356\2\114\6\0\1\114"+
    "\1\0\2\114\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\1\1\11\2\1\3\11\1\1\2\11\1\1"+
    "\1\11\2\1\2\11\3\1\2\11\2\1\2\11\1\1"+
    "\7\11\6\1\1\11\4\0\1\11\2\1\1\11\4\1"+
    "\1\11\2\0\2\11\1\0\2\11\3\1\1\11\1\1"+
    "\1\11\5\1\1\11\1\1\2\11\1\1\1\0\2\11"+
    "\1\0\1\11\1\0\1\1\1\0\1\11\1\0\6\11"+
    "\1\1\2\11\4\1\11\0\7\1\3\0\5\1\7\0"+
    "\1\11\1\0\6\1\1\0\5\1\6\0\6\1\1\0"+
    "\5\1\2\0\1\11\1\1\3\0\5\1\2\0\4\1"+
    "\2\0\1\11\1\1\1\0\5\1\2\0\2\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\11\1\1\1\0\4\1"+
    "\2\0\1\11\1\1\1\11\1\1\1\0\1\11\3\1"+
    "\1\11\1\0\1\11\3\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public _ParserLexer() {
      this((java.io.Reader) null);
    }

    public _ParserLexer(boolean highlightMode) {
      this((java.io.Reader) null);
    }


  public _ParserLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ParserLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1294) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
        return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
                zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { return ParserTokenTypes.COLON;
          }
        case 75: break;
        case 29: 
          { return ParserTokenTypes.DIR;
          }
        case 76: break;
        case 59: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_TYPE_KEYWORD;
          }
        case 77: break;
        case 11: 
          { return ParserTokenTypes.AND;
          }
        case 78: break;
        case 61: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_PARAM_KEYWORD;
          }
        case 79: break;
        case 2: 
          { return ParserTokenTypes.BAD_CHARACTER;
          }
        case 80: break;
        case 52: 
          { return ParserTokenTypes.NE;
          }
        case 81: break;
        case 46: 
          { return ParserTokenTypes.ANDAND;
          }
        case 82: break;
        case 62: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { return ParserTokenTypes.BASE_KEYWORD;
          }
        case 83: break;
        case 12: 
          { return ParserTokenTypes.SEMICOLON;
          }
        case 84: break;
        case 68: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { return ParserTokenTypes.DYNAMIC_KEYWORD;
          }
        case 85: break;
        case 50: 
          { return ParserTokenTypes.LE;
          }
        case 86: break;
        case 26: 
          { return ParserTokenTypes.MULT;
          }
        case 87: break;
        case 45: 
          { return ParserTokenTypes.ESCAPE;
          }
        case 88: break;
        case 58: 
          { yybegin(C_COMMENT_END); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 89: break;
        case 7: 
          { return ParserTokenTypes.PLUS;
          }
        case 90: break;
        case 10: 
          { return ParserTokenTypes.USELESS_CHAR;
          }
        case 91: break;
        case 39: 
          { yybegin(COMMENT); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 92: break;
        case 73: 
          { return ParserTokenTypes.APPLY_TAINT_KEYWORD;
          }
        case 93: break;
        case 56: 
          { return ParserTokenTypes.EQEQ;
          }
        case 94: break;
        case 54: 
          { return ParserTokenTypes.GE;
          }
        case 95: break;
        case 51: 
          { return ParserTokenTypes.XOR;
          }
        case 96: break;
        case 49: 
          { return ParserTokenTypes.LTLT;
          }
        case 97: break;
        case 67: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_DYNAMIC_KEYWORD;
          }
        case 98: break;
        case 23: 
          { return ParserTokenTypes.AT_SIGN;
          }
        case 99: break;
        case 16: 
          { return ParserTokenTypes.EXCL;
          }
        case 100: break;
        case 5: 
          { return ParserTokenTypes.DIV;
          }
        case 101: break;
        case 38: 
          { yybegin(TAG_ATTRIBUTES); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 102: break;
        case 70: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_OPTIONAL_KEYWORD;
          }
        case 103: break;
        case 53: 
          { return ParserTokenTypes.GTGT;
          }
        case 104: break;
        case 4: 
          { return ParserTokenTypes.WHITE_SPACE;
          }
        case 105: break;
        case 60: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return ParserTokenTypes.USE_KEYWORD;
          }
        case 106: break;
        case 6: 
          { return ParserTokenTypes.DOT;
          }
        case 107: break;
        case 44: 
          { yybegin(PARSERDOC); return ParserTokenTypes.COMMA;
          }
        case 108: break;
        case 40: 
          { yybegin(PARSERDOC); return ParserTokenTypes.BAD_CHARACTER;
          }
        case 109: break;
        case 1: 
          { yybegin(YYINITIAL); return ParserTokenTypes.SHARP_COMMENT;
          }
        case 110: break;
        case 37: 
          { yybegin(ATTRIBUTE_VALUE_SQ); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 111: break;
        case 63: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_RESULT_KEYWORD;
          }
        case 112: break;
        case 43: 
          { yybegin(PARSERDOC); return ParserTokenTypes.NEW_LINE_INDENT;
          }
        case 113: break;
        case 28: 
          { return ParserTokenTypes.TILDE;
          }
        case 114: break;
        case 69: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { return ParserTokenTypes.PARTIAL_KEYWORD;
          }
        case 115: break;
        case 47: 
          { return ParserTokenTypes.HTML_ENTITY;
          }
        case 116: break;
        case 34: 
          { yybegin(C_COMMENT_START); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 117: break;
        case 24: 
          { return ParserTokenTypes.DOLLAR;
          }
        case 118: break;
        case 8: 
          { return ParserTokenTypes.HAT_SIGN;
          }
        case 119: break;
        case 22: 
          { return ParserTokenTypes.RBRACKET;
          }
        case 120: break;
        case 35: 
          { yybegin(ATTRIBUTE_VALUE_START); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 121: break;
        case 65: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { return ParserTokenTypes.STATIC_KEYWORD;
          }
        case 122: break;
        case 15: 
          { return ParserTokenTypes.LT;
          }
        case 123: break;
        case 36: 
          { yybegin(ATTRIBUTE_VALUE_DQ); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 124: break;
        case 14: 
          { return ParserTokenTypes.MINUS;
          }
        case 125: break;
        case 42: 
          { yybegin(YYINITIAL); return ParserTokenTypes.WHITE_SPACE;
          }
        case 126: break;
        case 27: 
          { return ParserTokenTypes.PERC;
          }
        case 127: break;
        case 19: 
          { return ParserTokenTypes.RPAR;
          }
        case 128: break;
        case 9: 
          { return ParserTokenTypes.RBRACE;
          }
        case 129: break;
        case 71: 
          { yybegin(DOC_TYPE); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 130: break;
        case 30: 
          { yybegin(LINE_COMMENT); yypushback(1);
          }
        case 131: break;
        case 3: 
          { return ParserTokenTypes.IDENTIFIER;
          }
        case 132: break;
        case 25: 
          { return ParserTokenTypes.LBRACE;
          }
        case 133: break;
        case 48: 
          { return ParserTokenTypes.STRING_LITERAL;
          }
        case 134: break;
        case 17: 
          { return ParserTokenTypes.GT;
          }
        case 135: break;
        case 32: 
          { return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 136: break;
        case 72: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 8;
          { return ParserTokenTypes.OPTIONS_KEYWORD;
          }
        case 137: break;
        case 21: 
          { return ParserTokenTypes.LBRACKET;
          }
        case 138: break;
        case 18: 
          { return ParserTokenTypes.LPAR;
          }
        case 139: break;
        case 33: 
          { yybegin(YYINITIAL); return ParserTokenTypes.TEMPLATE_HTML_TEXT;
          }
        case 140: break;
        case 64: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { return ParserTokenTypes.LOCALS_KEYWORD;
          }
        case 141: break;
        case 55: 
          { return ParserTokenTypes.OROR;
          }
        case 142: break;
        case 66: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { return ParserTokenTypes.CLASS_KEYWORD;
          }
        case 143: break;
        case 20: 
          { return ParserTokenTypes.OR;
          }
        case 144: break;
        case 74: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_CONSTRUCTOR_KEYWORD;
          }
        case 145: break;
        case 41: 
          { yybegin(PARSERDOC); return ParserTokenTypes.IDENTIFIER;
          }
        case 146: break;
        case 31: 
          { return ParserTokenTypes.KEY_AT_SIGN;
          }
        case 147: break;
        case 57: 
          { yybegin(PARSERDOC); return ParserTokenTypes.PARSERDOC_START;
          }
        case 148: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
